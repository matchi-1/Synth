{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SelectEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ReactInputSelection = require(\"./ReactInputSelection\");\nvar SyntheticEvent = require(\"./SyntheticEvent\");\nvar getActiveElement = require(\"./getActiveElement\");\nvar isTextInputElement = require(\"./isTextInputElement\");\nvar keyOf = require(\"./keyOf\");\nvar shallowEqual = require(\"./shallowEqual\");\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar eventTypes = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onSelect: null\n      }),\n      captured: keyOf({\n        onSelectCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]\n  }\n};\nvar activeElement = null;\nvar activeElementID = null;\nvar lastSelection = null;\nvar mouseDown = false;\n\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @param {object}\n */\nfunction getSelection(node) {\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  } else if (document.selection) {\n    var range = document.selection.createRange();\n    return {\n      parentElement: range.parentElement(),\n      text: range.text,\n      top: range.boundingTop,\n      left: range.boundingLeft\n    };\n  }\n}\n\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\nfunction constructSelectEvent(nativeEvent) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {\n    return null;\n  }\n\n  // Only fire when selection has actually changed.\n  var currentSelection = getSelection(activeElement);\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent);\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement;\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\n    return syntheticEvent;\n  }\n}\n\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\nvar SelectEventPlugin = {\n  eventTypes: eventTypes,\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case topLevelTypes.topFocus:\n        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {\n          activeElement = topLevelTarget;\n          activeElementID = topLevelTargetID;\n          lastSelection = null;\n        }\n        break;\n      case topLevelTypes.topBlur:\n        activeElement = null;\n        activeElementID = null;\n        lastSelection = null;\n        break;\n\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n      case topLevelTypes.topMouseDown:\n        mouseDown = true;\n        break;\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topMouseUp:\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent);\n\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't).\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      case topLevelTypes.topSelectionChange:\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        return constructSelectEvent(nativeEvent);\n    }\n  }\n};\nmodule.exports = SelectEventPlugin;","map":{"version":3,"names":["EventConstants","require","EventPropagators","ReactInputSelection","SyntheticEvent","getActiveElement","isTextInputElement","keyOf","shallowEqual","topLevelTypes","eventTypes","select","phasedRegistrationNames","bubbled","onSelect","captured","onSelectCapture","dependencies","topBlur","topContextMenu","topFocus","topKeyDown","topMouseDown","topMouseUp","topSelectionChange","activeElement","activeElementID","lastSelection","mouseDown","getSelection","node","hasSelectionCapabilities","start","selectionStart","end","selectionEnd","window","selection","anchorNode","anchorOffset","focusNode","focusOffset","document","range","createRange","parentElement","text","top","boundingTop","left","boundingLeft","constructSelectEvent","nativeEvent","currentSelection","syntheticEvent","getPooled","type","target","accumulateTwoPhaseDispatches","SelectEventPlugin","extractEvents","topLevelType","topLevelTarget","topLevelTargetID","contentEditable","topKeyUp","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/SelectEventPlugin.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SelectEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ReactInputSelection = require(\"./ReactInputSelection\");\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar getActiveElement = require(\"./getActiveElement\");\nvar isTextInputElement = require(\"./isTextInputElement\");\nvar keyOf = require(\"./keyOf\");\nvar shallowEqual = require(\"./shallowEqual\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onSelect: null}),\n      captured: keyOf({onSelectCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topContextMenu,\n      topLevelTypes.topFocus,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topMouseDown,\n      topLevelTypes.topMouseUp,\n      topLevelTypes.topSelectionChange\n    ]\n  }\n};\n\nvar activeElement = null;\nvar activeElementID = null;\nvar lastSelection = null;\nvar mouseDown = false;\n\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @param {object}\n */\nfunction getSelection(node) {\n  if ('selectionStart' in node &&\n      ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  } else if (document.selection) {\n    var range = document.selection.createRange();\n    return {\n      parentElement: range.parentElement(),\n      text: range.text,\n      top: range.boundingTop,\n      left: range.boundingLeft\n    };\n  }\n}\n\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\nfunction constructSelectEvent(nativeEvent) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown ||\n      activeElement == null ||\n      activeElement !== getActiveElement()) {\n    return null;\n  }\n\n  // Only fire when selection has actually changed.\n  var currentSelection = getSelection(activeElement);\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n\n    var syntheticEvent = SyntheticEvent.getPooled(\n      eventTypes.select,\n      activeElementID,\n      nativeEvent\n    );\n\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement;\n\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\n\n    return syntheticEvent;\n  }\n}\n\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\nvar SelectEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case topLevelTypes.topFocus:\n        if (isTextInputElement(topLevelTarget) ||\n            topLevelTarget.contentEditable === 'true') {\n          activeElement = topLevelTarget;\n          activeElementID = topLevelTargetID;\n          lastSelection = null;\n        }\n        break;\n      case topLevelTypes.topBlur:\n        activeElement = null;\n        activeElementID = null;\n        lastSelection = null;\n        break;\n\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n      case topLevelTypes.topMouseDown:\n        mouseDown = true;\n        break;\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topMouseUp:\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent);\n\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't).\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      case topLevelTypes.topSelectionChange:\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        return constructSelectEvent(nativeEvent);\n    }\n  }\n};\n\nmodule.exports = SelectEventPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}