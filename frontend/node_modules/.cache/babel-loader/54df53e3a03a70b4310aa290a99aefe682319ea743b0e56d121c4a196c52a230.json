{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { tokenize, TOKENS, stringify } from '../../third_party/parsel-js/parsel-js.js';\nTOKENS['nesting'] = /&/g;\nTOKENS['combinator'] = /\\s*(>>>>?|[\\s>+~])\\s*/g;\nconst ESCAPE_REGEXP = /\\\\[\\s\\S]/g;\nconst unquote = text => {\n  if (text.length <= 1) {\n    return text;\n  }\n  if ((text[0] === '\"' || text[0] === \"'\") && text.endsWith(text[0])) {\n    text = text.slice(1, -1);\n  }\n  return text.replace(ESCAPE_REGEXP, match => {\n    return match[1];\n  });\n};\n/**\n * @internal\n */\nexport function parsePSelectors(selector) {\n  let isPureCSS = true;\n  let hasAria = false;\n  let hasPseudoClasses = false;\n  const tokens = tokenize(selector);\n  if (tokens.length === 0) {\n    return [[], isPureCSS, hasPseudoClasses, false];\n  }\n  let compoundSelector = [];\n  let complexSelector = [compoundSelector];\n  const selectors = [complexSelector];\n  const storage = [];\n  for (const token of tokens) {\n    switch (token.type) {\n      case 'combinator':\n        switch (token.content) {\n          case \">>>\" /* PCombinator.Descendent */:\n            isPureCSS = false;\n            if (storage.length) {\n              compoundSelector.push(stringify(storage));\n              storage.splice(0);\n            }\n            compoundSelector = [];\n            complexSelector.push(\">>>\" /* PCombinator.Descendent */);\n            complexSelector.push(compoundSelector);\n            continue;\n          case \">>>>\" /* PCombinator.Child */:\n            isPureCSS = false;\n            if (storage.length) {\n              compoundSelector.push(stringify(storage));\n              storage.splice(0);\n            }\n            compoundSelector = [];\n            complexSelector.push(\">>>>\" /* PCombinator.Child */);\n            complexSelector.push(compoundSelector);\n            continue;\n        }\n        break;\n      case 'pseudo-element':\n        if (!token.name.startsWith('-p-')) {\n          break;\n        }\n        isPureCSS = false;\n        if (storage.length) {\n          compoundSelector.push(stringify(storage));\n          storage.splice(0);\n        }\n        const name = token.name.slice(3);\n        if (name === 'aria') {\n          hasAria = true;\n        }\n        compoundSelector.push({\n          name,\n          value: unquote(token.argument ?? '')\n        });\n        continue;\n      case 'pseudo-class':\n        hasPseudoClasses = true;\n        break;\n      case 'comma':\n        if (storage.length) {\n          compoundSelector.push(stringify(storage));\n          storage.splice(0);\n        }\n        compoundSelector = [];\n        complexSelector = [compoundSelector];\n        selectors.push(complexSelector);\n        continue;\n    }\n    storage.push(token);\n  }\n  if (storage.length) {\n    compoundSelector.push(stringify(storage));\n  }\n  return [selectors, isPureCSS, hasPseudoClasses, hasAria];\n}","map":{"version":3,"names":["tokenize","TOKENS","stringify","ESCAPE_REGEXP","unquote","text","length","endsWith","slice","replace","match","parsePSelectors","selector","isPureCSS","hasAria","hasPseudoClasses","tokens","compoundSelector","complexSelector","selectors","storage","token","type","content","push","splice","name","startsWith","value","argument"],"sources":["C:\\Users\\raffy\\Desktop\\test\\node_modules\\puppeteer-core\\src\\common\\PSelectorParser.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  type Token,\n  tokenize,\n  TOKENS,\n  stringify,\n} from '../../third_party/parsel-js/parsel-js.js';\nimport type {\n  ComplexPSelector,\n  ComplexPSelectorList,\n  CompoundPSelector,\n} from '../injected/PQuerySelector.js';\nimport {PCombinator} from '../injected/PQuerySelector.js';\n\nTOKENS['nesting'] = /&/g;\nTOKENS['combinator'] = /\\s*(>>>>?|[\\s>+~])\\s*/g;\n\nconst ESCAPE_REGEXP = /\\\\[\\s\\S]/g;\nconst unquote = (text: string): string => {\n  if (text.length <= 1) {\n    return text;\n  }\n  if ((text[0] === '\"' || text[0] === \"'\") && text.endsWith(text[0])) {\n    text = text.slice(1, -1);\n  }\n  return text.replace(ESCAPE_REGEXP, match => {\n    return match[1] as string;\n  });\n};\n\n/**\n * @internal\n */\nexport function parsePSelectors(\n  selector: string\n): [\n  selector: ComplexPSelectorList,\n  isPureCSS: boolean,\n  hasPseudoClasses: boolean,\n  hasAria: boolean,\n] {\n  let isPureCSS = true;\n  let hasAria = false;\n  let hasPseudoClasses = false;\n  const tokens = tokenize(selector);\n  if (tokens.length === 0) {\n    return [[], isPureCSS, hasPseudoClasses, false];\n  }\n  let compoundSelector: CompoundPSelector = [];\n  let complexSelector: ComplexPSelector = [compoundSelector];\n  const selectors: ComplexPSelectorList = [complexSelector];\n  const storage: Token[] = [];\n  for (const token of tokens) {\n    switch (token.type) {\n      case 'combinator':\n        switch (token.content) {\n          case PCombinator.Descendent:\n            isPureCSS = false;\n            if (storage.length) {\n              compoundSelector.push(stringify(storage));\n              storage.splice(0);\n            }\n            compoundSelector = [];\n            complexSelector.push(PCombinator.Descendent);\n            complexSelector.push(compoundSelector);\n            continue;\n          case PCombinator.Child:\n            isPureCSS = false;\n            if (storage.length) {\n              compoundSelector.push(stringify(storage));\n              storage.splice(0);\n            }\n            compoundSelector = [];\n            complexSelector.push(PCombinator.Child);\n            complexSelector.push(compoundSelector);\n            continue;\n        }\n        break;\n      case 'pseudo-element':\n        if (!token.name.startsWith('-p-')) {\n          break;\n        }\n        isPureCSS = false;\n        if (storage.length) {\n          compoundSelector.push(stringify(storage));\n          storage.splice(0);\n        }\n        const name = token.name.slice(3);\n        if (name === 'aria') {\n          hasAria = true;\n        }\n        compoundSelector.push({\n          name,\n          value: unquote(token.argument ?? ''),\n        });\n        continue;\n      case 'pseudo-class':\n        hasPseudoClasses = true;\n        break;\n      case 'comma':\n        if (storage.length) {\n          compoundSelector.push(stringify(storage));\n          storage.splice(0);\n        }\n        compoundSelector = [];\n        complexSelector = [compoundSelector];\n        selectors.push(complexSelector);\n        continue;\n    }\n    storage.push(token);\n  }\n  if (storage.length) {\n    compoundSelector.push(stringify(storage));\n  }\n  return [selectors, isPureCSS, hasPseudoClasses, hasAria];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}