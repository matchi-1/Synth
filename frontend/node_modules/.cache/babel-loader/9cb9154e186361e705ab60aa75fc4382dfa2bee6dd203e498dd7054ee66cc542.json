{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMProperty\n * @typechecks static-only\n */\n\n/*jslint bitwise: true */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\nvar DOMPropertyInjection = {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_ATTRIBUTE: 0x1,\n  MUST_USE_PROPERTY: 0x2,\n  HAS_SIDE_EFFECTS: 0x4,\n  HAS_BOOLEAN_VALUE: 0x8,\n  HAS_NUMERIC_VALUE: 0x10,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * isCustomAttribute: function that given an attribute name will return true\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\n   * attributes where it's impossible to enumerate all of the possible\n   * attribute names,\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\n   * it won't get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function (domPropertyConfig) {\n    var Properties = domPropertyConfig.Properties || {};\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\n    if (domPropertyConfig.isCustomAttribute) {\n      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);\n    }\n    for (var propName in Properties) {\n      \"production\" !== process.env.NODE_ENV ? invariant(!DOMProperty.isStandardName.hasOwnProperty(propName), 'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property ' + '\\'%s\\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName));\n      DOMProperty.isStandardName[propName] = true;\n      var lowerCased = propName.toLowerCase();\n      DOMProperty.getPossibleStandardName[lowerCased] = propName;\n      if (DOMAttributeNames.hasOwnProperty(propName)) {\n        var attributeName = DOMAttributeNames[propName];\n        DOMProperty.getPossibleStandardName[attributeName] = propName;\n        DOMProperty.getAttributeName[propName] = attributeName;\n      } else {\n        DOMProperty.getAttributeName[propName] = lowerCased;\n      }\n      DOMProperty.getPropertyName[propName] = DOMPropertyNames.hasOwnProperty(propName) ? DOMPropertyNames[propName] : propName;\n      if (DOMMutationMethods.hasOwnProperty(propName)) {\n        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];\n      } else {\n        DOMProperty.getMutationMethod[propName] = null;\n      }\n      var propConfig = Properties[propName];\n      DOMProperty.mustUseAttribute[propName] = checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);\n      DOMProperty.mustUseProperty[propName] = checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);\n      DOMProperty.hasSideEffects[propName] = checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);\n      DOMProperty.hasBooleanValue[propName] = checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);\n      DOMProperty.hasNumericValue[propName] = checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);\n      DOMProperty.hasPositiveNumericValue[propName] = checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);\n      DOMProperty.hasOverloadedBooleanValue[propName] = checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);\n      \"production\" !== process.env.NODE_ENV ? invariant(!DOMProperty.mustUseAttribute[propName] || !DOMProperty.mustUseProperty[propName], 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(!DOMProperty.mustUseAttribute[propName] || !DOMProperty.mustUseProperty[propName]);\n      \"production\" !== process.env.NODE_ENV ? invariant(DOMProperty.mustUseProperty[propName] || !DOMProperty.hasSideEffects[propName], 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(DOMProperty.mustUseProperty[propName] || !DOMProperty.hasSideEffects[propName]);\n      \"production\" !== process.env.NODE_ENV ? invariant(!!DOMProperty.hasBooleanValue[propName] + !!DOMProperty.hasNumericValue[propName] + !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(!!DOMProperty.hasBooleanValue[propName] + !!DOMProperty.hasNumericValue[propName] + !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1);\n    }\n  }\n};\nvar defaultValueCache = {};\n\n/**\n * DOMProperty exports lookup objects that can be used like functions:\n *\n *   > DOMProperty.isValid['id']\n *   true\n *   > DOMProperty.isValid['foobar']\n *   undefined\n *\n * Although this may be confusing, it performs better in general.\n *\n * @see http://jsperf.com/key-exists\n * @see http://jsperf.com/key-missing\n */\nvar DOMProperty = {\n  ID_ATTRIBUTE_NAME: 'data-reactid',\n  /**\n   * Checks whether a property name is a standard property.\n   * @type {Object}\n   */\n  isStandardName: {},\n  /**\n   * Mapping from lowercase property names to the properly cased version, used\n   * to warn in the case of missing properties.\n   * @type {Object}\n   */\n  getPossibleStandardName: {},\n  /**\n   * Mapping from normalized names to attribute names that differ. Attribute\n   * names are used when rendering markup or with `*Attribute()`.\n   * @type {Object}\n   */\n  getAttributeName: {},\n  /**\n   * Mapping from normalized names to properties on DOM node instances.\n   * (This includes properties that mutate due to external factors.)\n   * @type {Object}\n   */\n  getPropertyName: {},\n  /**\n   * Mapping from normalized names to mutation methods. This will only exist if\n   * mutation cannot be set simply by the property or `setAttribute()`.\n   * @type {Object}\n   */\n  getMutationMethod: {},\n  /**\n   * Whether the property must be accessed and mutated as an object property.\n   * @type {Object}\n   */\n  mustUseAttribute: {},\n  /**\n   * Whether the property must be accessed and mutated using `*Attribute()`.\n   * (This includes anything that fails `<propName> in <element>`.)\n   * @type {Object}\n   */\n  mustUseProperty: {},\n  /**\n   * Whether or not setting a value causes side effects such as triggering\n   * resources to be loaded or text selection changes. We must ensure that\n   * the value is only set if it has changed.\n   * @type {Object}\n   */\n  hasSideEffects: {},\n  /**\n   * Whether the property should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasBooleanValue: {},\n  /**\n   * Whether the property must be numeric or parse as a\n   * numeric and should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasNumericValue: {},\n  /**\n   * Whether the property must be positive numeric or parse as a positive\n   * numeric and should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasPositiveNumericValue: {},\n  /**\n   * Whether the property can be used as a flag as well as with a value. Removed\n   * when strictly equal to false; present without a value when strictly equal\n   * to true; present with a value otherwise.\n   * @type {Object}\n   */\n  hasOverloadedBooleanValue: {},\n  /**\n   * All of the isCustomAttribute() functions that have been injected.\n   */\n  _isCustomAttributeFunctions: [],\n  /**\n   * Checks whether a property name is a custom attribute.\n   * @method\n   */\n  isCustomAttribute: function (attributeName) {\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];\n      if (isCustomAttributeFn(attributeName)) {\n        return true;\n      }\n    }\n    return false;\n  },\n  /**\n   * Returns the default property value for a DOM property (i.e., not an\n   * attribute). Most default values are '' or false, but not all. Worse yet,\n   * some (in particular, `type`) vary depending on the type of element.\n   *\n   * TODO: Is it better to grab all the possible properties when creating an\n   * element to avoid having to create the same element twice?\n   */\n  getDefaultValueForProperty: function (nodeName, prop) {\n    var nodeDefaults = defaultValueCache[nodeName];\n    var testElement;\n    if (!nodeDefaults) {\n      defaultValueCache[nodeName] = nodeDefaults = {};\n    }\n    if (!(prop in nodeDefaults)) {\n      testElement = document.createElement(nodeName);\n      nodeDefaults[prop] = testElement[prop];\n    }\n    return nodeDefaults[prop];\n  },\n  injection: DOMPropertyInjection\n};\nmodule.exports = DOMProperty;","map":{"version":3,"names":["invariant","require","checkMask","value","bitmask","DOMPropertyInjection","MUST_USE_ATTRIBUTE","MUST_USE_PROPERTY","HAS_SIDE_EFFECTS","HAS_BOOLEAN_VALUE","HAS_NUMERIC_VALUE","HAS_POSITIVE_NUMERIC_VALUE","HAS_OVERLOADED_BOOLEAN_VALUE","injectDOMPropertyConfig","domPropertyConfig","Properties","DOMAttributeNames","DOMPropertyNames","DOMMutationMethods","isCustomAttribute","DOMProperty","_isCustomAttributeFunctions","push","propName","process","env","NODE_ENV","isStandardName","hasOwnProperty","lowerCased","toLowerCase","getPossibleStandardName","attributeName","getAttributeName","getPropertyName","getMutationMethod","propConfig","mustUseAttribute","mustUseProperty","hasSideEffects","hasBooleanValue","hasNumericValue","hasPositiveNumericValue","hasOverloadedBooleanValue","defaultValueCache","ID_ATTRIBUTE_NAME","i","length","isCustomAttributeFn","getDefaultValueForProperty","nodeName","prop","nodeDefaults","testElement","document","createElement","injection","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/DOMProperty.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMProperty\n * @typechecks static-only\n */\n\n/*jslint bitwise: true */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\nvar DOMPropertyInjection = {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_ATTRIBUTE: 0x1,\n  MUST_USE_PROPERTY: 0x2,\n  HAS_SIDE_EFFECTS: 0x4,\n  HAS_BOOLEAN_VALUE: 0x8,\n  HAS_NUMERIC_VALUE: 0x10,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,\n\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * isCustomAttribute: function that given an attribute name will return true\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\n   * attributes where it's impossible to enumerate all of the possible\n   * attribute names,\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\n   * it won't get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function(domPropertyConfig) {\n    var Properties = domPropertyConfig.Properties || {};\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\n\n    if (domPropertyConfig.isCustomAttribute) {\n      DOMProperty._isCustomAttributeFunctions.push(\n        domPropertyConfig.isCustomAttribute\n      );\n    }\n\n    for (var propName in Properties) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !DOMProperty.isStandardName.hasOwnProperty(propName),\n        'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property ' +\n        '\\'%s\\' which has already been injected. You may be accidentally ' +\n        'injecting the same DOM property config twice, or you may be ' +\n        'injecting two configs that have conflicting property names.',\n        propName\n      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));\n\n      DOMProperty.isStandardName[propName] = true;\n\n      var lowerCased = propName.toLowerCase();\n      DOMProperty.getPossibleStandardName[lowerCased] = propName;\n\n      if (DOMAttributeNames.hasOwnProperty(propName)) {\n        var attributeName = DOMAttributeNames[propName];\n        DOMProperty.getPossibleStandardName[attributeName] = propName;\n        DOMProperty.getAttributeName[propName] = attributeName;\n      } else {\n        DOMProperty.getAttributeName[propName] = lowerCased;\n      }\n\n      DOMProperty.getPropertyName[propName] =\n        DOMPropertyNames.hasOwnProperty(propName) ?\n          DOMPropertyNames[propName] :\n          propName;\n\n      if (DOMMutationMethods.hasOwnProperty(propName)) {\n        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];\n      } else {\n        DOMProperty.getMutationMethod[propName] = null;\n      }\n\n      var propConfig = Properties[propName];\n      DOMProperty.mustUseAttribute[propName] =\n        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);\n      DOMProperty.mustUseProperty[propName] =\n        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);\n      DOMProperty.hasSideEffects[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);\n      DOMProperty.hasBooleanValue[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);\n      DOMProperty.hasNumericValue[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);\n      DOMProperty.hasPositiveNumericValue[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);\n      DOMProperty.hasOverloadedBooleanValue[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);\n\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !DOMProperty.mustUseAttribute[propName] ||\n          !DOMProperty.mustUseProperty[propName],\n        'DOMProperty: Cannot require using both attribute and property: %s',\n        propName\n      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||\n        !DOMProperty.mustUseProperty[propName]));\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        DOMProperty.mustUseProperty[propName] ||\n          !DOMProperty.hasSideEffects[propName],\n        'DOMProperty: Properties that have side effects must use property: %s',\n        propName\n      ) : invariant(DOMProperty.mustUseProperty[propName] ||\n        !DOMProperty.hasSideEffects[propName]));\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !!DOMProperty.hasBooleanValue[propName] +\n          !!DOMProperty.hasNumericValue[propName] +\n          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,\n        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +\n        'numeric value, but not a combination: %s',\n        propName\n      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +\n        !!DOMProperty.hasNumericValue[propName] +\n        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));\n    }\n  }\n};\nvar defaultValueCache = {};\n\n/**\n * DOMProperty exports lookup objects that can be used like functions:\n *\n *   > DOMProperty.isValid['id']\n *   true\n *   > DOMProperty.isValid['foobar']\n *   undefined\n *\n * Although this may be confusing, it performs better in general.\n *\n * @see http://jsperf.com/key-exists\n * @see http://jsperf.com/key-missing\n */\nvar DOMProperty = {\n\n  ID_ATTRIBUTE_NAME: 'data-reactid',\n\n  /**\n   * Checks whether a property name is a standard property.\n   * @type {Object}\n   */\n  isStandardName: {},\n\n  /**\n   * Mapping from lowercase property names to the properly cased version, used\n   * to warn in the case of missing properties.\n   * @type {Object}\n   */\n  getPossibleStandardName: {},\n\n  /**\n   * Mapping from normalized names to attribute names that differ. Attribute\n   * names are used when rendering markup or with `*Attribute()`.\n   * @type {Object}\n   */\n  getAttributeName: {},\n\n  /**\n   * Mapping from normalized names to properties on DOM node instances.\n   * (This includes properties that mutate due to external factors.)\n   * @type {Object}\n   */\n  getPropertyName: {},\n\n  /**\n   * Mapping from normalized names to mutation methods. This will only exist if\n   * mutation cannot be set simply by the property or `setAttribute()`.\n   * @type {Object}\n   */\n  getMutationMethod: {},\n\n  /**\n   * Whether the property must be accessed and mutated as an object property.\n   * @type {Object}\n   */\n  mustUseAttribute: {},\n\n  /**\n   * Whether the property must be accessed and mutated using `*Attribute()`.\n   * (This includes anything that fails `<propName> in <element>`.)\n   * @type {Object}\n   */\n  mustUseProperty: {},\n\n  /**\n   * Whether or not setting a value causes side effects such as triggering\n   * resources to be loaded or text selection changes. We must ensure that\n   * the value is only set if it has changed.\n   * @type {Object}\n   */\n  hasSideEffects: {},\n\n  /**\n   * Whether the property should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasBooleanValue: {},\n\n  /**\n   * Whether the property must be numeric or parse as a\n   * numeric and should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasNumericValue: {},\n\n  /**\n   * Whether the property must be positive numeric or parse as a positive\n   * numeric and should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasPositiveNumericValue: {},\n\n  /**\n   * Whether the property can be used as a flag as well as with a value. Removed\n   * when strictly equal to false; present without a value when strictly equal\n   * to true; present with a value otherwise.\n   * @type {Object}\n   */\n  hasOverloadedBooleanValue: {},\n\n  /**\n   * All of the isCustomAttribute() functions that have been injected.\n   */\n  _isCustomAttributeFunctions: [],\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   * @method\n   */\n  isCustomAttribute: function(attributeName) {\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];\n      if (isCustomAttributeFn(attributeName)) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  /**\n   * Returns the default property value for a DOM property (i.e., not an\n   * attribute). Most default values are '' or false, but not all. Worse yet,\n   * some (in particular, `type`) vary depending on the type of element.\n   *\n   * TODO: Is it better to grab all the possible properties when creating an\n   * element to avoid having to create the same element twice?\n   */\n  getDefaultValueForProperty: function(nodeName, prop) {\n    var nodeDefaults = defaultValueCache[nodeName];\n    var testElement;\n    if (!nodeDefaults) {\n      defaultValueCache[nodeName] = nodeDefaults = {};\n    }\n    if (!(prop in nodeDefaults)) {\n      testElement = document.createElement(nodeName);\n      nodeDefaults[prop] = testElement[prop];\n    }\n    return nodeDefaults[prop];\n  },\n\n  injection: DOMPropertyInjection\n};\n\nmodule.exports = DOMProperty;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;AAEtC,SAASC,SAASA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACjC,OAAO,CAACD,KAAK,GAAGC,OAAO,MAAMA,OAAO;AACtC;AAEA,IAAIC,oBAAoB,GAAG;EACzB;AACF;AACA;AACA;EACEC,kBAAkB,EAAE,GAAG;EACvBC,iBAAiB,EAAE,GAAG;EACtBC,gBAAgB,EAAE,GAAG;EACrBC,iBAAiB,EAAE,GAAG;EACtBC,iBAAiB,EAAE,IAAI;EACvBC,0BAA0B,EAAE,IAAI,GAAG,IAAI;EACvCC,4BAA4B,EAAE,IAAI;EAElC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,uBAAuB,EAAE,SAAAA,CAASC,iBAAiB,EAAE;IACnD,IAAIC,UAAU,GAAGD,iBAAiB,CAACC,UAAU,IAAI,CAAC,CAAC;IACnD,IAAIC,iBAAiB,GAAGF,iBAAiB,CAACE,iBAAiB,IAAI,CAAC,CAAC;IACjE,IAAIC,gBAAgB,GAAGH,iBAAiB,CAACG,gBAAgB,IAAI,CAAC,CAAC;IAC/D,IAAIC,kBAAkB,GAAGJ,iBAAiB,CAACI,kBAAkB,IAAI,CAAC,CAAC;IAEnE,IAAIJ,iBAAiB,CAACK,iBAAiB,EAAE;MACvCC,WAAW,CAACC,2BAA2B,CAACC,IAAI,CAC1CR,iBAAiB,CAACK,iBACpB,CAAC;IACH;IAEA,KAAK,IAAII,QAAQ,IAAIR,UAAU,EAAE;MAC9B,YAAY,KAAKS,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAG1B,SAAS,CAChD,CAACoB,WAAW,CAACO,cAAc,CAACC,cAAc,CAACL,QAAQ,CAAC,EACpD,sEAAsE,GACtE,kEAAkE,GAClE,8DAA8D,GAC9D,6DAA6D,EAC7DA,QACF,CAAC,GAAGvB,SAAS,CAAC,CAACoB,WAAW,CAACO,cAAc,CAACC,cAAc,CAACL,QAAQ,CAAC,CAAC;MAEnEH,WAAW,CAACO,cAAc,CAACJ,QAAQ,CAAC,GAAG,IAAI;MAE3C,IAAIM,UAAU,GAAGN,QAAQ,CAACO,WAAW,CAAC,CAAC;MACvCV,WAAW,CAACW,uBAAuB,CAACF,UAAU,CAAC,GAAGN,QAAQ;MAE1D,IAAIP,iBAAiB,CAACY,cAAc,CAACL,QAAQ,CAAC,EAAE;QAC9C,IAAIS,aAAa,GAAGhB,iBAAiB,CAACO,QAAQ,CAAC;QAC/CH,WAAW,CAACW,uBAAuB,CAACC,aAAa,CAAC,GAAGT,QAAQ;QAC7DH,WAAW,CAACa,gBAAgB,CAACV,QAAQ,CAAC,GAAGS,aAAa;MACxD,CAAC,MAAM;QACLZ,WAAW,CAACa,gBAAgB,CAACV,QAAQ,CAAC,GAAGM,UAAU;MACrD;MAEAT,WAAW,CAACc,eAAe,CAACX,QAAQ,CAAC,GACnCN,gBAAgB,CAACW,cAAc,CAACL,QAAQ,CAAC,GACvCN,gBAAgB,CAACM,QAAQ,CAAC,GAC1BA,QAAQ;MAEZ,IAAIL,kBAAkB,CAACU,cAAc,CAACL,QAAQ,CAAC,EAAE;QAC/CH,WAAW,CAACe,iBAAiB,CAACZ,QAAQ,CAAC,GAAGL,kBAAkB,CAACK,QAAQ,CAAC;MACxE,CAAC,MAAM;QACLH,WAAW,CAACe,iBAAiB,CAACZ,QAAQ,CAAC,GAAG,IAAI;MAChD;MAEA,IAAIa,UAAU,GAAGrB,UAAU,CAACQ,QAAQ,CAAC;MACrCH,WAAW,CAACiB,gBAAgB,CAACd,QAAQ,CAAC,GACpCrB,SAAS,CAACkC,UAAU,EAAE/B,oBAAoB,CAACC,kBAAkB,CAAC;MAChEc,WAAW,CAACkB,eAAe,CAACf,QAAQ,CAAC,GACnCrB,SAAS,CAACkC,UAAU,EAAE/B,oBAAoB,CAACE,iBAAiB,CAAC;MAC/Da,WAAW,CAACmB,cAAc,CAAChB,QAAQ,CAAC,GAClCrB,SAAS,CAACkC,UAAU,EAAE/B,oBAAoB,CAACG,gBAAgB,CAAC;MAC9DY,WAAW,CAACoB,eAAe,CAACjB,QAAQ,CAAC,GACnCrB,SAAS,CAACkC,UAAU,EAAE/B,oBAAoB,CAACI,iBAAiB,CAAC;MAC/DW,WAAW,CAACqB,eAAe,CAAClB,QAAQ,CAAC,GACnCrB,SAAS,CAACkC,UAAU,EAAE/B,oBAAoB,CAACK,iBAAiB,CAAC;MAC/DU,WAAW,CAACsB,uBAAuB,CAACnB,QAAQ,CAAC,GAC3CrB,SAAS,CAACkC,UAAU,EAAE/B,oBAAoB,CAACM,0BAA0B,CAAC;MACxES,WAAW,CAACuB,yBAAyB,CAACpB,QAAQ,CAAC,GAC7CrB,SAAS,CAACkC,UAAU,EAAE/B,oBAAoB,CAACO,4BAA4B,CAAC;MAEzE,YAAY,KAAKY,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAG1B,SAAS,CAChD,CAACoB,WAAW,CAACiB,gBAAgB,CAACd,QAAQ,CAAC,IACrC,CAACH,WAAW,CAACkB,eAAe,CAACf,QAAQ,CAAC,EACxC,mEAAmE,EACnEA,QACF,CAAC,GAAGvB,SAAS,CAAC,CAACoB,WAAW,CAACiB,gBAAgB,CAACd,QAAQ,CAAC,IACnD,CAACH,WAAW,CAACkB,eAAe,CAACf,QAAQ,CAAC,CAAC;MACxC,YAAY,KAAKC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAG1B,SAAS,CAChDoB,WAAW,CAACkB,eAAe,CAACf,QAAQ,CAAC,IACnC,CAACH,WAAW,CAACmB,cAAc,CAAChB,QAAQ,CAAC,EACvC,sEAAsE,EACtEA,QACF,CAAC,GAAGvB,SAAS,CAACoB,WAAW,CAACkB,eAAe,CAACf,QAAQ,CAAC,IACjD,CAACH,WAAW,CAACmB,cAAc,CAAChB,QAAQ,CAAC,CAAC;MACvC,YAAY,KAAKC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAG1B,SAAS,CAChD,CAAC,CAACoB,WAAW,CAACoB,eAAe,CAACjB,QAAQ,CAAC,GACrC,CAAC,CAACH,WAAW,CAACqB,eAAe,CAAClB,QAAQ,CAAC,GACvC,CAAC,CAACH,WAAW,CAACuB,yBAAyB,CAACpB,QAAQ,CAAC,IAAI,CAAC,EACxD,mEAAmE,GACnE,0CAA0C,EAC1CA,QACF,CAAC,GAAGvB,SAAS,CAAC,CAAC,CAACoB,WAAW,CAACoB,eAAe,CAACjB,QAAQ,CAAC,GACnD,CAAC,CAACH,WAAW,CAACqB,eAAe,CAAClB,QAAQ,CAAC,GACvC,CAAC,CAACH,WAAW,CAACuB,yBAAyB,CAACpB,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC3D;EACF;AACF,CAAC;AACD,IAAIqB,iBAAiB,GAAG,CAAC,CAAC;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIxB,WAAW,GAAG;EAEhByB,iBAAiB,EAAE,cAAc;EAEjC;AACF;AACA;AACA;EACElB,cAAc,EAAE,CAAC,CAAC;EAElB;AACF;AACA;AACA;AACA;EACEI,uBAAuB,EAAE,CAAC,CAAC;EAE3B;AACF;AACA;AACA;AACA;EACEE,gBAAgB,EAAE,CAAC,CAAC;EAEpB;AACF;AACA;AACA;AACA;EACEC,eAAe,EAAE,CAAC,CAAC;EAEnB;AACF;AACA;AACA;AACA;EACEC,iBAAiB,EAAE,CAAC,CAAC;EAErB;AACF;AACA;AACA;EACEE,gBAAgB,EAAE,CAAC,CAAC;EAEpB;AACF;AACA;AACA;AACA;EACEC,eAAe,EAAE,CAAC,CAAC;EAEnB;AACF;AACA;AACA;AACA;AACA;EACEC,cAAc,EAAE,CAAC,CAAC;EAElB;AACF;AACA;AACA;EACEC,eAAe,EAAE,CAAC,CAAC;EAEnB;AACF;AACA;AACA;AACA;EACEC,eAAe,EAAE,CAAC,CAAC;EAEnB;AACF;AACA;AACA;AACA;EACEC,uBAAuB,EAAE,CAAC,CAAC;EAE3B;AACF;AACA;AACA;AACA;AACA;EACEC,yBAAyB,EAAE,CAAC,CAAC;EAE7B;AACF;AACA;EACEtB,2BAA2B,EAAE,EAAE;EAE/B;AACF;AACA;AACA;EACEF,iBAAiB,EAAE,SAAAA,CAASa,aAAa,EAAE;IACzC,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG1B,WAAW,CAACC,2BAA2B,CAAC0B,MAAM,EAAED,CAAC,EAAE,EAAE;MACvE,IAAIE,mBAAmB,GAAG5B,WAAW,CAACC,2BAA2B,CAACyB,CAAC,CAAC;MACpE,IAAIE,mBAAmB,CAAChB,aAAa,CAAC,EAAE;QACtC,OAAO,IAAI;MACb;IACF;IACA,OAAO,KAAK;EACd,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEiB,0BAA0B,EAAE,SAAAA,CAASC,QAAQ,EAAEC,IAAI,EAAE;IACnD,IAAIC,YAAY,GAAGR,iBAAiB,CAACM,QAAQ,CAAC;IAC9C,IAAIG,WAAW;IACf,IAAI,CAACD,YAAY,EAAE;MACjBR,iBAAiB,CAACM,QAAQ,CAAC,GAAGE,YAAY,GAAG,CAAC,CAAC;IACjD;IACA,IAAI,EAAED,IAAI,IAAIC,YAAY,CAAC,EAAE;MAC3BC,WAAW,GAAGC,QAAQ,CAACC,aAAa,CAACL,QAAQ,CAAC;MAC9CE,YAAY,CAACD,IAAI,CAAC,GAAGE,WAAW,CAACF,IAAI,CAAC;IACxC;IACA,OAAOC,YAAY,CAACD,IAAI,CAAC;EAC3B,CAAC;EAEDK,SAAS,EAAEnD;AACb,CAAC;AAEDoD,MAAM,CAACC,OAAO,GAAGtC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}