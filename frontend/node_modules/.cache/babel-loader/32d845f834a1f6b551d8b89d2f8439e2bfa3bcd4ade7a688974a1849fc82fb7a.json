{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * @public\n */\nexport var TargetType;\n(function (TargetType) {\n  TargetType[\"PAGE\"] = \"page\";\n  TargetType[\"BACKGROUND_PAGE\"] = \"background_page\";\n  TargetType[\"SERVICE_WORKER\"] = \"service_worker\";\n  TargetType[\"SHARED_WORKER\"] = \"shared_worker\";\n  TargetType[\"BROWSER\"] = \"browser\";\n  TargetType[\"WEBVIEW\"] = \"webview\";\n  TargetType[\"OTHER\"] = \"other\";\n  /**\n   * @internal\n   */\n  TargetType[\"TAB\"] = \"tab\";\n})(TargetType || (TargetType = {}));\n/**\n * Target represents a\n * {@link https://chromedevtools.github.io/devtools-protocol/tot/Target/ | CDP target}.\n * In CDP a target is something that can be debugged such a frame, a page or a\n * worker.\n * @public\n */\nexport class Target {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * If the target is not of type `\"service_worker\"` or `\"shared_worker\"`, returns `null`.\n   */\n  async worker() {\n    return null;\n  }\n  /**\n   * If the target is not of type `\"page\"`, `\"webview\"` or `\"background_page\"`,\n   * returns `null`.\n   */\n  async page() {\n    return null;\n  }\n}","map":{"version":3,"names":["TargetType","Target","constructor","worker","page"],"sources":["C:\\Users\\raffy\\Desktop\\test\\node_modules\\puppeteer-core\\src\\api\\Target.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {Browser} from './Browser.js';\nimport type {BrowserContext} from './BrowserContext.js';\nimport type {CDPSession} from './CDPSession.js';\nimport type {Page} from './Page.js';\nimport type {WebWorker} from './WebWorker.js';\n\n/**\n * @public\n */\nexport enum TargetType {\n  PAGE = 'page',\n  BACKGROUND_PAGE = 'background_page',\n  SERVICE_WORKER = 'service_worker',\n  SHARED_WORKER = 'shared_worker',\n  BROWSER = 'browser',\n  WEBVIEW = 'webview',\n  OTHER = 'other',\n  /**\n   * @internal\n   */\n  TAB = 'tab',\n}\n\n/**\n * Target represents a\n * {@link https://chromedevtools.github.io/devtools-protocol/tot/Target/ | CDP target}.\n * In CDP a target is something that can be debugged such a frame, a page or a\n * worker.\n * @public\n */\nexport abstract class Target {\n  /**\n   * @internal\n   */\n  protected constructor() {}\n\n  /**\n   * If the target is not of type `\"service_worker\"` or `\"shared_worker\"`, returns `null`.\n   */\n  async worker(): Promise<WebWorker | null> {\n    return null;\n  }\n\n  /**\n   * If the target is not of type `\"page\"`, `\"webview\"` or `\"background_page\"`,\n   * returns `null`.\n   */\n  async page(): Promise<Page | null> {\n    return null;\n  }\n\n  /**\n   * Forcefully creates a page for a target of any type. It is useful if you\n   * want to handle a CDP target of type `other` as a page. If you deal with a\n   * regular page target, use {@link Target.page}.\n   */\n  abstract asPage(): Promise<Page>;\n\n  abstract url(): string;\n\n  /**\n   * Creates a Chrome Devtools Protocol session attached to the target.\n   */\n  abstract createCDPSession(): Promise<CDPSession>;\n\n  /**\n   * Identifies what kind of target this is.\n   *\n   * @remarks\n   *\n   * See {@link https://developer.chrome.com/extensions/background_pages | docs} for more info about background pages.\n   */\n  abstract type(): TargetType;\n\n  /**\n   * Get the browser the target belongs to.\n   */\n  abstract browser(): Browser;\n\n  /**\n   * Get the browser context the target belongs to.\n   */\n  abstract browserContext(): BrowserContext;\n\n  /**\n   * Get the target that opened this target. Top-level targets return `null`.\n   */\n  abstract opener(): Target | undefined;\n}\n"],"mappings":"AAAA;;;;;AAYA;;;AAGA,WAAYA,UAYX;AAZD,WAAYA,UAAU;EACpBA,UAAA,iBAAa;EACbA,UAAA,uCAAmC;EACnCA,UAAA,qCAAiC;EACjCA,UAAA,mCAA+B;EAC/BA,UAAA,uBAAmB;EACnBA,UAAA,uBAAmB;EACnBA,UAAA,mBAAe;EACf;;;EAGAA,UAAA,eAAW;AACb,CAAC,EAZWA,UAAU,KAAVA,UAAU;AActB;;;;;;;AAOA,OAAM,MAAgBC,MAAM;EAC1B;;;EAGAC,YAAA,GAAyB;EAEzB;;;EAGA,MAAMC,MAAMA,CAAA;IACV,OAAO,IAAI;EACb;EAEA;;;;EAIA,MAAMC,IAAIA,CAAA;IACR,OAAO,IAAI;EACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}