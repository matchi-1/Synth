{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCompositeComponent\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require(\"./ReactComponentEnvironment\");\nvar ReactContext = require(\"./ReactContext\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactElementValidator = require(\"./ReactElementValidator\");\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\nvar ReactLifeCycle = require(\"./ReactLifeCycle\");\nvar ReactNativeComponent = require(\"./ReactNativeComponent\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\nvar ReactReconciler = require(\"./ReactReconciler\");\nvar ReactUpdates = require(\"./ReactUpdates\");\nvar assign = require(\"./Object.assign\");\nvar emptyObject = require(\"./emptyObject\");\nvar invariant = require(\"./invariant\");\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\nvar warning = require(\"./warning\");\nfunction getDeclarationErrorAddendum(component) {\n  var owner = component._currentElement._owner || null;\n  if (owner) {\n    var name = owner.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\n/**\n * ------------------ The Life-Cycle of a Composite Component ------------------\n *\n * - constructor: Initialization of state. The instance is now retained.\n *   - componentWillMount\n *   - render\n *   - [children's constructors]\n *     - [children's componentWillMount and render]\n *     - [children's componentDidMount]\n *     - componentDidMount\n *\n *       Update Phases:\n *       - componentWillReceiveProps (only called if parent updated)\n *       - shouldComponentUpdate\n *         - componentWillUpdate\n *           - render\n *           - [children's constructors or receive props phases]\n *         - componentDidUpdate\n *\n *     - componentWillUnmount\n *     - [children's componentWillUnmount]\n *   - [children destroyed]\n * - (destroyed): The instance is now blank, released by React and ready for GC.\n *\n * -----------------------------------------------------------------------------\n */\n\n/**\n * An incrementing ID assigned to each component when it is mounted. This is\n * used to enforce the order in which `ReactUpdates` updates dirty components.\n *\n * @private\n */\nvar nextMountID = 1;\n\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\nvar ReactCompositeComponentMixin = {\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {ReactElement} element\n   * @final\n   * @internal\n   */\n  construct: function (element) {\n    this._currentElement = element;\n    this._rootNodeID = null;\n    this._instance = null;\n\n    // See ReactUpdateQueue\n    this._pendingElement = null;\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n    this._renderedComponent = null;\n    this._context = null;\n    this._mountOrder = 0;\n    this._isTopLevel = false;\n\n    // See ReactUpdates and ReactUpdateQueue.\n    this._pendingCallbacks = null;\n  },\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function (rootID, transaction, context) {\n    this._context = context;\n    this._mountOrder = nextMountID++;\n    this._rootNodeID = rootID;\n    var publicProps = this._processProps(this._currentElement.props);\n    var publicContext = this._processContext(this._currentElement._context);\n    var Component = ReactNativeComponent.getComponentClassForElement(this._currentElement);\n\n    // Initialize the public class\n    var inst = new Component(publicProps, publicContext);\n    if (\"production\" !== process.env.NODE_ENV) {\n      // This will throw later in _renderValidatedComponent, but add an early\n      // warning now to help debugging\n      \"production\" !== process.env.NODE_ENV ? warning(inst.render != null, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render` in your ' + 'component or you may have accidentally tried to render an element ' + 'whose type is a function that isn\\'t a React component.', Component.displayName || Component.name || 'Component') : null;\n    }\n\n    // These should be set up in the constructor, but as a convenience for\n    // simpler class abstractions, we set them up after the fact.\n    inst.props = publicProps;\n    inst.context = publicContext;\n    inst.refs = emptyObject;\n    this._instance = inst;\n\n    // Store a reference from the instance back to the internal representation\n    ReactInstanceMap.set(inst, this);\n    if (\"production\" !== process.env.NODE_ENV) {\n      this._warnIfContextsDiffer(this._currentElement._context, context);\n    }\n    if (\"production\" !== process.env.NODE_ENV) {\n      // Since plain JS classes are defined without any special initialization\n      // logic, we can not catch common errors early. Therefore, we have to\n      // catch them here, at initialization time, instead.\n      \"production\" !== process.env.NODE_ENV ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : null;\n      \"production\" !== process.env.NODE_ENV ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : null;\n      \"production\" !== process.env.NODE_ENV ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : null;\n      \"production\" !== process.env.NODE_ENV ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : null;\n      \"production\" !== process.env.NODE_ENV ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : null;\n    }\n    var initialState = inst.state;\n    if (initialState === undefined) {\n      inst.state = initialState = null;\n    }\n    \"production\" !== process.env.NODE_ENV ? invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(typeof initialState === 'object' && !Array.isArray(initialState));\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n    var childContext;\n    var renderedElement;\n    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;\n    ReactLifeCycle.currentlyMountingInstance = this;\n    try {\n      if (inst.componentWillMount) {\n        inst.componentWillMount();\n        // When mounting, calls to `setState` by `componentWillMount` will set\n        // `this._pendingStateQueue` without triggering a re-render.\n        if (this._pendingStateQueue) {\n          inst.state = this._processPendingState(inst.props, inst.context);\n        }\n      }\n      childContext = this._getValidatedChildContext(context);\n      renderedElement = this._renderValidatedComponent(childContext);\n    } finally {\n      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;\n    }\n    this._renderedComponent = this._instantiateReactComponent(renderedElement, this._currentElement.type // The wrapping type\n    );\n    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._mergeChildContext(context, childContext));\n    if (inst.componentDidMount) {\n      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);\n    }\n    return markup;\n  },\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function () {\n    var inst = this._instance;\n    if (inst.componentWillUnmount) {\n      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;\n      ReactLifeCycle.currentlyUnmountingInstance = this;\n      try {\n        inst.componentWillUnmount();\n      } finally {\n        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;\n      }\n    }\n    ReactReconciler.unmountComponent(this._renderedComponent);\n    this._renderedComponent = null;\n\n    // Reset pending fields\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n    this._pendingCallbacks = null;\n    this._pendingElement = null;\n\n    // These fields do not really need to be reset since this object is no\n    // longer accessible.\n    this._context = null;\n    this._rootNodeID = null;\n\n    // Delete the reference from the instance to this internal representation\n    // which allow the internals to be properly cleaned up even if the user\n    // leaks a reference to the public instance.\n    ReactInstanceMap.remove(inst);\n\n    // Some existing components rely on inst.props even after they've been\n    // destroyed (in event handlers).\n    // TODO: inst.props = null;\n    // TODO: inst.state = null;\n    // TODO: inst.context = null;\n  },\n  /**\n   * Schedule a partial update to the props. Only used for internal testing.\n   *\n   * @param {object} partialProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @internal\n   */\n  _setPropsInternal: function (partialProps, callback) {\n    // This is a deoptimized path. We optimize for always having an element.\n    // This creates an extra internal element.\n    var element = this._pendingElement || this._currentElement;\n    this._pendingElement = ReactElement.cloneAndReplaceProps(element, assign({}, element.props, partialProps));\n    ReactUpdates.enqueueUpdate(this, callback);\n  },\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _maskContext: function (context) {\n    var maskedContext = null;\n    // This really should be getting the component class for the element,\n    // but we know that we're not going to need it for built-ins.\n    if (typeof this._currentElement.type === 'string') {\n      return emptyObject;\n    }\n    var contextTypes = this._currentElement.type.contextTypes;\n    if (!contextTypes) {\n      return emptyObject;\n    }\n    maskedContext = {};\n    for (var contextName in contextTypes) {\n      maskedContext[contextName] = context[contextName];\n    }\n    return maskedContext;\n  },\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`, and asserts that they are valid.\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _processContext: function (context) {\n    var maskedContext = this._maskContext(context);\n    if (\"production\" !== process.env.NODE_ENV) {\n      var Component = ReactNativeComponent.getComponentClassForElement(this._currentElement);\n      if (Component.contextTypes) {\n        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);\n      }\n    }\n    return maskedContext;\n  },\n  /**\n   * @param {object} currentContext\n   * @return {object}\n   * @private\n   */\n  _getValidatedChildContext: function (currentContext) {\n    var inst = this._instance;\n    var childContext = inst.getChildContext && inst.getChildContext();\n    if (childContext) {\n      \"production\" !== process.env.NODE_ENV ? invariant(typeof inst.constructor.childContextTypes === 'object', '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(typeof inst.constructor.childContextTypes === 'object');\n      if (\"production\" !== process.env.NODE_ENV) {\n        this._checkPropTypes(inst.constructor.childContextTypes, childContext, ReactPropTypeLocations.childContext);\n      }\n      for (var name in childContext) {\n        \"production\" !== process.env.NODE_ENV ? invariant(name in inst.constructor.childContextTypes, '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(name in inst.constructor.childContextTypes);\n      }\n      return childContext;\n    }\n    return null;\n  },\n  _mergeChildContext: function (currentContext, childContext) {\n    if (childContext) {\n      return assign({}, currentContext, childContext);\n    }\n    return currentContext;\n  },\n  /**\n   * Processes props by setting default values for unspecified props and\n   * asserting that the props are valid. Does not mutate its argument; returns\n   * a new props object with defaults merged in.\n   *\n   * @param {object} newProps\n   * @return {object}\n   * @private\n   */\n  _processProps: function (newProps) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      var Component = ReactNativeComponent.getComponentClassForElement(this._currentElement);\n      if (Component.propTypes) {\n        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);\n      }\n    }\n    return newProps;\n  },\n  /**\n   * Assert that the props are valid\n   *\n   * @param {object} propTypes Map of prop name to a ReactPropType\n   * @param {object} props\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @private\n   */\n  _checkPropTypes: function (propTypes, props, location) {\n    // TODO: Stop validating prop types here and only use the element\n    // validation.\n    var componentName = this.getName();\n    for (var propName in propTypes) {\n      if (propTypes.hasOwnProperty(propName)) {\n        var error;\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          \"production\" !== process.env.NODE_ENV ? invariant(typeof propTypes[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(typeof propTypes[propName] === 'function');\n          error = propTypes[propName](props, propName, componentName, location);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error instanceof Error) {\n          // We may want to extend this logic for similar errors in\n          // React.render calls, so I'm abstracting it away into\n          // a function to minimize refactoring in the future\n          var addendum = getDeclarationErrorAddendum(this);\n          if (location === ReactPropTypeLocations.prop) {\n            // Preface gives us something to blacklist in warning module\n            \"production\" !== process.env.NODE_ENV ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : null;\n          } else {\n            \"production\" !== process.env.NODE_ENV ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : null;\n          }\n        }\n      }\n    }\n  },\n  receiveComponent: function (nextElement, transaction, nextContext) {\n    var prevElement = this._currentElement;\n    var prevContext = this._context;\n    this._pendingElement = null;\n    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);\n  },\n  /**\n   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`\n   * is set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (transaction) {\n    if (this._pendingElement != null) {\n      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);\n    }\n    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {\n      if (\"production\" !== process.env.NODE_ENV) {\n        ReactElementValidator.checkAndWarnForMutatedProps(this._currentElement);\n      }\n      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);\n    }\n  },\n  /**\n   * Compare two contexts, warning if they are different\n   * TODO: Remove this check when owner-context is removed\n   */\n  _warnIfContextsDiffer: function (ownerBasedContext, parentBasedContext) {\n    ownerBasedContext = this._maskContext(ownerBasedContext);\n    parentBasedContext = this._maskContext(parentBasedContext);\n    var parentKeys = Object.keys(parentBasedContext).sort();\n    var displayName = this.getName() || 'ReactCompositeComponent';\n    for (var i = 0; i < parentKeys.length; i++) {\n      var key = parentKeys[i];\n      \"production\" !== process.env.NODE_ENV ? warning(ownerBasedContext[key] === parentBasedContext[key], 'owner-based and parent-based contexts differ ' + '(values: `%s` vs `%s`) for key (%s) while mounting %s ' + '(see: http://fb.me/react-context-by-parent)', ownerBasedContext[key], parentBasedContext[key], key, displayName) : null;\n    }\n  },\n  /**\n   * Perform an update to a mounted component. The componentWillReceiveProps and\n   * shouldComponentUpdate methods are called, then (assuming the update isn't\n   * skipped) the remaining update lifecycle methods are called and the DOM\n   * representation is updated.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevParentElement\n   * @param {ReactElement} nextParentElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {\n    var inst = this._instance;\n    var nextContext = inst.context;\n    var nextProps = inst.props;\n\n    // Distinguish between a props update versus a simple state update\n    if (prevParentElement !== nextParentElement) {\n      nextContext = this._processContext(nextParentElement._context);\n      nextProps = this._processProps(nextParentElement.props);\n      if (\"production\" !== process.env.NODE_ENV) {\n        if (nextUnmaskedContext != null) {\n          this._warnIfContextsDiffer(nextParentElement._context, nextUnmaskedContext);\n        }\n      }\n\n      // An update here will schedule an update but immediately set\n      // _pendingStateQueue which will ensure that any state updates gets\n      // immediately reconciled instead of waiting for the next batch.\n\n      if (inst.componentWillReceiveProps) {\n        inst.componentWillReceiveProps(nextProps, nextContext);\n      }\n    }\n    var nextState = this._processPendingState(nextProps, nextContext);\n    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);\n    if (\"production\" !== process.env.NODE_ENV) {\n      \"production\" !== process.env.NODE_ENV ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : null;\n    }\n    if (shouldUpdate) {\n      this._pendingForceUpdate = false;\n      // Will set `this.props`, `this.state` and `this.context`.\n      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);\n    } else {\n      // If it's determined that a component should not update, we still want\n      // to set props and state but we shortcut the rest of the update.\n      this._currentElement = nextParentElement;\n      this._context = nextUnmaskedContext;\n      inst.props = nextProps;\n      inst.state = nextState;\n      inst.context = nextContext;\n    }\n  },\n  _processPendingState: function (props, context) {\n    var inst = this._instance;\n    var queue = this._pendingStateQueue;\n    var replace = this._pendingReplaceState;\n    this._pendingReplaceState = false;\n    this._pendingStateQueue = null;\n    if (!queue) {\n      return inst.state;\n    }\n    if (replace && queue.length === 1) {\n      return queue[0];\n    }\n    var nextState = assign({}, replace ? queue[0] : inst.state);\n    for (var i = replace ? 1 : 0; i < queue.length; i++) {\n      var partial = queue[i];\n      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);\n    }\n    return nextState;\n  },\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {ReactElement} nextElement Next element\n   * @param {object} nextProps Next public object to set as properties.\n   * @param {?object} nextState Next object to set as state.\n   * @param {?object} nextContext Next public object to set as context.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {?object} unmaskedContext\n   * @private\n   */\n  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {\n    var inst = this._instance;\n    var prevProps = inst.props;\n    var prevState = inst.state;\n    var prevContext = inst.context;\n    if (inst.componentWillUpdate) {\n      inst.componentWillUpdate(nextProps, nextState, nextContext);\n    }\n    this._currentElement = nextElement;\n    this._context = unmaskedContext;\n    inst.props = nextProps;\n    inst.state = nextState;\n    inst.context = nextContext;\n    this._updateRenderedComponent(transaction, unmaskedContext);\n    if (inst.componentDidUpdate) {\n      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);\n    }\n  },\n  /**\n   * Call the component's `render` method and update the DOM accordingly.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  _updateRenderedComponent: function (transaction, context) {\n    var prevComponentInstance = this._renderedComponent;\n    var prevRenderedElement = prevComponentInstance._currentElement;\n    var childContext = this._getValidatedChildContext();\n    var nextRenderedElement = this._renderValidatedComponent(childContext);\n    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {\n      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._mergeChildContext(context, childContext));\n    } else {\n      // These two IDs are actually the same! But nothing should rely on that.\n      var thisID = this._rootNodeID;\n      var prevComponentID = prevComponentInstance._rootNodeID;\n      ReactReconciler.unmountComponent(prevComponentInstance);\n      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement, this._currentElement.type);\n      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._mergeChildContext(context, childContext));\n      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);\n    }\n  },\n  /**\n   * @protected\n   */\n  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {\n    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);\n  },\n  /**\n   * @protected\n   */\n  _renderValidatedComponentWithoutOwnerOrContext: function () {\n    var inst = this._instance;\n    var renderedComponent = inst.render();\n    if (\"production\" !== process.env.NODE_ENV) {\n      // We allow auto-mocks to proceed as if they're returning null.\n      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {\n        // This is probably bad practice. Consider warning here and\n        // deprecating this convenience.\n        renderedComponent = null;\n      }\n    }\n    return renderedComponent;\n  },\n  /**\n   * @private\n   */\n  _renderValidatedComponent: function (childContext) {\n    var renderedComponent;\n    var previousContext = ReactContext.current;\n    ReactContext.current = this._mergeChildContext(this._currentElement._context, childContext);\n    ReactCurrentOwner.current = this;\n    try {\n      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();\n    } finally {\n      ReactContext.current = previousContext;\n      ReactCurrentOwner.current = null;\n    }\n    \"production\" !== process.env.NODE_ENV ? invariant(\n    // TODO: An `isValidNode` function would probably be more appropriate\n    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent), '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(\n    // TODO: An `isValidNode` function would probably be more appropriate\n    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent));\n    return renderedComponent;\n  },\n  /**\n   * Lazily allocates the refs object and stores `component` as `ref`.\n   *\n   * @param {string} ref Reference name.\n   * @param {component} component Component to store as `ref`.\n   * @final\n   * @private\n   */\n  attachRef: function (ref, component) {\n    var inst = this.getPublicInstance();\n    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;\n    refs[ref] = component.getPublicInstance();\n  },\n  /**\n   * Detaches a reference name.\n   *\n   * @param {string} ref Name to dereference.\n   * @final\n   * @private\n   */\n  detachRef: function (ref) {\n    var refs = this.getPublicInstance().refs;\n    delete refs[ref];\n  },\n  /**\n   * Get a text description of the component that can be used to identify it\n   * in error messages.\n   * @return {string} The name or null.\n   * @internal\n   */\n  getName: function () {\n    var type = this._currentElement.type;\n    var constructor = this._instance && this._instance.constructor;\n    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;\n  },\n  /**\n   * Get the publicly accessible representation of this component - i.e. what\n   * is exposed by refs and returned by React.render. Can be null for stateless\n   * components.\n   *\n   * @return {ReactComponent} the public component instance.\n   * @internal\n   */\n  getPublicInstance: function () {\n    return this._instance;\n  },\n  // Stub\n  _instantiateReactComponent: null\n};\nReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {\n  mountComponent: 'mountComponent',\n  updateComponent: 'updateComponent',\n  _renderValidatedComponent: '_renderValidatedComponent'\n});\nvar ReactCompositeComponent = {\n  Mixin: ReactCompositeComponentMixin\n};\nmodule.exports = ReactCompositeComponent;","map":{"version":3,"names":["ReactComponentEnvironment","require","ReactContext","ReactCurrentOwner","ReactElement","ReactElementValidator","ReactInstanceMap","ReactLifeCycle","ReactNativeComponent","ReactPerf","ReactPropTypeLocations","ReactPropTypeLocationNames","ReactReconciler","ReactUpdates","assign","emptyObject","invariant","shouldUpdateReactComponent","warning","getDeclarationErrorAddendum","component","owner","_currentElement","_owner","name","getName","nextMountID","ReactCompositeComponentMixin","construct","element","_rootNodeID","_instance","_pendingElement","_pendingStateQueue","_pendingReplaceState","_pendingForceUpdate","_renderedComponent","_context","_mountOrder","_isTopLevel","_pendingCallbacks","mountComponent","rootID","transaction","context","publicProps","_processProps","props","publicContext","_processContext","Component","getComponentClassForElement","inst","process","env","NODE_ENV","render","displayName","refs","set","_warnIfContextsDiffer","getInitialState","isReactClassApproved","getDefaultProps","propTypes","contextTypes","componentShouldUpdate","initialState","state","undefined","Array","isArray","childContext","renderedElement","previouslyMounting","currentlyMountingInstance","componentWillMount","_processPendingState","_getValidatedChildContext","_renderValidatedComponent","_instantiateReactComponent","type","markup","_mergeChildContext","componentDidMount","getReactMountReady","enqueue","unmountComponent","componentWillUnmount","previouslyUnmounting","currentlyUnmountingInstance","remove","_setPropsInternal","partialProps","callback","cloneAndReplaceProps","enqueueUpdate","_maskContext","maskedContext","contextName","_checkPropTypes","currentContext","getChildContext","constructor","childContextTypes","newProps","prop","location","componentName","propName","hasOwnProperty","error","ex","Error","addendum","message","receiveComponent","nextElement","nextContext","prevElement","prevContext","updateComponent","performUpdateIfNecessary","checkAndWarnForMutatedProps","ownerBasedContext","parentBasedContext","parentKeys","Object","keys","sort","i","length","key","prevParentElement","nextParentElement","prevUnmaskedContext","nextUnmaskedContext","nextProps","componentWillReceiveProps","nextState","shouldUpdate","shouldComponentUpdate","_performComponentUpdate","queue","replace","partial","call","unmaskedContext","prevProps","prevState","componentWillUpdate","_updateRenderedComponent","componentDidUpdate","bind","prevComponentInstance","prevRenderedElement","nextRenderedElement","thisID","prevComponentID","nextMarkup","_replaceNodeWithMarkupByID","replaceNodeWithMarkupByID","_renderValidatedComponentWithoutOwnerOrContext","renderedComponent","_isMockFunction","previousContext","current","isValidElement","attachRef","ref","getPublicInstance","detachRef","measureMethods","ReactCompositeComponent","Mixin","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/ReactCompositeComponent.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCompositeComponent\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require(\"./ReactComponentEnvironment\");\nvar ReactContext = require(\"./ReactContext\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactElementValidator = require(\"./ReactElementValidator\");\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\nvar ReactLifeCycle = require(\"./ReactLifeCycle\");\nvar ReactNativeComponent = require(\"./ReactNativeComponent\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\nvar ReactReconciler = require(\"./ReactReconciler\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar emptyObject = require(\"./emptyObject\");\nvar invariant = require(\"./invariant\");\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\nvar warning = require(\"./warning\");\n\nfunction getDeclarationErrorAddendum(component) {\n  var owner = component._currentElement._owner || null;\n  if (owner) {\n    var name = owner.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\n/**\n * ------------------ The Life-Cycle of a Composite Component ------------------\n *\n * - constructor: Initialization of state. The instance is now retained.\n *   - componentWillMount\n *   - render\n *   - [children's constructors]\n *     - [children's componentWillMount and render]\n *     - [children's componentDidMount]\n *     - componentDidMount\n *\n *       Update Phases:\n *       - componentWillReceiveProps (only called if parent updated)\n *       - shouldComponentUpdate\n *         - componentWillUpdate\n *           - render\n *           - [children's constructors or receive props phases]\n *         - componentDidUpdate\n *\n *     - componentWillUnmount\n *     - [children's componentWillUnmount]\n *   - [children destroyed]\n * - (destroyed): The instance is now blank, released by React and ready for GC.\n *\n * -----------------------------------------------------------------------------\n */\n\n/**\n * An incrementing ID assigned to each component when it is mounted. This is\n * used to enforce the order in which `ReactUpdates` updates dirty components.\n *\n * @private\n */\nvar nextMountID = 1;\n\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\nvar ReactCompositeComponentMixin = {\n\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {ReactElement} element\n   * @final\n   * @internal\n   */\n  construct: function(element) {\n    this._currentElement = element;\n    this._rootNodeID = null;\n    this._instance = null;\n\n    // See ReactUpdateQueue\n    this._pendingElement = null;\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n\n    this._renderedComponent = null;\n\n    this._context = null;\n    this._mountOrder = 0;\n    this._isTopLevel = false;\n\n    // See ReactUpdates and ReactUpdateQueue.\n    this._pendingCallbacks = null;\n  },\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function(rootID, transaction, context) {\n    this._context = context;\n    this._mountOrder = nextMountID++;\n    this._rootNodeID = rootID;\n\n    var publicProps = this._processProps(this._currentElement.props);\n    var publicContext = this._processContext(this._currentElement._context);\n\n    var Component = ReactNativeComponent.getComponentClassForElement(\n      this._currentElement\n    );\n\n    // Initialize the public class\n    var inst = new Component(publicProps, publicContext);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // This will throw later in _renderValidatedComponent, but add an early\n      // warning now to help debugging\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        inst.render != null,\n        '%s(...): No `render` method found on the returned component ' +\n        'instance: you may have forgotten to define `render` in your ' +\n        'component or you may have accidentally tried to render an element ' +\n        'whose type is a function that isn\\'t a React component.',\n        Component.displayName || Component.name || 'Component'\n      ) : null);\n    }\n\n    // These should be set up in the constructor, but as a convenience for\n    // simpler class abstractions, we set them up after the fact.\n    inst.props = publicProps;\n    inst.context = publicContext;\n    inst.refs = emptyObject;\n\n    this._instance = inst;\n\n    // Store a reference from the instance back to the internal representation\n    ReactInstanceMap.set(inst, this);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      this._warnIfContextsDiffer(this._currentElement._context, context);\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // Since plain JS classes are defined without any special initialization\n      // logic, we can not catch common errors early. Therefore, we have to\n      // catch them here, at initialization time, instead.\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        !inst.getInitialState ||\n        inst.getInitialState.isReactClassApproved,\n        'getInitialState was defined on %s, a plain JavaScript class. ' +\n        'This is only supported for classes created using React.createClass. ' +\n        'Did you mean to define a state property instead?',\n        this.getName() || 'a component'\n      ) : null);\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        !inst.getDefaultProps ||\n        inst.getDefaultProps.isReactClassApproved,\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +\n        'This is only supported for classes created using React.createClass. ' +\n        'Use a static property to define defaultProps instead.',\n        this.getName() || 'a component'\n      ) : null);\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        !inst.propTypes,\n        'propTypes was defined as an instance property on %s. Use a static ' +\n        'property to define propTypes instead.',\n        this.getName() || 'a component'\n      ) : null);\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        !inst.contextTypes,\n        'contextTypes was defined as an instance property on %s. Use a ' +\n        'static property to define contextTypes instead.',\n        this.getName() || 'a component'\n      ) : null);\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        typeof inst.componentShouldUpdate !== 'function',\n        '%s has a method called ' +\n        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n        'The name is phrased as a question because the function is ' +\n        'expected to return a value.',\n        (this.getName() || 'A component')\n      ) : null);\n    }\n\n    var initialState = inst.state;\n    if (initialState === undefined) {\n      inst.state = initialState = null;\n    }\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      typeof initialState === 'object' && !Array.isArray(initialState),\n      '%s.state: must be set to an object or null',\n      this.getName() || 'ReactCompositeComponent'\n    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));\n\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n\n    var childContext;\n    var renderedElement;\n\n    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;\n    ReactLifeCycle.currentlyMountingInstance = this;\n    try {\n      if (inst.componentWillMount) {\n        inst.componentWillMount();\n        // When mounting, calls to `setState` by `componentWillMount` will set\n        // `this._pendingStateQueue` without triggering a re-render.\n        if (this._pendingStateQueue) {\n          inst.state = this._processPendingState(inst.props, inst.context);\n        }\n      }\n\n      childContext = this._getValidatedChildContext(context);\n      renderedElement = this._renderValidatedComponent(childContext);\n    } finally {\n      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;\n    }\n\n    this._renderedComponent = this._instantiateReactComponent(\n      renderedElement,\n      this._currentElement.type // The wrapping type\n    );\n\n    var markup = ReactReconciler.mountComponent(\n      this._renderedComponent,\n      rootID,\n      transaction,\n      this._mergeChildContext(context, childContext)\n    );\n    if (inst.componentDidMount) {\n      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);\n    }\n\n    return markup;\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function() {\n    var inst = this._instance;\n\n    if (inst.componentWillUnmount) {\n      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;\n      ReactLifeCycle.currentlyUnmountingInstance = this;\n      try {\n        inst.componentWillUnmount();\n      } finally {\n        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;\n      }\n    }\n\n    ReactReconciler.unmountComponent(this._renderedComponent);\n    this._renderedComponent = null;\n\n    // Reset pending fields\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n    this._pendingCallbacks = null;\n    this._pendingElement = null;\n\n    // These fields do not really need to be reset since this object is no\n    // longer accessible.\n    this._context = null;\n    this._rootNodeID = null;\n\n    // Delete the reference from the instance to this internal representation\n    // which allow the internals to be properly cleaned up even if the user\n    // leaks a reference to the public instance.\n    ReactInstanceMap.remove(inst);\n\n    // Some existing components rely on inst.props even after they've been\n    // destroyed (in event handlers).\n    // TODO: inst.props = null;\n    // TODO: inst.state = null;\n    // TODO: inst.context = null;\n  },\n\n  /**\n   * Schedule a partial update to the props. Only used for internal testing.\n   *\n   * @param {object} partialProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @internal\n   */\n  _setPropsInternal: function(partialProps, callback) {\n    // This is a deoptimized path. We optimize for always having an element.\n    // This creates an extra internal element.\n    var element = this._pendingElement || this._currentElement;\n    this._pendingElement = ReactElement.cloneAndReplaceProps(\n      element,\n      assign({}, element.props, partialProps)\n    );\n    ReactUpdates.enqueueUpdate(this, callback);\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _maskContext: function(context) {\n    var maskedContext = null;\n    // This really should be getting the component class for the element,\n    // but we know that we're not going to need it for built-ins.\n    if (typeof this._currentElement.type === 'string') {\n      return emptyObject;\n    }\n    var contextTypes = this._currentElement.type.contextTypes;\n    if (!contextTypes) {\n      return emptyObject;\n    }\n    maskedContext = {};\n    for (var contextName in contextTypes) {\n      maskedContext[contextName] = context[contextName];\n    }\n    return maskedContext;\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`, and asserts that they are valid.\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _processContext: function(context) {\n    var maskedContext = this._maskContext(context);\n    if (\"production\" !== process.env.NODE_ENV) {\n      var Component = ReactNativeComponent.getComponentClassForElement(\n        this._currentElement\n      );\n      if (Component.contextTypes) {\n        this._checkPropTypes(\n          Component.contextTypes,\n          maskedContext,\n          ReactPropTypeLocations.context\n        );\n      }\n    }\n    return maskedContext;\n  },\n\n  /**\n   * @param {object} currentContext\n   * @return {object}\n   * @private\n   */\n  _getValidatedChildContext: function(currentContext) {\n    var inst = this._instance;\n    var childContext = inst.getChildContext && inst.getChildContext();\n    if (childContext) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        typeof inst.constructor.childContextTypes === 'object',\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n        'use getChildContext().',\n        this.getName() || 'ReactCompositeComponent'\n      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));\n      if (\"production\" !== process.env.NODE_ENV) {\n        this._checkPropTypes(\n          inst.constructor.childContextTypes,\n          childContext,\n          ReactPropTypeLocations.childContext\n        );\n      }\n      for (var name in childContext) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          name in inst.constructor.childContextTypes,\n          '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.',\n          this.getName() || 'ReactCompositeComponent',\n          name\n        ) : invariant(name in inst.constructor.childContextTypes));\n      }\n      return childContext;\n    }\n    return null;\n  },\n\n  _mergeChildContext: function(currentContext, childContext) {\n    if (childContext) {\n      return assign({}, currentContext, childContext);\n    }\n    return currentContext;\n  },\n\n  /**\n   * Processes props by setting default values for unspecified props and\n   * asserting that the props are valid. Does not mutate its argument; returns\n   * a new props object with defaults merged in.\n   *\n   * @param {object} newProps\n   * @return {object}\n   * @private\n   */\n  _processProps: function(newProps) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      var Component = ReactNativeComponent.getComponentClassForElement(\n        this._currentElement\n      );\n      if (Component.propTypes) {\n        this._checkPropTypes(\n          Component.propTypes,\n          newProps,\n          ReactPropTypeLocations.prop\n        );\n      }\n    }\n    return newProps;\n  },\n\n  /**\n   * Assert that the props are valid\n   *\n   * @param {object} propTypes Map of prop name to a ReactPropType\n   * @param {object} props\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @private\n   */\n  _checkPropTypes: function(propTypes, props, location) {\n    // TODO: Stop validating prop types here and only use the element\n    // validation.\n    var componentName = this.getName();\n    for (var propName in propTypes) {\n      if (propTypes.hasOwnProperty(propName)) {\n        var error;\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          (\"production\" !== process.env.NODE_ENV ? invariant(\n            typeof propTypes[propName] === 'function',\n            '%s: %s type `%s` is invalid; it must be a function, usually ' +\n            'from React.PropTypes.',\n            componentName || 'React class',\n            ReactPropTypeLocationNames[location],\n            propName\n          ) : invariant(typeof propTypes[propName] === 'function'));\n          error = propTypes[propName](props, propName, componentName, location);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error instanceof Error) {\n          // We may want to extend this logic for similar errors in\n          // React.render calls, so I'm abstracting it away into\n          // a function to minimize refactoring in the future\n          var addendum = getDeclarationErrorAddendum(this);\n\n          if (location === ReactPropTypeLocations.prop) {\n            // Preface gives us something to blacklist in warning module\n            (\"production\" !== process.env.NODE_ENV ? warning(\n              false,\n              'Failed Composite propType: %s%s',\n              error.message,\n              addendum\n            ) : null);\n          } else {\n            (\"production\" !== process.env.NODE_ENV ? warning(\n              false,\n              'Failed Context Types: %s%s',\n              error.message,\n              addendum\n            ) : null);\n          }\n        }\n      }\n    }\n  },\n\n  receiveComponent: function(nextElement, transaction, nextContext) {\n    var prevElement = this._currentElement;\n    var prevContext = this._context;\n\n    this._pendingElement = null;\n\n    this.updateComponent(\n      transaction,\n      prevElement,\n      nextElement,\n      prevContext,\n      nextContext\n    );\n  },\n\n  /**\n   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`\n   * is set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function(transaction) {\n    if (this._pendingElement != null) {\n      ReactReconciler.receiveComponent(\n        this,\n        this._pendingElement || this._currentElement,\n        transaction,\n        this._context\n      );\n    }\n\n    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {\n      if (\"production\" !== process.env.NODE_ENV) {\n        ReactElementValidator.checkAndWarnForMutatedProps(\n          this._currentElement\n        );\n      }\n\n      this.updateComponent(\n        transaction,\n        this._currentElement,\n        this._currentElement,\n        this._context,\n        this._context\n      );\n    }\n  },\n\n  /**\n   * Compare two contexts, warning if they are different\n   * TODO: Remove this check when owner-context is removed\n   */\n   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {\n    ownerBasedContext = this._maskContext(ownerBasedContext);\n    parentBasedContext = this._maskContext(parentBasedContext);\n    var parentKeys = Object.keys(parentBasedContext).sort();\n    var displayName = this.getName() || 'ReactCompositeComponent';\n    for (var i = 0; i < parentKeys.length; i++) {\n      var key = parentKeys[i];\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        ownerBasedContext[key] === parentBasedContext[key],\n        'owner-based and parent-based contexts differ '  +\n        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +\n        '(see: http://fb.me/react-context-by-parent)',\n        ownerBasedContext[key],\n        parentBasedContext[key],\n        key,\n        displayName\n      ) : null);\n    }\n  },\n\n  /**\n   * Perform an update to a mounted component. The componentWillReceiveProps and\n   * shouldComponentUpdate methods are called, then (assuming the update isn't\n   * skipped) the remaining update lifecycle methods are called and the DOM\n   * representation is updated.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevParentElement\n   * @param {ReactElement} nextParentElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: function(\n    transaction,\n    prevParentElement,\n    nextParentElement,\n    prevUnmaskedContext,\n    nextUnmaskedContext\n  ) {\n    var inst = this._instance;\n\n    var nextContext = inst.context;\n    var nextProps = inst.props;\n\n    // Distinguish between a props update versus a simple state update\n    if (prevParentElement !== nextParentElement) {\n      nextContext = this._processContext(nextParentElement._context);\n      nextProps = this._processProps(nextParentElement.props);\n\n      if (\"production\" !== process.env.NODE_ENV) {\n        if (nextUnmaskedContext != null) {\n          this._warnIfContextsDiffer(\n            nextParentElement._context,\n            nextUnmaskedContext\n          );\n        }\n      }\n\n      // An update here will schedule an update but immediately set\n      // _pendingStateQueue which will ensure that any state updates gets\n      // immediately reconciled instead of waiting for the next batch.\n\n      if (inst.componentWillReceiveProps) {\n        inst.componentWillReceiveProps(nextProps, nextContext);\n      }\n    }\n\n    var nextState = this._processPendingState(nextProps, nextContext);\n\n    var shouldUpdate =\n      this._pendingForceUpdate ||\n      !inst.shouldComponentUpdate ||\n      inst.shouldComponentUpdate(nextProps, nextState, nextContext);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        typeof shouldUpdate !== 'undefined',\n        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +\n        'boolean value. Make sure to return true or false.',\n        this.getName() || 'ReactCompositeComponent'\n      ) : null);\n    }\n\n    if (shouldUpdate) {\n      this._pendingForceUpdate = false;\n      // Will set `this.props`, `this.state` and `this.context`.\n      this._performComponentUpdate(\n        nextParentElement,\n        nextProps,\n        nextState,\n        nextContext,\n        transaction,\n        nextUnmaskedContext\n      );\n    } else {\n      // If it's determined that a component should not update, we still want\n      // to set props and state but we shortcut the rest of the update.\n      this._currentElement = nextParentElement;\n      this._context = nextUnmaskedContext;\n      inst.props = nextProps;\n      inst.state = nextState;\n      inst.context = nextContext;\n    }\n  },\n\n  _processPendingState: function(props, context) {\n    var inst = this._instance;\n    var queue = this._pendingStateQueue;\n    var replace = this._pendingReplaceState;\n    this._pendingReplaceState = false;\n    this._pendingStateQueue = null;\n\n    if (!queue) {\n      return inst.state;\n    }\n\n    if (replace && queue.length === 1) {\n      return queue[0];\n    }\n\n    var nextState = assign({}, replace ? queue[0] : inst.state);\n    for (var i = replace ? 1 : 0; i < queue.length; i++) {\n      var partial = queue[i];\n      assign(\n        nextState,\n        typeof partial === 'function' ?\n          partial.call(inst, nextState, props, context) :\n          partial\n      );\n    }\n\n    return nextState;\n  },\n\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {ReactElement} nextElement Next element\n   * @param {object} nextProps Next public object to set as properties.\n   * @param {?object} nextState Next object to set as state.\n   * @param {?object} nextContext Next public object to set as context.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {?object} unmaskedContext\n   * @private\n   */\n  _performComponentUpdate: function(\n    nextElement,\n    nextProps,\n    nextState,\n    nextContext,\n    transaction,\n    unmaskedContext\n  ) {\n    var inst = this._instance;\n\n    var prevProps = inst.props;\n    var prevState = inst.state;\n    var prevContext = inst.context;\n\n    if (inst.componentWillUpdate) {\n      inst.componentWillUpdate(nextProps, nextState, nextContext);\n    }\n\n    this._currentElement = nextElement;\n    this._context = unmaskedContext;\n    inst.props = nextProps;\n    inst.state = nextState;\n    inst.context = nextContext;\n\n    this._updateRenderedComponent(transaction, unmaskedContext);\n\n    if (inst.componentDidUpdate) {\n      transaction.getReactMountReady().enqueue(\n        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),\n        inst\n      );\n    }\n  },\n\n  /**\n   * Call the component's `render` method and update the DOM accordingly.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  _updateRenderedComponent: function(transaction, context) {\n    var prevComponentInstance = this._renderedComponent;\n    var prevRenderedElement = prevComponentInstance._currentElement;\n    var childContext = this._getValidatedChildContext();\n    var nextRenderedElement = this._renderValidatedComponent(childContext);\n    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {\n      ReactReconciler.receiveComponent(\n        prevComponentInstance,\n        nextRenderedElement,\n        transaction,\n        this._mergeChildContext(context, childContext)\n      );\n    } else {\n      // These two IDs are actually the same! But nothing should rely on that.\n      var thisID = this._rootNodeID;\n      var prevComponentID = prevComponentInstance._rootNodeID;\n      ReactReconciler.unmountComponent(prevComponentInstance);\n\n      this._renderedComponent = this._instantiateReactComponent(\n        nextRenderedElement,\n        this._currentElement.type\n      );\n      var nextMarkup = ReactReconciler.mountComponent(\n        this._renderedComponent,\n        thisID,\n        transaction,\n        this._mergeChildContext(context, childContext)\n      );\n      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);\n    }\n  },\n\n  /**\n   * @protected\n   */\n  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {\n    ReactComponentEnvironment.replaceNodeWithMarkupByID(\n      prevComponentID,\n      nextMarkup\n    );\n  },\n\n  /**\n   * @protected\n   */\n  _renderValidatedComponentWithoutOwnerOrContext: function() {\n    var inst = this._instance;\n    var renderedComponent = inst.render();\n    if (\"production\" !== process.env.NODE_ENV) {\n      // We allow auto-mocks to proceed as if they're returning null.\n      if (typeof renderedComponent === 'undefined' &&\n          inst.render._isMockFunction) {\n        // This is probably bad practice. Consider warning here and\n        // deprecating this convenience.\n        renderedComponent = null;\n      }\n    }\n\n    return renderedComponent;\n  },\n\n  /**\n   * @private\n   */\n  _renderValidatedComponent: function(childContext) {\n    var renderedComponent;\n    var previousContext = ReactContext.current;\n    ReactContext.current = this._mergeChildContext(\n      this._currentElement._context,\n      childContext\n    );\n    ReactCurrentOwner.current = this;\n    try {\n      renderedComponent =\n        this._renderValidatedComponentWithoutOwnerOrContext();\n    } finally {\n      ReactContext.current = previousContext;\n      ReactCurrentOwner.current = null;\n    }\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      // TODO: An `isValidNode` function would probably be more appropriate\n      renderedComponent === null || renderedComponent === false ||\n      ReactElement.isValidElement(renderedComponent),\n      '%s.render(): A valid ReactComponent must be returned. You may have ' +\n        'returned undefined, an array or some other invalid object.',\n      this.getName() || 'ReactCompositeComponent'\n    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate\n    renderedComponent === null || renderedComponent === false ||\n    ReactElement.isValidElement(renderedComponent)));\n    return renderedComponent;\n  },\n\n  /**\n   * Lazily allocates the refs object and stores `component` as `ref`.\n   *\n   * @param {string} ref Reference name.\n   * @param {component} component Component to store as `ref`.\n   * @final\n   * @private\n   */\n  attachRef: function(ref, component) {\n    var inst = this.getPublicInstance();\n    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;\n    refs[ref] = component.getPublicInstance();\n  },\n\n  /**\n   * Detaches a reference name.\n   *\n   * @param {string} ref Name to dereference.\n   * @final\n   * @private\n   */\n  detachRef: function(ref) {\n    var refs = this.getPublicInstance().refs;\n    delete refs[ref];\n  },\n\n  /**\n   * Get a text description of the component that can be used to identify it\n   * in error messages.\n   * @return {string} The name or null.\n   * @internal\n   */\n  getName: function() {\n    var type = this._currentElement.type;\n    var constructor = this._instance && this._instance.constructor;\n    return (\n      type.displayName || (constructor && constructor.displayName) ||\n      type.name || (constructor && constructor.name) ||\n      null\n    );\n  },\n\n  /**\n   * Get the publicly accessible representation of this component - i.e. what\n   * is exposed by refs and returned by React.render. Can be null for stateless\n   * components.\n   *\n   * @return {ReactComponent} the public component instance.\n   * @internal\n   */\n  getPublicInstance: function() {\n    return this._instance;\n  },\n\n  // Stub\n  _instantiateReactComponent: null\n\n};\n\nReactPerf.measureMethods(\n  ReactCompositeComponentMixin,\n  'ReactCompositeComponent',\n  {\n    mountComponent: 'mountComponent',\n    updateComponent: 'updateComponent',\n    _renderValidatedComponent: '_renderValidatedComponent'\n  }\n);\n\nvar ReactCompositeComponent = {\n\n  Mixin: ReactCompositeComponentMixin\n\n};\n\nmodule.exports = ReactCompositeComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}