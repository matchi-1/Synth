{"ast":null,"code":"import { isTag } from 'domhandler';\n/*\n * https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n * https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\n */\nconst submittableSelector = 'input,select,textarea,keygen';\nconst r20 = /%20/g;\nconst rCRLF = /\\r?\\n/g;\n/**\n * Encode a set of form elements as a string for submission.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serialize();\n * //=> 'foo=bar'\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serialize/}\n */\nexport function serialize() {\n  // Convert form elements into name/value objects\n  const arr = this.serializeArray();\n  // Serialize each element into a key/value string\n  const retArr = arr.map(data => `${encodeURIComponent(data.name)}=${encodeURIComponent(data.value)}`);\n  // Return the resulting serialization\n  return retArr.join('&').replace(r20, '+');\n}\n/**\n * Encode a set of form elements as an array of names and values.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serializeArray();\n * //=> [ { name: 'foo', value: 'bar' } ]\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serializeArray/}\n */\nexport function serializeArray() {\n  // Resolve all form elements from either forms or collections of form elements\n  return this.map((_, elem) => {\n    const $elem = this._make(elem);\n    if (isTag(elem) && elem.name === 'form') {\n      return $elem.find(submittableSelector).toArray();\n    }\n    return $elem.filter(submittableSelector).toArray();\n  }).filter(\n  // Verify elements have a name (`attr.name`) and are not disabled (`:enabled`)\n  '[name!=\"\"]:enabled' +\n  // And cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n  ':not(:submit, :button, :image, :reset, :file)' +\n  // And are either checked/don't have a checkable state\n  ':matches([checked], :not(:checkbox, :radio))').map((_, elem) => {\n    var _a;\n    const $elem = this._make(elem);\n    const name = $elem.attr('name'); // We have filtered for elements with a name before.\n    // If there is no value set (e.g. `undefined`, `null`), then default value to empty\n    const value = (_a = $elem.val()) !== null && _a !== void 0 ? _a : '';\n    // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n    if (Array.isArray(value)) {\n      return value.map(val => (\n      /*\n       * We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n       * These can occur inside of `<textarea>'s`\n       */\n      {\n        name,\n        value: val.replace(rCRLF, '\\r\\n')\n      }));\n    }\n    // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n    return {\n      name,\n      value: value.replace(rCRLF, '\\r\\n')\n    };\n  }).toArray();\n}\n//# sourceMappingURL=forms.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}