{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMProperty = require(\"./DOMProperty\");\nvar ReactDefaultPerfAnalysis = require(\"./ReactDefaultPerfAnalysis\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar performanceNow = require(\"./performanceNow\");\nfunction roundFloat(val) {\n  return Math.floor(val * 100) / 100;\n}\nfunction addValue(obj, key, val) {\n  obj[key] = (obj[key] || 0) + val;\n}\nvar ReactDefaultPerf = {\n  _allMeasurements: [],\n  // last item in the list is the current one\n  _mountStack: [0],\n  _injected: false,\n  start: function () {\n    if (!ReactDefaultPerf._injected) {\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n    }\n    ReactDefaultPerf._allMeasurements.length = 0;\n    ReactPerf.enableMeasure = true;\n  },\n  stop: function () {\n    ReactPerf.enableMeasure = false;\n  },\n  getLastMeasurements: function () {\n    return ReactDefaultPerf._allMeasurements;\n  },\n  printExclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Component class name': item.componentName,\n        'Total inclusive time (ms)': roundFloat(item.inclusive),\n        'Exclusive mount time (ms)': roundFloat(item.exclusive),\n        'Exclusive render time (ms)': roundFloat(item.render),\n        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),\n        'Render time per instance (ms)': roundFloat(item.render / item.count),\n        'Instances': item.count\n      };\n    }));\n    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct\n    // number.\n  },\n  printInclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Inclusive time (ms)': roundFloat(item.time),\n        'Instances': item.count\n      };\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  getMeasurementsSummaryMap: function (measurements) {\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);\n    return summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Wasted time (ms)': item.time,\n        'Instances': item.count\n      };\n    });\n  },\n  printWasted: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  printDOM: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n    console.table(summary.map(function (item) {\n      var result = {};\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\n      result['type'] = item.type;\n      result['args'] = JSON.stringify(item.args);\n      return result;\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  _recordWrite: function (id, fnName, totalTime, args) {\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\n    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;\n    writes[id] = writes[id] || [];\n    writes[id].push({\n      type: fnName,\n      time: totalTime,\n      args: args\n    });\n  },\n  measure: function (moduleName, fnName, func) {\n    return function () {\n      for (var args = [], $__0 = 0, $__1 = arguments.length; $__0 < $__1; $__0++) args.push(arguments[$__0]);\n      var totalTime;\n      var rv;\n      var start;\n      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {\n        // A \"measurement\" is a set of metrics recorded for each flush. We want\n        // to group the metrics for a given flush together so we can look at the\n        // components that rendered and the DOM operations that actually\n        // happened to determine the amount of \"wasted work\" performed.\n        ReactDefaultPerf._allMeasurements.push({\n          exclusive: {},\n          inclusive: {},\n          render: {},\n          counts: {},\n          writes: {},\n          displayNames: {},\n          totalTime: 0\n        });\n        start = performanceNow();\n        rv = func.apply(this, args);\n        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;\n        return rv;\n      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactDOMIDOperations') {\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n        if (fnName === '_mountImageIntoNode') {\n          var mountID = ReactMount.getID(args[1]);\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\n          // special format\n          args[0].forEach(function (update) {\n            var writeArgs = {};\n            if (update.fromIndex !== null) {\n              writeArgs.fromIndex = update.fromIndex;\n            }\n            if (update.toIndex !== null) {\n              writeArgs.toIndex = update.toIndex;\n            }\n            if (update.textContent !== null) {\n              writeArgs.textContent = update.textContent;\n            }\n            if (update.markupIndex !== null) {\n              writeArgs.markup = args[1][update.markupIndex];\n            }\n            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);\n          });\n        } else {\n          // basic format\n          ReactDefaultPerf._recordWrite(args[0], fnName, totalTime, Array.prototype.slice.call(args, 1));\n        }\n        return rv;\n      } else if (moduleName === 'ReactCompositeComponent' && (\n      // TODO: receiveComponent()?\n      fnName === 'mountComponent' || fnName === 'updateComponent' || fnName === '_renderValidatedComponent')) {\n        if (typeof this._currentElement.type === 'string') {\n          return func.apply(this, args);\n        }\n        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;\n        var isRender = fnName === '_renderValidatedComponent';\n        var isMount = fnName === 'mountComponent';\n        var mountStack = ReactDefaultPerf._mountStack;\n        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];\n        if (isRender) {\n          addValue(entry.counts, rootNodeID, 1);\n        } else if (isMount) {\n          mountStack.push(0);\n        }\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n        if (isRender) {\n          addValue(entry.render, rootNodeID, totalTime);\n        } else if (isMount) {\n          var subMountTime = mountStack.pop();\n          mountStack[mountStack.length - 1] += totalTime;\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        } else {\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        }\n        entry.displayNames[rootNodeID] = {\n          current: this.getName(),\n          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'\n        };\n        return rv;\n      } else {\n        return func.apply(this, args);\n      }\n    };\n  }\n};\nmodule.exports = ReactDefaultPerf;","map":{"version":3,"names":["DOMProperty","require","ReactDefaultPerfAnalysis","ReactMount","ReactPerf","performanceNow","roundFloat","val","Math","floor","addValue","obj","key","ReactDefaultPerf","_allMeasurements","_mountStack","_injected","start","injection","injectMeasure","measure","length","enableMeasure","stop","getLastMeasurements","printExclusive","measurements","summary","getExclusiveSummary","console","table","map","item","componentName","inclusive","exclusive","render","count","printInclusive","getInclusiveSummary","time","log","getTotalTime","toFixed","getMeasurementsSummaryMap","printWasted","printDOM","getDOMSummary","result","ID_ATTRIBUTE_NAME","id","type","JSON","stringify","args","_recordWrite","fnName","totalTime","writes","push","moduleName","func","$__0","$__1","arguments","rv","counts","displayNames","apply","mountID","getID","forEach","update","writeArgs","fromIndex","toIndex","textContent","markupIndex","markup","parentID","Array","prototype","slice","call","_currentElement","rootNodeID","_rootNodeID","isRender","isMount","mountStack","entry","subMountTime","pop","current","getName","owner","_owner","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/ReactDefaultPerf.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMProperty = require(\"./DOMProperty\");\nvar ReactDefaultPerfAnalysis = require(\"./ReactDefaultPerfAnalysis\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar performanceNow = require(\"./performanceNow\");\n\nfunction roundFloat(val) {\n  return Math.floor(val * 100) / 100;\n}\n\nfunction addValue(obj, key, val) {\n  obj[key] = (obj[key] || 0) + val;\n}\n\nvar ReactDefaultPerf = {\n  _allMeasurements: [], // last item in the list is the current one\n  _mountStack: [0],\n  _injected: false,\n\n  start: function() {\n    if (!ReactDefaultPerf._injected) {\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n    }\n\n    ReactDefaultPerf._allMeasurements.length = 0;\n    ReactPerf.enableMeasure = true;\n  },\n\n  stop: function() {\n    ReactPerf.enableMeasure = false;\n  },\n\n  getLastMeasurements: function() {\n    return ReactDefaultPerf._allMeasurements;\n  },\n\n  printExclusive: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n    console.table(summary.map(function(item) {\n      return {\n        'Component class name': item.componentName,\n        'Total inclusive time (ms)': roundFloat(item.inclusive),\n        'Exclusive mount time (ms)': roundFloat(item.exclusive),\n        'Exclusive render time (ms)': roundFloat(item.render),\n        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),\n        'Render time per instance (ms)': roundFloat(item.render / item.count),\n        'Instances': item.count\n      };\n    }));\n    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct\n    // number.\n  },\n\n  printInclusive: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n    console.table(summary.map(function(item) {\n      return {\n        'Owner > component': item.componentName,\n        'Inclusive time (ms)': roundFloat(item.time),\n        'Instances': item.count\n      };\n    }));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  getMeasurementsSummaryMap: function(measurements) {\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(\n      measurements,\n      true\n    );\n    return summary.map(function(item) {\n      return {\n        'Owner > component': item.componentName,\n        'Wasted time (ms)': item.time,\n        'Instances': item.count\n      };\n    });\n  },\n\n  printWasted: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  printDOM: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n    console.table(summary.map(function(item) {\n      var result = {};\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\n      result['type'] = item.type;\n      result['args'] = JSON.stringify(item.args);\n      return result;\n    }));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  _recordWrite: function(id, fnName, totalTime, args) {\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\n    var writes =\n      ReactDefaultPerf\n        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]\n        .writes;\n    writes[id] = writes[id] || [];\n    writes[id].push({\n      type: fnName,\n      time: totalTime,\n      args: args\n    });\n  },\n\n  measure: function(moduleName, fnName, func) {\n    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n      var totalTime;\n      var rv;\n      var start;\n\n      if (fnName === '_renderNewRootComponent' ||\n          fnName === 'flushBatchedUpdates') {\n        // A \"measurement\" is a set of metrics recorded for each flush. We want\n        // to group the metrics for a given flush together so we can look at the\n        // components that rendered and the DOM operations that actually\n        // happened to determine the amount of \"wasted work\" performed.\n        ReactDefaultPerf._allMeasurements.push({\n          exclusive: {},\n          inclusive: {},\n          render: {},\n          counts: {},\n          writes: {},\n          displayNames: {},\n          totalTime: 0\n        });\n        start = performanceNow();\n        rv = func.apply(this, args);\n        ReactDefaultPerf._allMeasurements[\n          ReactDefaultPerf._allMeasurements.length - 1\n        ].totalTime = performanceNow() - start;\n        return rv;\n      } else if (fnName === '_mountImageIntoNode' ||\n          moduleName === 'ReactDOMIDOperations') {\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (fnName === '_mountImageIntoNode') {\n          var mountID = ReactMount.getID(args[1]);\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\n          // special format\n          args[0].forEach(function(update) {\n            var writeArgs = {};\n            if (update.fromIndex !== null) {\n              writeArgs.fromIndex = update.fromIndex;\n            }\n            if (update.toIndex !== null) {\n              writeArgs.toIndex = update.toIndex;\n            }\n            if (update.textContent !== null) {\n              writeArgs.textContent = update.textContent;\n            }\n            if (update.markupIndex !== null) {\n              writeArgs.markup = args[1][update.markupIndex];\n            }\n            ReactDefaultPerf._recordWrite(\n              update.parentID,\n              update.type,\n              totalTime,\n              writeArgs\n            );\n          });\n        } else {\n          // basic format\n          ReactDefaultPerf._recordWrite(\n            args[0],\n            fnName,\n            totalTime,\n            Array.prototype.slice.call(args, 1)\n          );\n        }\n        return rv;\n      } else if (moduleName === 'ReactCompositeComponent' && (\n        (// TODO: receiveComponent()?\n        (fnName === 'mountComponent' ||\n        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {\n\n        if (typeof this._currentElement.type === 'string') {\n          return func.apply(this, args);\n        }\n\n        var rootNodeID = fnName === 'mountComponent' ?\n          args[0] :\n          this._rootNodeID;\n        var isRender = fnName === '_renderValidatedComponent';\n        var isMount = fnName === 'mountComponent';\n\n        var mountStack = ReactDefaultPerf._mountStack;\n        var entry = ReactDefaultPerf._allMeasurements[\n          ReactDefaultPerf._allMeasurements.length - 1\n        ];\n\n        if (isRender) {\n          addValue(entry.counts, rootNodeID, 1);\n        } else if (isMount) {\n          mountStack.push(0);\n        }\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (isRender) {\n          addValue(entry.render, rootNodeID, totalTime);\n        } else if (isMount) {\n          var subMountTime = mountStack.pop();\n          mountStack[mountStack.length - 1] += totalTime;\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        } else {\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        }\n\n        entry.displayNames[rootNodeID] = {\n          current: this.getName(),\n          owner: this._currentElement._owner ?\n            this._currentElement._owner.getName() :\n            '<root>'\n        };\n\n        return rv;\n      } else {\n        return func.apply(this, args);\n      }\n    };\n  }\n};\n\nmodule.exports = ReactDefaultPerf;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}