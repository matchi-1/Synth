{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require(\"./ReactComponentEnvironment\");\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\nvar ReactReconciler = require(\"./ReactReconciler\");\nvar ReactChildReconciler = require(\"./ReactChildReconciler\");\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth = 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\nvar updateQueue = [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\nvar markupQueue = [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    textContent: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    textContent: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction, context) {\n      var children = ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name];\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + name;\n          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n          child._mountIndex = index;\n          mountImages.push(mountImage);\n          index++;\n        }\n      }\n      return mountImages;\n    },\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        // TODO: The setTextContent operation should be enough\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildren, transaction, context) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        this._updateChildren(nextNestedChildren, transaction, context);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildren, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var nextChildren = ReactChildReconciler.updateChildren(prevChildren, nextNestedChildren, transaction, context);\n      this._renderedChildren = nextChildren;\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex = 0;\n      var nextIndex = 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n        if (prevChild === nextChild) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChildByName(prevChild, name);\n          }\n          // The child must be instantiated before it's mounted.\n          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);\n        }\n        nextIndex++;\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n          this._unmountChildByName(prevChildren[name], name);\n        }\n      }\n    },\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function () {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren);\n      this._renderedChildren = null;\n    },\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, mountImage) {\n      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function (textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n    },\n    /**\n     * Unmounts a rendered child by name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @param {string} name Name of the child in `this._renderedChildren`.\n     * @private\n     */\n    _unmountChildByName: function (child, name) {\n      this.removeChild(child);\n      child._mountIndex = null;\n    }\n  }\n};\nmodule.exports = ReactMultiChild;","map":{"version":3,"names":["ReactComponentEnvironment","require","ReactMultiChildUpdateTypes","ReactReconciler","ReactChildReconciler","updateDepth","updateQueue","markupQueue","enqueueMarkup","parentID","markup","toIndex","push","parentNode","type","INSERT_MARKUP","markupIndex","textContent","fromIndex","enqueueMove","MOVE_EXISTING","enqueueRemove","REMOVE_NODE","enqueueTextContent","TEXT_CONTENT","processQueue","length","processChildrenUpdates","clearQueue","ReactMultiChild","Mixin","mountChildren","nestedChildren","transaction","context","children","instantiateChildren","_renderedChildren","mountImages","index","name","hasOwnProperty","child","rootID","_rootNodeID","mountImage","mountComponent","_mountIndex","updateTextContent","nextContent","errorThrown","prevChildren","unmountChildren","_unmountChildByName","setTextContent","updateChildren","nextNestedChildren","_updateChildren","nextChildren","lastIndex","nextIndex","prevChild","nextChild","moveChild","Math","max","_mountChildByNameAtIndex","renderedChildren","createChild","removeChild","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/ReactMultiChild.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require(\"./ReactComponentEnvironment\");\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\n\nvar ReactReconciler = require(\"./ReactReconciler\");\nvar ReactChildReconciler = require(\"./ReactChildReconciler\");\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth = 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\nvar updateQueue = [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\nvar markupQueue = [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    textContent: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    textContent: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponentEnvironment.processChildrenUpdates(\n      updateQueue,\n      markupQueue\n    );\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function(nestedChildren, transaction, context) {\n      var children = ReactChildReconciler.instantiateChildren(\n        nestedChildren, transaction, context\n      );\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name];\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + name;\n          var mountImage = ReactReconciler.mountComponent(\n            child,\n            rootID,\n            transaction,\n            context\n          );\n          child._mountIndex = index;\n          mountImages.push(mountImage);\n          index++;\n        }\n      }\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function(nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        // TODO: The setTextContent operation should be enough\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function(nextNestedChildren, transaction, context) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        this._updateChildren(nextNestedChildren, transaction, context);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function(nextNestedChildren, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var nextChildren = ReactChildReconciler.updateChildren(\n        prevChildren, nextNestedChildren, transaction, context\n      );\n      this._renderedChildren = nextChildren;\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex = 0;\n      var nextIndex = 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n        if (prevChild === nextChild) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChildByName(prevChild, name);\n          }\n          // The child must be instantiated before it's mounted.\n          this._mountChildByNameAtIndex(\n            nextChild, name, nextIndex, transaction, context\n          );\n        }\n        nextIndex++;\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) &&\n            !(nextChildren && nextChildren.hasOwnProperty(name))) {\n          this._unmountChildByName(prevChildren[name], name);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function() {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren);\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function(child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function(child, mountImage) {\n      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function(child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function(textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function(\n      child,\n      name,\n      index,\n      transaction,\n      context) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = ReactReconciler.mountComponent(\n        child,\n        rootID,\n        transaction,\n        context\n      );\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n    },\n\n    /**\n     * Unmounts a rendered child by name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @param {string} name Name of the child in `this._renderedChildren`.\n     * @private\n     */\n    _unmountChildByName: function(child, name) {\n      this.removeChild(child);\n      child._mountIndex = null;\n    }\n\n  }\n\n};\n\nmodule.exports = ReactMultiChild;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}