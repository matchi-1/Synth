{"ast":null,"code":"import { EventEmitter } from '../common/EventEmitter.js';\n/**\n * Events that the CDPSession class emits.\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport var CDPSessionEvent;\n(function (CDPSessionEvent) {\n  /** @internal */\n  CDPSessionEvent.Disconnected = Symbol('CDPSession.Disconnected');\n  /** @internal */\n  CDPSessionEvent.Swapped = Symbol('CDPSession.Swapped');\n  /**\n   * Emitted when the session is ready to be configured during the auto-attach\n   * process. Right after the event is handled, the session will be resumed.\n   *\n   * @internal\n   */\n  CDPSessionEvent.Ready = Symbol('CDPSession.Ready');\n  CDPSessionEvent.SessionAttached = 'sessionattached';\n  CDPSessionEvent.SessionDetached = 'sessiondetached';\n})(CDPSessionEvent || (CDPSessionEvent = {}));\n/**\n * The `CDPSession` instances are used to talk raw Chrome Devtools Protocol.\n *\n * @remarks\n *\n * Protocol methods can be called with {@link CDPSession.send} method and protocol\n * events can be subscribed to with `CDPSession.on` method.\n *\n * Useful links: {@link https://chromedevtools.github.io/devtools-protocol/ | DevTools Protocol Viewer}\n * and {@link https://github.com/aslushnikov/getting-started-with-cdp/blob/HEAD/README.md | Getting Started with DevTools Protocol}.\n *\n * @example\n *\n * ```ts\n * const client = await page.createCDPSession();\n * await client.send('Animation.enable');\n * client.on('Animation.animationCreated', () =>\n *   console.log('Animation created!')\n * );\n * const response = await client.send('Animation.getPlaybackRate');\n * console.log('playback rate is ' + response.playbackRate);\n * await client.send('Animation.setPlaybackRate', {\n *   playbackRate: response.playbackRate / 2,\n * });\n * ```\n *\n * @public\n */\nexport class CDPSession extends EventEmitter {\n  /**\n   * @internal\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Parent session in terms of CDP's auto-attach mechanism.\n   *\n   * @internal\n   */\n  parentSession() {\n    return undefined;\n  }\n}","map":{"version":3,"names":["EventEmitter","CDPSessionEvent","Disconnected","Symbol","Swapped","Ready","SessionAttached","SessionDetached","CDPSession","constructor","parentSession","undefined"],"sources":["C:\\Users\\raffy\\Desktop\\test\\node_modules\\puppeteer-core\\src\\api\\CDPSession.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2024 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport type {ProtocolMapping} from 'devtools-protocol/types/protocol-mapping.js';\n\nimport type {Connection} from '../cdp/Connection.js';\nimport {EventEmitter, type EventType} from '../common/EventEmitter.js';\n\n/**\n * @public\n */\nexport type CDPEvents = {\n  [Property in keyof ProtocolMapping.Events]: ProtocolMapping.Events[Property][0];\n};\n\n/**\n * Events that the CDPSession class emits.\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace CDPSessionEvent {\n  /** @internal */\n  export const Disconnected = Symbol('CDPSession.Disconnected');\n  /** @internal */\n  export const Swapped = Symbol('CDPSession.Swapped');\n  /**\n   * Emitted when the session is ready to be configured during the auto-attach\n   * process. Right after the event is handled, the session will be resumed.\n   *\n   * @internal\n   */\n  export const Ready = Symbol('CDPSession.Ready');\n  export const SessionAttached = 'sessionattached' as const;\n  export const SessionDetached = 'sessiondetached' as const;\n}\n\n/**\n * @public\n */\nexport interface CDPSessionEvents\n  extends CDPEvents,\n    Record<EventType, unknown> {\n  /** @internal */\n  [CDPSessionEvent.Disconnected]: undefined;\n  /** @internal */\n  [CDPSessionEvent.Swapped]: CDPSession;\n  /** @internal */\n  [CDPSessionEvent.Ready]: CDPSession;\n  [CDPSessionEvent.SessionAttached]: CDPSession;\n  [CDPSessionEvent.SessionDetached]: CDPSession;\n}\n\n/**\n * @public\n */\nexport interface CommandOptions {\n  timeout: number;\n}\n\n/**\n * The `CDPSession` instances are used to talk raw Chrome Devtools Protocol.\n *\n * @remarks\n *\n * Protocol methods can be called with {@link CDPSession.send} method and protocol\n * events can be subscribed to with `CDPSession.on` method.\n *\n * Useful links: {@link https://chromedevtools.github.io/devtools-protocol/ | DevTools Protocol Viewer}\n * and {@link https://github.com/aslushnikov/getting-started-with-cdp/blob/HEAD/README.md | Getting Started with DevTools Protocol}.\n *\n * @example\n *\n * ```ts\n * const client = await page.createCDPSession();\n * await client.send('Animation.enable');\n * client.on('Animation.animationCreated', () =>\n *   console.log('Animation created!')\n * );\n * const response = await client.send('Animation.getPlaybackRate');\n * console.log('playback rate is ' + response.playbackRate);\n * await client.send('Animation.setPlaybackRate', {\n *   playbackRate: response.playbackRate / 2,\n * });\n * ```\n *\n * @public\n */\nexport abstract class CDPSession extends EventEmitter<CDPSessionEvents> {\n  /**\n   * @internal\n   */\n  constructor() {\n    super();\n  }\n\n  abstract connection(): Connection | undefined;\n\n  /**\n   * Parent session in terms of CDP's auto-attach mechanism.\n   *\n   * @internal\n   */\n  parentSession(): CDPSession | undefined {\n    return undefined;\n  }\n\n  abstract send<T extends keyof ProtocolMapping.Commands>(\n    method: T,\n    params?: ProtocolMapping.Commands[T]['paramsType'][0],\n    options?: CommandOptions\n  ): Promise<ProtocolMapping.Commands[T]['returnType']>;\n\n  /**\n   * Detaches the cdpSession from the target. Once detached, the cdpSession object\n   * won't emit any events and can't be used to send messages.\n   */\n  abstract detach(): Promise<void>;\n\n  /**\n   * Returns the session's id.\n   */\n  abstract id(): string;\n}\n"],"mappings":"AAQA,SAAQA,YAAY,QAAuB,2BAA2B;AAStE;;;;;AAKA;AACA,OAAM,IAAWC,eAAe;AAAhC,WAAiBA,eAAe;EAC9B;EACaA,eAAA,CAAAC,YAAY,GAAGC,MAAM,CAAC,yBAAyB,CAAC;EAC7D;EACaF,eAAA,CAAAG,OAAO,GAAGD,MAAM,CAAC,oBAAoB,CAAC;EACnD;;;;;;EAMaF,eAAA,CAAAI,KAAK,GAAGF,MAAM,CAAC,kBAAkB,CAAC;EAClCF,eAAA,CAAAK,eAAe,GAAG,iBAA0B;EAC5CL,eAAA,CAAAM,eAAe,GAAG,iBAA0B;AAC3D,CAAC,EAdgBN,eAAe,KAAfA,eAAe;AAuChC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAM,MAAgBO,UAAW,SAAQR,YAA8B;EACrE;;;EAGAS,YAAA;IACE,KAAK,EAAE;EACT;EAIA;;;;;EAKAC,aAAaA,CAAA;IACX,OAAOC,SAAS;EAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}