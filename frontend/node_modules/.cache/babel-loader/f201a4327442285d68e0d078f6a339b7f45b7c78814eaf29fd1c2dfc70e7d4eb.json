{"ast":null,"code":"import { getReadableAsTypedArray, getReadableFromProtocolStream } from '../common/util.js';\nimport { assert } from '../util/assert.js';\nimport { Deferred } from '../util/Deferred.js';\nimport { isErrorLike } from '../util/ErrorLike.js';\n/**\n * The Tracing class exposes the tracing audit interface.\n * @remarks\n * You can use `tracing.start` and `tracing.stop` to create a trace file\n * which can be opened in Chrome DevTools or {@link https://chromedevtools.github.io/timeline-viewer/ | timeline viewer}.\n *\n * @example\n *\n * ```ts\n * await page.tracing.start({path: 'trace.json'});\n * await page.goto('https://www.google.com');\n * await page.tracing.stop();\n * ```\n *\n * @public\n */\nexport class Tracing {\n  #client;\n  #recording = false;\n  #path;\n  /**\n   * @internal\n   */\n  constructor(client) {\n    this.#client = client;\n  }\n  /**\n   * @internal\n   */\n  updateClient(client) {\n    this.#client = client;\n  }\n  /**\n   * Starts a trace for the current page.\n   * @remarks\n   * Only one trace can be active at a time per browser.\n   *\n   * @param options - Optional `TracingOptions`.\n   */\n  async start(options = {}) {\n    assert(!this.#recording, 'Cannot start recording trace while already recording trace.');\n    const defaultCategories = ['-*', 'devtools.timeline', 'v8.execute', 'disabled-by-default-devtools.timeline', 'disabled-by-default-devtools.timeline.frame', 'toplevel', 'blink.console', 'blink.user_timing', 'latencyInfo', 'disabled-by-default-devtools.timeline.stack', 'disabled-by-default-v8.cpu_profiler'];\n    const {\n      path,\n      screenshots = false,\n      categories = defaultCategories\n    } = options;\n    if (screenshots) {\n      categories.push('disabled-by-default-devtools.screenshot');\n    }\n    const excludedCategories = categories.filter(cat => {\n      return cat.startsWith('-');\n    }).map(cat => {\n      return cat.slice(1);\n    });\n    const includedCategories = categories.filter(cat => {\n      return !cat.startsWith('-');\n    });\n    this.#path = path;\n    this.#recording = true;\n    await this.#client.send('Tracing.start', {\n      transferMode: 'ReturnAsStream',\n      traceConfig: {\n        excludedCategories,\n        includedCategories\n      }\n    });\n  }\n  /**\n   * Stops a trace started with the `start` method.\n   * @returns Promise which resolves to buffer with trace data.\n   */\n  async stop() {\n    const contentDeferred = Deferred.create();\n    this.#client.once('Tracing.tracingComplete', async event => {\n      try {\n        assert(event.stream, 'Missing \"stream\"');\n        const readable = await getReadableFromProtocolStream(this.#client, event.stream);\n        const typedArray = await getReadableAsTypedArray(readable, this.#path);\n        contentDeferred.resolve(typedArray ?? undefined);\n      } catch (error) {\n        if (isErrorLike(error)) {\n          contentDeferred.reject(error);\n        } else {\n          contentDeferred.reject(new Error(`Unknown error: ${error}`));\n        }\n      }\n    });\n    await this.#client.send('Tracing.end');\n    this.#recording = false;\n    return await contentDeferred.valueOrThrow();\n  }\n}","map":{"version":3,"names":["getReadableAsTypedArray","getReadableFromProtocolStream","assert","Deferred","isErrorLike","Tracing","client","recording","path","constructor","updateClient","start","options","defaultCategories","screenshots","categories","push","excludedCategories","filter","cat","startsWith","map","slice","includedCategories","send","transferMode","traceConfig","stop","contentDeferred","create","once","event","stream","readable","typedArray","resolve","undefined","error","reject","Error","valueOrThrow"],"sources":["C:\\Users\\raffy\\Desktop\\test\\node_modules\\puppeteer-core\\src\\cdp\\Tracing.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport type {CDPSession} from '../api/CDPSession.js';\nimport {\n  getReadableAsTypedArray,\n  getReadableFromProtocolStream,\n} from '../common/util.js';\nimport {assert} from '../util/assert.js';\nimport {Deferred} from '../util/Deferred.js';\nimport {isErrorLike} from '../util/ErrorLike.js';\n\n/**\n * @public\n */\nexport interface TracingOptions {\n  path?: string;\n  screenshots?: boolean;\n  categories?: string[];\n}\n\n/**\n * The Tracing class exposes the tracing audit interface.\n * @remarks\n * You can use `tracing.start` and `tracing.stop` to create a trace file\n * which can be opened in Chrome DevTools or {@link https://chromedevtools.github.io/timeline-viewer/ | timeline viewer}.\n *\n * @example\n *\n * ```ts\n * await page.tracing.start({path: 'trace.json'});\n * await page.goto('https://www.google.com');\n * await page.tracing.stop();\n * ```\n *\n * @public\n */\nexport class Tracing {\n  #client: CDPSession;\n  #recording = false;\n  #path?: string;\n\n  /**\n   * @internal\n   */\n  constructor(client: CDPSession) {\n    this.#client = client;\n  }\n\n  /**\n   * @internal\n   */\n  updateClient(client: CDPSession): void {\n    this.#client = client;\n  }\n\n  /**\n   * Starts a trace for the current page.\n   * @remarks\n   * Only one trace can be active at a time per browser.\n   *\n   * @param options - Optional `TracingOptions`.\n   */\n  async start(options: TracingOptions = {}): Promise<void> {\n    assert(\n      !this.#recording,\n      'Cannot start recording trace while already recording trace.'\n    );\n\n    const defaultCategories = [\n      '-*',\n      'devtools.timeline',\n      'v8.execute',\n      'disabled-by-default-devtools.timeline',\n      'disabled-by-default-devtools.timeline.frame',\n      'toplevel',\n      'blink.console',\n      'blink.user_timing',\n      'latencyInfo',\n      'disabled-by-default-devtools.timeline.stack',\n      'disabled-by-default-v8.cpu_profiler',\n    ];\n    const {path, screenshots = false, categories = defaultCategories} = options;\n\n    if (screenshots) {\n      categories.push('disabled-by-default-devtools.screenshot');\n    }\n\n    const excludedCategories = categories\n      .filter(cat => {\n        return cat.startsWith('-');\n      })\n      .map(cat => {\n        return cat.slice(1);\n      });\n    const includedCategories = categories.filter(cat => {\n      return !cat.startsWith('-');\n    });\n\n    this.#path = path;\n    this.#recording = true;\n    await this.#client.send('Tracing.start', {\n      transferMode: 'ReturnAsStream',\n      traceConfig: {\n        excludedCategories,\n        includedCategories,\n      },\n    });\n  }\n\n  /**\n   * Stops a trace started with the `start` method.\n   * @returns Promise which resolves to buffer with trace data.\n   */\n  async stop(): Promise<Uint8Array | undefined> {\n    const contentDeferred = Deferred.create<Uint8Array | undefined>();\n    this.#client.once('Tracing.tracingComplete', async event => {\n      try {\n        assert(event.stream, 'Missing \"stream\"');\n        const readable = await getReadableFromProtocolStream(\n          this.#client,\n          event.stream\n        );\n        const typedArray = await getReadableAsTypedArray(readable, this.#path);\n        contentDeferred.resolve(typedArray ?? undefined);\n      } catch (error) {\n        if (isErrorLike(error)) {\n          contentDeferred.reject(error);\n        } else {\n          contentDeferred.reject(new Error(`Unknown error: ${error}`));\n        }\n      }\n    });\n    await this.#client.send('Tracing.end');\n    this.#recording = false;\n    return await contentDeferred.valueOrThrow();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}