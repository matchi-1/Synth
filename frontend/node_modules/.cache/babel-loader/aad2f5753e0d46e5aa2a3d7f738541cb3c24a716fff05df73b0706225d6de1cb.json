{"ast":null,"code":"/**\n * @license\n * Copyright 2024 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Deferred } from './Deferred.js';\nimport { disposeSymbol } from './disposable.js';\n/**\n * @internal\n */\nexport class Mutex {\n  static Guard = class Guard {\n    #mutex;\n    #onRelease;\n    constructor(mutex, onRelease) {\n      this.#mutex = mutex;\n      this.#onRelease = onRelease;\n    }\n    [disposeSymbol]() {\n      this.#onRelease?.();\n      return this.#mutex.release();\n    }\n  };\n  #locked = false;\n  #acquirers = [];\n  // This is FIFO.\n  async acquire(onRelease) {\n    if (!this.#locked) {\n      this.#locked = true;\n      return new Mutex.Guard(this);\n    }\n    const deferred = Deferred.create();\n    this.#acquirers.push(deferred.resolve.bind(deferred));\n    await deferred.valueOrThrow();\n    return new Mutex.Guard(this, onRelease);\n  }\n  release() {\n    const resolve = this.#acquirers.shift();\n    if (!resolve) {\n      this.#locked = false;\n      return;\n    }\n    resolve();\n  }\n}","map":{"version":3,"names":["Deferred","disposeSymbol","Mutex","Guard","mutex","onRelease","constructor","release","locked","acquirers","acquire","deferred","create","push","resolve","bind","valueOrThrow","shift"],"sources":["C:\\Users\\raffy\\Desktop\\test\\node_modules\\puppeteer-core\\src\\util\\Mutex.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2024 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {Deferred} from './Deferred.js';\nimport {disposeSymbol} from './disposable.js';\n\n/**\n * @internal\n */\nexport class Mutex {\n  static Guard = class Guard {\n    #mutex: Mutex;\n    #onRelease?: () => void;\n    constructor(mutex: Mutex, onRelease?: () => void) {\n      this.#mutex = mutex;\n      this.#onRelease = onRelease;\n    }\n    [disposeSymbol](): void {\n      this.#onRelease?.();\n      return this.#mutex.release();\n    }\n  };\n\n  #locked = false;\n  #acquirers: Array<() => void> = [];\n\n  // This is FIFO.\n  async acquire(\n    onRelease?: () => void\n  ): Promise<InstanceType<typeof Mutex.Guard>> {\n    if (!this.#locked) {\n      this.#locked = true;\n      return new Mutex.Guard(this);\n    }\n    const deferred = Deferred.create<void>();\n    this.#acquirers.push(deferred.resolve.bind(deferred));\n    await deferred.valueOrThrow();\n    return new Mutex.Guard(this, onRelease);\n  }\n\n  release(): void {\n    const resolve = this.#acquirers.shift();\n    if (!resolve) {\n      this.#locked = false;\n      return;\n    }\n    resolve();\n  }\n}\n"],"mappings":"AAAA;;;;;AAKA,SAAQA,QAAQ,QAAO,eAAe;AACtC,SAAQC,aAAa,QAAO,iBAAiB;AAE7C;;;AAGA,OAAM,MAAOC,KAAK;EAChB,OAAOC,KAAK,GAAG,MAAMA,KAAK;IACxB,CAAAC,KAAM;IACN,CAAAC,SAAU;IACVC,YAAYF,KAAY,EAAEC,SAAsB;MAC9C,IAAI,CAAC,CAAAD,KAAM,GAAGA,KAAK;MACnB,IAAI,CAAC,CAAAC,SAAU,GAAGA,SAAS;IAC7B;IACA,CAACJ,aAAa,IAAC;MACb,IAAI,CAAC,CAAAI,SAAU,GAAE,CAAE;MACnB,OAAO,IAAI,CAAC,CAAAD,KAAM,CAACG,OAAO,EAAE;IAC9B;GACD;EAED,CAAAC,MAAO,GAAG,KAAK;EACf,CAAAC,SAAU,GAAsB,EAAE;EAElC;EACA,MAAMC,OAAOA,CACXL,SAAsB;IAEtB,IAAI,CAAC,IAAI,CAAC,CAAAG,MAAO,EAAE;MACjB,IAAI,CAAC,CAAAA,MAAO,GAAG,IAAI;MACnB,OAAO,IAAIN,KAAK,CAACC,KAAK,CAAC,IAAI,CAAC;IAC9B;IACA,MAAMQ,QAAQ,GAAGX,QAAQ,CAACY,MAAM,EAAQ;IACxC,IAAI,CAAC,CAAAH,SAAU,CAACI,IAAI,CAACF,QAAQ,CAACG,OAAO,CAACC,IAAI,CAACJ,QAAQ,CAAC,CAAC;IACrD,MAAMA,QAAQ,CAACK,YAAY,EAAE;IAC7B,OAAO,IAAId,KAAK,CAACC,KAAK,CAAC,IAAI,EAAEE,SAAS,CAAC;EACzC;EAEAE,OAAOA,CAAA;IACL,MAAMO,OAAO,GAAG,IAAI,CAAC,CAAAL,SAAU,CAACQ,KAAK,EAAE;IACvC,IAAI,CAACH,OAAO,EAAE;MACZ,IAAI,CAAC,CAAAN,MAAO,GAAG,KAAK;MACpB;IACF;IACAM,OAAO,EAAE;EACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}