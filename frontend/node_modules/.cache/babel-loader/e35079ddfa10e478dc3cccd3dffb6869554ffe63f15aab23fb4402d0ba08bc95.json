{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nexport {};","map":{"version":3,"names":[],"sources":["C:\\Users\\raffy\\Desktop\\test\\node_modules\\puppeteer-core\\src\\common\\types.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {ParseSelector} from 'typed-query-selector/parser.js';\n\nimport type {ElementHandle} from '../api/ElementHandle.js';\nimport type {JSHandle} from '../api/JSHandle.js';\n\nimport type {LazyArg} from './LazyArg.js';\n\n/**\n * @public\n */\nexport type AwaitablePredicate<T> = (value: T) => Awaitable<boolean>;\n\n/**\n * @public\n */\nexport interface Moveable {\n  /**\n   * Moves the resource when 'using'.\n   */\n  move(): this;\n}\n\n/**\n * @internal\n */\nexport interface Disposed {\n  get disposed(): boolean;\n}\n\n/**\n * @internal\n */\nexport interface BindingPayload {\n  type: string;\n  name: string;\n  seq: number;\n  args: unknown[];\n  /**\n   * Determines whether the arguments of the payload are trivial.\n   */\n  isTrivial: boolean;\n}\n\n/**\n * @internal\n */\nexport type AwaitableIterator<T> = Iterator<T> | AsyncIterator<T>;\n\n/**\n * @public\n */\nexport type AwaitableIterable<T> = Iterable<T> | AsyncIterable<T>;\n\n/**\n * @public\n */\nexport type Awaitable<T> = T | PromiseLike<T>;\n\n/**\n * @public\n */\nexport type HandleFor<T> = T extends Node ? ElementHandle<T> : JSHandle<T>;\n\n/**\n * @public\n */\nexport type HandleOr<T> = HandleFor<T> | JSHandle<T> | T;\n\n/**\n * @public\n */\nexport type FlattenHandle<T> = T extends HandleOr<infer U> ? U : never;\n\n/**\n * @internal\n */\nexport type FlattenLazyArg<T> = T extends LazyArg<infer U> ? U : T;\n\n/**\n * @internal\n */\nexport type InnerLazyParams<T extends unknown[]> = {\n  [K in keyof T]: FlattenLazyArg<T[K]>;\n};\n\n/**\n * @public\n */\nexport type InnerParams<T extends unknown[]> = {\n  [K in keyof T]: FlattenHandle<T[K]>;\n};\n\n/**\n * @public\n */\nexport type ElementFor<\n  TagName extends keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap,\n> = TagName extends keyof HTMLElementTagNameMap\n  ? HTMLElementTagNameMap[TagName]\n  : TagName extends keyof SVGElementTagNameMap\n    ? SVGElementTagNameMap[TagName]\n    : never;\n\n/**\n * @public\n */\nexport type EvaluateFunc<T extends unknown[]> = (\n  ...params: InnerParams<T>\n) => Awaitable<unknown>;\n\n/**\n * @public\n */\nexport type EvaluateFuncWith<V, T extends unknown[]> = (\n  ...params: [V, ...InnerParams<T>]\n) => Awaitable<unknown>;\n\n/**\n * @public\n */\nexport type NodeFor<ComplexSelector extends string> =\n  ParseSelector<ComplexSelector>;\n"],"mappings":"AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}