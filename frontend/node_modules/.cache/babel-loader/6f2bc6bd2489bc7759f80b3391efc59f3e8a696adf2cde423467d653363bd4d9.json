{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { assert } from '../util/assert.js';\n/**\n * File choosers let you react to the page requesting for a file.\n *\n * @remarks\n * `FileChooser` instances are returned via the {@link Page.waitForFileChooser} method.\n *\n * In browsers, only one file chooser can be opened at a time.\n * All file choosers must be accepted or canceled. Not doing so will prevent\n * subsequent file choosers from appearing.\n *\n * @example\n *\n * ```ts\n * const [fileChooser] = await Promise.all([\n *   page.waitForFileChooser(),\n *   page.click('#upload-file-button'), // some button that triggers file selection\n * ]);\n * await fileChooser.accept(['/tmp/myfile.pdf']);\n * ```\n *\n * @public\n */\nexport class FileChooser {\n  #element;\n  #multiple;\n  #handled = false;\n  /**\n   * @internal\n   */\n  constructor(element, event) {\n    this.#element = element;\n    this.#multiple = event.mode !== 'selectSingle';\n  }\n  /**\n   * Whether file chooser allow for\n   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-multiple | multiple}\n   * file selection.\n   */\n  isMultiple() {\n    return this.#multiple;\n  }\n  /**\n   * Accept the file chooser request with the given file paths.\n   *\n   * @remarks This will not validate whether the file paths exists. Also, if a\n   * path is relative, then it is resolved against the\n   * {@link https://nodejs.org/api/process.html#process_process_cwd | current working directory}.\n   * For locals script connecting to remote chrome environments, paths must be\n   * absolute.\n   */\n  async accept(paths) {\n    assert(!this.#handled, 'Cannot accept FileChooser which is already handled!');\n    this.#handled = true;\n    await this.#element.uploadFile(...paths);\n  }\n  /**\n   * Closes the file chooser without selecting any files.\n   */\n  async cancel() {\n    assert(!this.#handled, 'Cannot cancel FileChooser which is already handled!');\n    this.#handled = true;\n    // XXX: These events should converted to trusted events. Perhaps do this\n    // in `DOM.setFileInputFiles`?\n    await this.#element.evaluate(element => {\n      element.dispatchEvent(new Event('cancel', {\n        bubbles: true\n      }));\n    });\n  }\n}","map":{"version":3,"names":["assert","FileChooser","element","multiple","handled","constructor","event","mode","isMultiple","accept","paths","uploadFile","cancel","evaluate","dispatchEvent","Event","bubbles"],"sources":["C:\\Users\\raffy\\Desktop\\test\\node_modules\\puppeteer-core\\src\\common\\FileChooser.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {ElementHandle} from '../api/ElementHandle.js';\nimport {assert} from '../util/assert.js';\n\n/**\n * File choosers let you react to the page requesting for a file.\n *\n * @remarks\n * `FileChooser` instances are returned via the {@link Page.waitForFileChooser} method.\n *\n * In browsers, only one file chooser can be opened at a time.\n * All file choosers must be accepted or canceled. Not doing so will prevent\n * subsequent file choosers from appearing.\n *\n * @example\n *\n * ```ts\n * const [fileChooser] = await Promise.all([\n *   page.waitForFileChooser(),\n *   page.click('#upload-file-button'), // some button that triggers file selection\n * ]);\n * await fileChooser.accept(['/tmp/myfile.pdf']);\n * ```\n *\n * @public\n */\nexport class FileChooser {\n  #element: ElementHandle<HTMLInputElement>;\n  #multiple: boolean;\n  #handled = false;\n\n  /**\n   * @internal\n   */\n  constructor(\n    element: ElementHandle<HTMLInputElement>,\n    event: Protocol.Page.FileChooserOpenedEvent\n  ) {\n    this.#element = element;\n    this.#multiple = event.mode !== 'selectSingle';\n  }\n\n  /**\n   * Whether file chooser allow for\n   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-multiple | multiple}\n   * file selection.\n   */\n  isMultiple(): boolean {\n    return this.#multiple;\n  }\n\n  /**\n   * Accept the file chooser request with the given file paths.\n   *\n   * @remarks This will not validate whether the file paths exists. Also, if a\n   * path is relative, then it is resolved against the\n   * {@link https://nodejs.org/api/process.html#process_process_cwd | current working directory}.\n   * For locals script connecting to remote chrome environments, paths must be\n   * absolute.\n   */\n  async accept(paths: string[]): Promise<void> {\n    assert(\n      !this.#handled,\n      'Cannot accept FileChooser which is already handled!'\n    );\n    this.#handled = true;\n    await this.#element.uploadFile(...paths);\n  }\n\n  /**\n   * Closes the file chooser without selecting any files.\n   */\n  async cancel(): Promise<void> {\n    assert(\n      !this.#handled,\n      'Cannot cancel FileChooser which is already handled!'\n    );\n    this.#handled = true;\n    // XXX: These events should converted to trusted events. Perhaps do this\n    // in `DOM.setFileInputFiles`?\n    await this.#element.evaluate(element => {\n      element.dispatchEvent(new Event('cancel', {bubbles: true}));\n    });\n  }\n}\n"],"mappings":"AAAA;;;;;AASA,SAAQA,MAAM,QAAO,mBAAmB;AAExC;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,MAAOC,WAAW;EACtB,CAAAC,OAAQ;EACR,CAAAC,QAAS;EACT,CAAAC,OAAQ,GAAG,KAAK;EAEhB;;;EAGAC,YACEH,OAAwC,EACxCI,KAA2C;IAE3C,IAAI,CAAC,CAAAJ,OAAQ,GAAGA,OAAO;IACvB,IAAI,CAAC,CAAAC,QAAS,GAAGG,KAAK,CAACC,IAAI,KAAK,cAAc;EAChD;EAEA;;;;;EAKAC,UAAUA,CAAA;IACR,OAAO,IAAI,CAAC,CAAAL,QAAS;EACvB;EAEA;;;;;;;;;EASA,MAAMM,MAAMA,CAACC,KAAe;IAC1BV,MAAM,CACJ,CAAC,IAAI,CAAC,CAAAI,OAAQ,EACd,qDAAqD,CACtD;IACD,IAAI,CAAC,CAAAA,OAAQ,GAAG,IAAI;IACpB,MAAM,IAAI,CAAC,CAAAF,OAAQ,CAACS,UAAU,CAAC,GAAGD,KAAK,CAAC;EAC1C;EAEA;;;EAGA,MAAME,MAAMA,CAAA;IACVZ,MAAM,CACJ,CAAC,IAAI,CAAC,CAAAI,OAAQ,EACd,qDAAqD,CACtD;IACD,IAAI,CAAC,CAAAA,OAAQ,GAAG,IAAI;IACpB;IACA;IACA,MAAM,IAAI,CAAC,CAAAF,OAAQ,CAACW,QAAQ,CAACX,OAAO,IAAG;MACrCA,OAAO,CAACY,aAAa,CAAC,IAAIC,KAAK,CAAC,QAAQ,EAAE;QAACC,OAAO,EAAE;MAAI,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}