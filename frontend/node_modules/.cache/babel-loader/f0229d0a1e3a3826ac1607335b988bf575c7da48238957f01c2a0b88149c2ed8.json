{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMarkupChecksum\n */\n\n'use strict';\n\nvar adler32 = require(\"./adler32\");\nvar ReactMarkupChecksum = {\n  CHECKSUM_ATTR_NAME: 'data-react-checksum',\n  /**\n   * @param {string} markup Markup string\n   * @return {string} Markup string with checksum attribute attached\n   */\n  addChecksumToMarkup: function (markup) {\n    var checksum = adler32(markup);\n    return markup.replace('>', ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"' + checksum + '\">');\n  },\n  /**\n   * @param {string} markup to use\n   * @param {DOMElement} element root React element\n   * @returns {boolean} whether or not the markup is the same\n   */\n  canReuseMarkup: function (markup, element) {\n    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);\n    var markupChecksum = adler32(markup);\n    return markupChecksum === existingChecksum;\n  }\n};\nmodule.exports = ReactMarkupChecksum;","map":{"version":3,"names":["adler32","require","ReactMarkupChecksum","CHECKSUM_ATTR_NAME","addChecksumToMarkup","markup","checksum","replace","canReuseMarkup","element","existingChecksum","getAttribute","parseInt","markupChecksum","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/ReactMarkupChecksum.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMarkupChecksum\n */\n\n'use strict';\n\nvar adler32 = require(\"./adler32\");\n\nvar ReactMarkupChecksum = {\n  CHECKSUM_ATTR_NAME: 'data-react-checksum',\n\n  /**\n   * @param {string} markup Markup string\n   * @return {string} Markup string with checksum attribute attached\n   */\n  addChecksumToMarkup: function(markup) {\n    var checksum = adler32(markup);\n    return markup.replace(\n      '>',\n      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"' + checksum + '\">'\n    );\n  },\n\n  /**\n   * @param {string} markup to use\n   * @param {DOMElement} element root React element\n   * @returns {boolean} whether or not the markup is the same\n   */\n  canReuseMarkup: function(markup, element) {\n    var existingChecksum = element.getAttribute(\n      ReactMarkupChecksum.CHECKSUM_ATTR_NAME\n    );\n    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);\n    var markupChecksum = adler32(markup);\n    return markupChecksum === existingChecksum;\n  }\n};\n\nmodule.exports = ReactMarkupChecksum;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;AAElC,IAAIC,mBAAmB,GAAG;EACxBC,kBAAkB,EAAE,qBAAqB;EAEzC;AACF;AACA;AACA;EACEC,mBAAmB,EAAE,SAAAA,CAASC,MAAM,EAAE;IACpC,IAAIC,QAAQ,GAAGN,OAAO,CAACK,MAAM,CAAC;IAC9B,OAAOA,MAAM,CAACE,OAAO,CACnB,GAAG,EACH,GAAG,GAAGL,mBAAmB,CAACC,kBAAkB,GAAG,IAAI,GAAGG,QAAQ,GAAG,IACnE,CAAC;EACH,CAAC;EAED;AACF;AACA;AACA;AACA;EACEE,cAAc,EAAE,SAAAA,CAASH,MAAM,EAAEI,OAAO,EAAE;IACxC,IAAIC,gBAAgB,GAAGD,OAAO,CAACE,YAAY,CACzCT,mBAAmB,CAACC,kBACtB,CAAC;IACDO,gBAAgB,GAAGA,gBAAgB,IAAIE,QAAQ,CAACF,gBAAgB,EAAE,EAAE,CAAC;IACrE,IAAIG,cAAc,GAAGb,OAAO,CAACK,MAAM,CAAC;IACpC,OAAOQ,cAAc,KAAKH,gBAAgB;EAC5C;AACF,CAAC;AAEDI,MAAM,CAACC,OAAO,GAAGb,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}