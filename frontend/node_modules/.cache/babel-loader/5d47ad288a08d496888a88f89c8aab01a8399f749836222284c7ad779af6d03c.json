{"ast":null,"code":"/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEmptyComponent\n */\n\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\nvar invariant = require(\"./invariant\");\nvar component;\n// This registry keeps track of the React IDs of the components that rendered to\n// `null` (in reality a placeholder such as `noscript`)\nvar nullComponentIDsRegistry = {};\nvar ReactEmptyComponentInjection = {\n  injectEmptyComponent: function (emptyComponent) {\n    component = ReactElement.createFactory(emptyComponent);\n  }\n};\nvar ReactEmptyComponentType = function () {};\nReactEmptyComponentType.prototype.componentDidMount = function () {\n  var internalInstance = ReactInstanceMap.get(this);\n  // TODO: Make sure we run these methods in the correct order, we shouldn't\n  // need this check. We're going to assume if we're here it means we ran\n  // componentWillUnmount already so there is no internal instance (it gets\n  // removed as part of the unmounting process).\n  if (!internalInstance) {\n    return;\n  }\n  registerNullComponentID(internalInstance._rootNodeID);\n};\nReactEmptyComponentType.prototype.componentWillUnmount = function () {\n  var internalInstance = ReactInstanceMap.get(this);\n  // TODO: Get rid of this check. See TODO in componentDidMount.\n  if (!internalInstance) {\n    return;\n  }\n  deregisterNullComponentID(internalInstance._rootNodeID);\n};\nReactEmptyComponentType.prototype.render = function () {\n  \"production\" !== process.env.NODE_ENV ? invariant(component, 'Trying to return null from a render, but no null placeholder component ' + 'was injected.') : invariant(component);\n  return component();\n};\nvar emptyElement = ReactElement.createElement(ReactEmptyComponentType);\n\n/**\n * Mark the component as having rendered to null.\n * @param {string} id Component's `_rootNodeID`.\n */\nfunction registerNullComponentID(id) {\n  nullComponentIDsRegistry[id] = true;\n}\n\n/**\n * Unmark the component as having rendered to null: it renders to something now.\n * @param {string} id Component's `_rootNodeID`.\n */\nfunction deregisterNullComponentID(id) {\n  delete nullComponentIDsRegistry[id];\n}\n\n/**\n * @param {string} id Component's `_rootNodeID`.\n * @return {boolean} True if the component is rendered to null.\n */\nfunction isNullComponentID(id) {\n  return !!nullComponentIDsRegistry[id];\n}\nvar ReactEmptyComponent = {\n  emptyElement: emptyElement,\n  injection: ReactEmptyComponentInjection,\n  isNullComponentID: isNullComponentID\n};\nmodule.exports = ReactEmptyComponent;","map":{"version":3,"names":["ReactElement","require","ReactInstanceMap","invariant","component","nullComponentIDsRegistry","ReactEmptyComponentInjection","injectEmptyComponent","emptyComponent","createFactory","ReactEmptyComponentType","prototype","componentDidMount","internalInstance","get","registerNullComponentID","_rootNodeID","componentWillUnmount","deregisterNullComponentID","render","process","env","NODE_ENV","emptyElement","createElement","id","isNullComponentID","ReactEmptyComponent","injection","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/ReactEmptyComponent.js"],"sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEmptyComponent\n */\n\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\n\nvar invariant = require(\"./invariant\");\n\nvar component;\n// This registry keeps track of the React IDs of the components that rendered to\n// `null` (in reality a placeholder such as `noscript`)\nvar nullComponentIDsRegistry = {};\n\nvar ReactEmptyComponentInjection = {\n  injectEmptyComponent: function(emptyComponent) {\n    component = ReactElement.createFactory(emptyComponent);\n  }\n};\n\nvar ReactEmptyComponentType = function() {};\nReactEmptyComponentType.prototype.componentDidMount = function() {\n  var internalInstance = ReactInstanceMap.get(this);\n  // TODO: Make sure we run these methods in the correct order, we shouldn't\n  // need this check. We're going to assume if we're here it means we ran\n  // componentWillUnmount already so there is no internal instance (it gets\n  // removed as part of the unmounting process).\n  if (!internalInstance) {\n    return;\n  }\n  registerNullComponentID(internalInstance._rootNodeID);\n};\nReactEmptyComponentType.prototype.componentWillUnmount = function() {\n  var internalInstance = ReactInstanceMap.get(this);\n  // TODO: Get rid of this check. See TODO in componentDidMount.\n  if (!internalInstance) {\n    return;\n  }\n  deregisterNullComponentID(internalInstance._rootNodeID);\n};\nReactEmptyComponentType.prototype.render = function() {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    component,\n    'Trying to return null from a render, but no null placeholder component ' +\n    'was injected.'\n  ) : invariant(component));\n  return component();\n};\n\nvar emptyElement = ReactElement.createElement(ReactEmptyComponentType);\n\n/**\n * Mark the component as having rendered to null.\n * @param {string} id Component's `_rootNodeID`.\n */\nfunction registerNullComponentID(id) {\n  nullComponentIDsRegistry[id] = true;\n}\n\n/**\n * Unmark the component as having rendered to null: it renders to something now.\n * @param {string} id Component's `_rootNodeID`.\n */\nfunction deregisterNullComponentID(id) {\n  delete nullComponentIDsRegistry[id];\n}\n\n/**\n * @param {string} id Component's `_rootNodeID`.\n * @return {boolean} True if the component is rendered to null.\n */\nfunction isNullComponentID(id) {\n  return !!nullComponentIDsRegistry[id];\n}\n\nvar ReactEmptyComponent = {\n  emptyElement: emptyElement,\n  injection: ReactEmptyComponentInjection,\n  isNullComponentID: isNullComponentID\n};\n\nmodule.exports = ReactEmptyComponent;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC5C,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAEpD,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAa,CAAC;AAEtC,IAAIG,SAAS;AACb;AACA;AACA,IAAIC,wBAAwB,GAAG,CAAC,CAAC;AAEjC,IAAIC,4BAA4B,GAAG;EACjCC,oBAAoB,EAAE,SAAAA,CAASC,cAAc,EAAE;IAC7CJ,SAAS,GAAGJ,YAAY,CAACS,aAAa,CAACD,cAAc,CAAC;EACxD;AACF,CAAC;AAED,IAAIE,uBAAuB,GAAG,SAAAA,CAAA,EAAW,CAAC,CAAC;AAC3CA,uBAAuB,CAACC,SAAS,CAACC,iBAAiB,GAAG,YAAW;EAC/D,IAAIC,gBAAgB,GAAGX,gBAAgB,CAACY,GAAG,CAAC,IAAI,CAAC;EACjD;EACA;EACA;EACA;EACA,IAAI,CAACD,gBAAgB,EAAE;IACrB;EACF;EACAE,uBAAuB,CAACF,gBAAgB,CAACG,WAAW,CAAC;AACvD,CAAC;AACDN,uBAAuB,CAACC,SAAS,CAACM,oBAAoB,GAAG,YAAW;EAClE,IAAIJ,gBAAgB,GAAGX,gBAAgB,CAACY,GAAG,CAAC,IAAI,CAAC;EACjD;EACA,IAAI,CAACD,gBAAgB,EAAE;IACrB;EACF;EACAK,yBAAyB,CAACL,gBAAgB,CAACG,WAAW,CAAC;AACzD,CAAC;AACDN,uBAAuB,CAACC,SAAS,CAACQ,MAAM,GAAG,YAAW;EACnD,YAAY,KAAKC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAGnB,SAAS,CAChDC,SAAS,EACT,yEAAyE,GACzE,eACF,CAAC,GAAGD,SAAS,CAACC,SAAS,CAAC;EACxB,OAAOA,SAAS,CAAC,CAAC;AACpB,CAAC;AAED,IAAImB,YAAY,GAAGvB,YAAY,CAACwB,aAAa,CAACd,uBAAuB,CAAC;;AAEtE;AACA;AACA;AACA;AACA,SAASK,uBAAuBA,CAACU,EAAE,EAAE;EACnCpB,wBAAwB,CAACoB,EAAE,CAAC,GAAG,IAAI;AACrC;;AAEA;AACA;AACA;AACA;AACA,SAASP,yBAAyBA,CAACO,EAAE,EAAE;EACrC,OAAOpB,wBAAwB,CAACoB,EAAE,CAAC;AACrC;;AAEA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACD,EAAE,EAAE;EAC7B,OAAO,CAAC,CAACpB,wBAAwB,CAACoB,EAAE,CAAC;AACvC;AAEA,IAAIE,mBAAmB,GAAG;EACxBJ,YAAY,EAAEA,YAAY;EAC1BK,SAAS,EAAEtB,4BAA4B;EACvCoB,iBAAiB,EAAEA;AACrB,CAAC;AAEDG,MAAM,CAACC,OAAO,GAAGH,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}