{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule containsNode\n * @typechecks\n */\n\nvar isTextNode = require(\"./isTextNode\");\n\n/*jslint bitwise:true */\n\n/**\n * Checks if a given DOM node contains or is another DOM node.\n *\n * @param {?DOMNode} outerNode Outer DOM node.\n * @param {?DOMNode} innerNode Inner DOM node.\n * @return {boolean} True if `outerNode` contains or is `innerNode`.\n */\nfunction containsNode(outerNode, innerNode) {\n  if (!outerNode || !innerNode) {\n    return false;\n  } else if (outerNode === innerNode) {\n    return true;\n  } else if (isTextNode(outerNode)) {\n    return false;\n  } else if (isTextNode(innerNode)) {\n    return containsNode(outerNode, innerNode.parentNode);\n  } else if (outerNode.contains) {\n    return outerNode.contains(innerNode);\n  } else if (outerNode.compareDocumentPosition) {\n    return !!(outerNode.compareDocumentPosition(innerNode) & 16);\n  } else {\n    return false;\n  }\n}\nmodule.exports = containsNode;","map":{"version":3,"names":["isTextNode","require","containsNode","outerNode","innerNode","parentNode","contains","compareDocumentPosition","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/containsNode.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule containsNode\n * @typechecks\n */\n\nvar isTextNode = require(\"./isTextNode\");\n\n/*jslint bitwise:true */\n\n/**\n * Checks if a given DOM node contains or is another DOM node.\n *\n * @param {?DOMNode} outerNode Outer DOM node.\n * @param {?DOMNode} innerNode Inner DOM node.\n * @return {boolean} True if `outerNode` contains or is `innerNode`.\n */\nfunction containsNode(outerNode, innerNode) {\n  if (!outerNode || !innerNode) {\n    return false;\n  } else if (outerNode === innerNode) {\n    return true;\n  } else if (isTextNode(outerNode)) {\n    return false;\n  } else if (isTextNode(innerNode)) {\n    return containsNode(outerNode, innerNode.parentNode);\n  } else if (outerNode.contains) {\n    return outerNode.contains(innerNode);\n  } else if (outerNode.compareDocumentPosition) {\n    return !!(outerNode.compareDocumentPosition(innerNode) & 16);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = containsNode;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;;AAExC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAACC,SAAS,EAAEC,SAAS,EAAE;EAC1C,IAAI,CAACD,SAAS,IAAI,CAACC,SAAS,EAAE;IAC5B,OAAO,KAAK;EACd,CAAC,MAAM,IAAID,SAAS,KAAKC,SAAS,EAAE;IAClC,OAAO,IAAI;EACb,CAAC,MAAM,IAAIJ,UAAU,CAACG,SAAS,CAAC,EAAE;IAChC,OAAO,KAAK;EACd,CAAC,MAAM,IAAIH,UAAU,CAACI,SAAS,CAAC,EAAE;IAChC,OAAOF,YAAY,CAACC,SAAS,EAAEC,SAAS,CAACC,UAAU,CAAC;EACtD,CAAC,MAAM,IAAIF,SAAS,CAACG,QAAQ,EAAE;IAC7B,OAAOH,SAAS,CAACG,QAAQ,CAACF,SAAS,CAAC;EACtC,CAAC,MAAM,IAAID,SAAS,CAACI,uBAAuB,EAAE;IAC5C,OAAO,CAAC,EAAEJ,SAAS,CAACI,uBAAuB,CAACH,SAAS,CAAC,GAAG,EAAE,CAAC;EAC9D,CAAC,MAAM;IACL,OAAO,KAAK;EACd;AACF;AAEAI,MAAM,CAACC,OAAO,GAAGP,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}