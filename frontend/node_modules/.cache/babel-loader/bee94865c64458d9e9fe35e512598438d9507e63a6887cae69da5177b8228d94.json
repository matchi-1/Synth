{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule setInnerHTML\n */\n\n/* globals MSApp */\n\n'use strict';\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar WHITESPACE_TEST = /^[ \\r\\n\\t\\f]/;\nvar NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \\r\\n\\t\\f\\/>]/;\n\n/**\n * Set the innerHTML property of a node, ensuring that whitespace is preserved\n * even in IE8.\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\nvar setInnerHTML = function (node, html) {\n  node.innerHTML = html;\n};\n\n// Win8 apps: Allow all html to be inserted\nif (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {\n  setInnerHTML = function (node, html) {\n    MSApp.execUnsafeLocalFunction(function () {\n      node.innerHTML = html;\n    });\n  };\n}\nif (ExecutionEnvironment.canUseDOM) {\n  // IE8: When updating a just created node with innerHTML only leading\n  // whitespace is removed. When updating an existing node with innerHTML\n  // whitespace in root TextNodes is also collapsed.\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html\n\n  // Feature detection; only IE8 is known to behave improperly like this.\n  var testElement = document.createElement('div');\n  testElement.innerHTML = ' ';\n  if (testElement.innerHTML === '') {\n    setInnerHTML = function (node, html) {\n      // Magic theory: IE8 supposedly differentiates between added and updated\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers\n      // from worse whitespace behavior. Re-adding a node like this triggers\n      // the initial and more favorable whitespace behavior.\n      // TODO: What to do on a detached node?\n      if (node.parentNode) {\n        node.parentNode.replaceChild(node, node);\n      }\n\n      // We also implement a workaround for non-visible tags disappearing into\n      // thin air on IE8, this only happens if there is no visible text\n      // in-front of the non-visible tags. Piggyback on the whitespace fix\n      // and simply check if any non-visible tags appear in the source.\n      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {\n        // Recover leading whitespace by temporarily prepending any character.\n        // \\uFEFF has the potential advantage of being zero-width/invisible.\n        node.innerHTML = '\\uFEFF' + html;\n\n        // deleteData leaves an empty `TextNode` which offsets the index of all\n        // children. Definitely want to avoid this.\n        var textNode = node.firstChild;\n        if (textNode.data.length === 1) {\n          node.removeChild(textNode);\n        } else {\n          textNode.deleteData(0, 1);\n        }\n      } else {\n        node.innerHTML = html;\n      }\n    };\n  }\n}\nmodule.exports = setInnerHTML;","map":{"version":3,"names":["ExecutionEnvironment","require","WHITESPACE_TEST","NONVISIBLE_TEST","setInnerHTML","node","html","innerHTML","MSApp","execUnsafeLocalFunction","canUseDOM","testElement","document","createElement","parentNode","replaceChild","test","textNode","firstChild","data","length","removeChild","deleteData","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/setInnerHTML.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule setInnerHTML\n */\n\n/* globals MSApp */\n\n'use strict';\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar WHITESPACE_TEST = /^[ \\r\\n\\t\\f]/;\nvar NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \\r\\n\\t\\f\\/>]/;\n\n/**\n * Set the innerHTML property of a node, ensuring that whitespace is preserved\n * even in IE8.\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\nvar setInnerHTML = function(node, html) {\n  node.innerHTML = html;\n};\n\n// Win8 apps: Allow all html to be inserted\nif (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {\n  setInnerHTML = function(node, html) {\n    MSApp.execUnsafeLocalFunction(function() {\n      node.innerHTML = html;\n    });\n  };\n}\n\nif (ExecutionEnvironment.canUseDOM) {\n  // IE8: When updating a just created node with innerHTML only leading\n  // whitespace is removed. When updating an existing node with innerHTML\n  // whitespace in root TextNodes is also collapsed.\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html\n\n  // Feature detection; only IE8 is known to behave improperly like this.\n  var testElement = document.createElement('div');\n  testElement.innerHTML = ' ';\n  if (testElement.innerHTML === '') {\n    setInnerHTML = function(node, html) {\n      // Magic theory: IE8 supposedly differentiates between added and updated\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers\n      // from worse whitespace behavior. Re-adding a node like this triggers\n      // the initial and more favorable whitespace behavior.\n      // TODO: What to do on a detached node?\n      if (node.parentNode) {\n        node.parentNode.replaceChild(node, node);\n      }\n\n      // We also implement a workaround for non-visible tags disappearing into\n      // thin air on IE8, this only happens if there is no visible text\n      // in-front of the non-visible tags. Piggyback on the whitespace fix\n      // and simply check if any non-visible tags appear in the source.\n      if (WHITESPACE_TEST.test(html) ||\n          html[0] === '<' && NONVISIBLE_TEST.test(html)) {\n        // Recover leading whitespace by temporarily prepending any character.\n        // \\uFEFF has the potential advantage of being zero-width/invisible.\n        node.innerHTML = '\\uFEFF' + html;\n\n        // deleteData leaves an empty `TextNode` which offsets the index of all\n        // children. Definitely want to avoid this.\n        var textNode = node.firstChild;\n        if (textNode.data.length === 1) {\n          node.removeChild(textNode);\n        } else {\n          textNode.deleteData(0, 1);\n        }\n      } else {\n        node.innerHTML = html;\n      }\n    };\n  }\n}\n\nmodule.exports = setInnerHTML;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,YAAY;;AAEZ,IAAIA,oBAAoB,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAE5D,IAAIC,eAAe,GAAG,cAAc;AACpC,IAAIC,eAAe,GAAG,sDAAsD;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,YAAY,GAAG,SAAAA,CAASC,IAAI,EAAEC,IAAI,EAAE;EACtCD,IAAI,CAACE,SAAS,GAAGD,IAAI;AACvB,CAAC;;AAED;AACA,IAAI,OAAOE,KAAK,KAAK,WAAW,IAAIA,KAAK,CAACC,uBAAuB,EAAE;EACjEL,YAAY,GAAG,SAAAA,CAASC,IAAI,EAAEC,IAAI,EAAE;IAClCE,KAAK,CAACC,uBAAuB,CAAC,YAAW;MACvCJ,IAAI,CAACE,SAAS,GAAGD,IAAI;IACvB,CAAC,CAAC;EACJ,CAAC;AACH;AAEA,IAAIN,oBAAoB,CAACU,SAAS,EAAE;EAClC;EACA;EACA;EACA;;EAEA;EACA,IAAIC,WAAW,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;EAC/CF,WAAW,CAACJ,SAAS,GAAG,GAAG;EAC3B,IAAII,WAAW,CAACJ,SAAS,KAAK,EAAE,EAAE;IAChCH,YAAY,GAAG,SAAAA,CAASC,IAAI,EAAEC,IAAI,EAAE;MAClC;MACA;MACA;MACA;MACA;MACA,IAAID,IAAI,CAACS,UAAU,EAAE;QACnBT,IAAI,CAACS,UAAU,CAACC,YAAY,CAACV,IAAI,EAAEA,IAAI,CAAC;MAC1C;;MAEA;MACA;MACA;MACA;MACA,IAAIH,eAAe,CAACc,IAAI,CAACV,IAAI,CAAC,IAC1BA,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIH,eAAe,CAACa,IAAI,CAACV,IAAI,CAAC,EAAE;QACjD;QACA;QACAD,IAAI,CAACE,SAAS,GAAG,QAAQ,GAAGD,IAAI;;QAEhC;QACA;QACA,IAAIW,QAAQ,GAAGZ,IAAI,CAACa,UAAU;QAC9B,IAAID,QAAQ,CAACE,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;UAC9Bf,IAAI,CAACgB,WAAW,CAACJ,QAAQ,CAAC;QAC5B,CAAC,MAAM;UACLA,QAAQ,CAACK,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;QAC3B;MACF,CAAC,MAAM;QACLjB,IAAI,CAACE,SAAS,GAAGD,IAAI;MACvB;IACF,CAAC;EACH;AACF;AAEAiB,MAAM,CAACC,OAAO,GAAGpB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}