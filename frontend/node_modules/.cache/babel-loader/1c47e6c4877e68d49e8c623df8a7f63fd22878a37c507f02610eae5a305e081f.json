{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { AbstractPage } from \"./core.mjs\";\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class Page extends AbstractPage {\n  constructor(client, response, body, options) {\n    super(client, response, body, options);\n    this.data = body.data || [];\n    this.object = body.object;\n  }\n  getPaginatedItems() {\n    return this.data ?? [];\n  }\n  // @deprecated Please use `nextPageInfo()` instead\n  /**\n   * This page represents a response that isn't actually paginated at the API level\n   * so there will never be any next page params.\n   */\n  nextPageParams() {\n    return null;\n  }\n  nextPageInfo() {\n    return null;\n  }\n}\nexport class CursorPage extends AbstractPage {\n  constructor(client, response, body, options) {\n    super(client, response, body, options);\n    this.data = body.data || [];\n  }\n  getPaginatedItems() {\n    return this.data ?? [];\n  }\n  // @deprecated Please use `nextPageInfo()` instead\n  nextPageParams() {\n    const info = this.nextPageInfo();\n    if (!info) return null;\n    if ('params' in info) return info.params;\n    const params = Object.fromEntries(info.url.searchParams);\n    if (!Object.keys(params).length) return null;\n    return params;\n  }\n  nextPageInfo() {\n    const data = this.getPaginatedItems();\n    if (!data.length) {\n      return null;\n    }\n    const id = data[data.length - 1]?.id;\n    if (!id) {\n      return null;\n    }\n    return {\n      params: {\n        after: id\n      }\n    };\n  }\n}\n//# sourceMappingURL=pagination.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}