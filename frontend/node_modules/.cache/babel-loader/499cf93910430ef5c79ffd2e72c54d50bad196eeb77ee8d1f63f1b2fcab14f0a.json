{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport assert from 'assert';\nimport { spawnSync } from 'child_process';\nimport { existsSync } from 'fs';\nimport { mkdir, unlink } from 'fs/promises';\nimport os from 'os';\nimport path from 'path';\nimport { Browser, BrowserPlatform, downloadUrls } from './browser-data/browser-data.js';\nimport { Cache, InstalledBrowser } from './Cache.js';\nimport { debug } from './debug.js';\nimport { detectBrowserPlatform } from './detectPlatform.js';\nimport { unpackArchive } from './fileUtil.js';\nimport { downloadFile, getJSON, headHttpRequest } from './httpUtil.js';\nconst debugInstall = debug('puppeteer:browsers:install');\nconst times = new Map();\nfunction debugTime(label) {\n  times.set(label, process.hrtime());\n}\nfunction debugTimeEnd(label) {\n  const end = process.hrtime();\n  const start = times.get(label);\n  if (!start) {\n    return;\n  }\n  const duration = end[0] * 1000 + end[1] / 1e6 - (start[0] * 1000 + start[1] / 1e6); // calculate duration in milliseconds\n  debugInstall(`Duration for ${label}: ${duration}ms`);\n}\nexport async function install(options) {\n  options.platform ??= detectBrowserPlatform();\n  options.unpack ??= true;\n  if (!options.platform) {\n    throw new Error(`Cannot download a binary for the provided platform: ${os.platform()} (${os.arch()})`);\n  }\n  const url = getDownloadUrl(options.browser, options.platform, options.buildId, options.baseUrl);\n  try {\n    return await installUrl(url, options);\n  } catch (err) {\n    // If custom baseUrl is provided, do not fall back to CfT dashboard.\n    if (options.baseUrl && !options.forceFallbackForTesting) {\n      throw err;\n    }\n    debugInstall(`Error downloading from ${url}.`);\n    switch (options.browser) {\n      case Browser.CHROME:\n      case Browser.CHROMEDRIVER:\n      case Browser.CHROMEHEADLESSSHELL:\n        {\n          debugInstall(`Trying to find download URL via https://googlechromelabs.github.io/chrome-for-testing.`);\n          const version = await getJSON(new URL(`https://googlechromelabs.github.io/chrome-for-testing/${options.buildId}.json`));\n          let platform = '';\n          switch (options.platform) {\n            case BrowserPlatform.LINUX:\n              platform = 'linux64';\n              break;\n            case BrowserPlatform.MAC_ARM:\n              platform = 'mac-arm64';\n              break;\n            case BrowserPlatform.MAC:\n              platform = 'mac-x64';\n              break;\n            case BrowserPlatform.WIN32:\n              platform = 'win32';\n              break;\n            case BrowserPlatform.WIN64:\n              platform = 'win64';\n              break;\n          }\n          const url = version.downloads[options.browser]?.find(link => {\n            return link['platform'] === platform;\n          })?.url;\n          if (url) {\n            debugInstall(`Falling back to downloading from ${url}.`);\n            return await installUrl(new URL(url), options);\n          }\n          throw err;\n        }\n      default:\n        throw err;\n    }\n  }\n}\nasync function installUrl(url, options) {\n  options.platform ??= detectBrowserPlatform();\n  if (!options.platform) {\n    throw new Error(`Cannot download a binary for the provided platform: ${os.platform()} (${os.arch()})`);\n  }\n  const fileName = url.toString().split('/').pop();\n  assert(fileName, `A malformed download URL was found: ${url}.`);\n  const cache = new Cache(options.cacheDir);\n  const browserRoot = cache.browserRoot(options.browser);\n  const archivePath = path.join(browserRoot, `${options.buildId}-${fileName}`);\n  if (!existsSync(browserRoot)) {\n    await mkdir(browserRoot, {\n      recursive: true\n    });\n  }\n  if (!options.unpack) {\n    if (existsSync(archivePath)) {\n      return archivePath;\n    }\n    debugInstall(`Downloading binary from ${url}`);\n    debugTime('download');\n    await downloadFile(url, archivePath, options.downloadProgressCallback);\n    debugTimeEnd('download');\n    return archivePath;\n  }\n  const outputPath = cache.installationDir(options.browser, options.platform, options.buildId);\n  try {\n    if (existsSync(outputPath)) {\n      const installedBrowser = new InstalledBrowser(cache, options.browser, options.buildId, options.platform);\n      if (!existsSync(installedBrowser.executablePath)) {\n        throw new Error(`The browser folder (${outputPath}) exists but the executable (${installedBrowser.executablePath}) is missing`);\n      }\n      await runSetup(installedBrowser);\n      return installedBrowser;\n    }\n    debugInstall(`Downloading binary from ${url}`);\n    try {\n      debugTime('download');\n      await downloadFile(url, archivePath, options.downloadProgressCallback);\n    } finally {\n      debugTimeEnd('download');\n    }\n    debugInstall(`Installing ${archivePath} to ${outputPath}`);\n    try {\n      debugTime('extract');\n      await unpackArchive(archivePath, outputPath);\n    } finally {\n      debugTimeEnd('extract');\n    }\n    const installedBrowser = new InstalledBrowser(cache, options.browser, options.buildId, options.platform);\n    if (options.buildIdAlias) {\n      const metadata = installedBrowser.readMetadata();\n      metadata.aliases[options.buildIdAlias] = options.buildId;\n      installedBrowser.writeMetadata(metadata);\n    }\n    await runSetup(installedBrowser);\n    return installedBrowser;\n  } finally {\n    if (existsSync(archivePath)) {\n      await unlink(archivePath);\n    }\n  }\n}\nasync function runSetup(installedBrowser) {\n  // On Windows for Chrome invoke setup.exe to configure sandboxes.\n  if ((installedBrowser.platform === BrowserPlatform.WIN32 || installedBrowser.platform === BrowserPlatform.WIN64) && installedBrowser.browser === Browser.CHROME && installedBrowser.platform === detectBrowserPlatform()) {\n    try {\n      debugTime('permissions');\n      const browserDir = path.dirname(installedBrowser.executablePath);\n      const setupExePath = path.join(browserDir, 'setup.exe');\n      if (!existsSync(setupExePath)) {\n        return;\n      }\n      spawnSync(path.join(browserDir, 'setup.exe'), [`--configure-browser-in-directory=` + browserDir], {\n        shell: true\n      });\n      // TODO: Handle error here. Currently the setup.exe sometimes\n      // errors although it sets the permissions correctly.\n    } finally {\n      debugTimeEnd('permissions');\n    }\n  }\n}\n/**\n *\n * @public\n */\nexport async function uninstall(options) {\n  options.platform ??= detectBrowserPlatform();\n  if (!options.platform) {\n    throw new Error(`Cannot detect the browser platform for: ${os.platform()} (${os.arch()})`);\n  }\n  new Cache(options.cacheDir).uninstall(options.browser, options.platform, options.buildId);\n}\n/**\n * Returns metadata about browsers installed in the cache directory.\n *\n * @public\n */\nexport async function getInstalledBrowsers(options) {\n  return new Cache(options.cacheDir).getInstalledBrowsers();\n}\n/**\n * @public\n */\nexport async function canDownload(options) {\n  options.platform ??= detectBrowserPlatform();\n  if (!options.platform) {\n    throw new Error(`Cannot download a binary for the provided platform: ${os.platform()} (${os.arch()})`);\n  }\n  return await headHttpRequest(getDownloadUrl(options.browser, options.platform, options.buildId, options.baseUrl));\n}\nfunction getDownloadUrl(browser, platform, buildId, baseUrl) {\n  return new URL(downloadUrls[browser](platform, buildId, baseUrl));\n}","map":{"version":3,"names":["assert","spawnSync","existsSync","mkdir","unlink","os","path","Browser","BrowserPlatform","downloadUrls","Cache","InstalledBrowser","debug","detectBrowserPlatform","unpackArchive","downloadFile","getJSON","headHttpRequest","debugInstall","times","Map","debugTime","label","set","process","hrtime","debugTimeEnd","end","start","get","duration","install","options","platform","unpack","Error","arch","url","getDownloadUrl","browser","buildId","baseUrl","installUrl","err","forceFallbackForTesting","CHROME","CHROMEDRIVER","CHROMEHEADLESSSHELL","version","URL","LINUX","MAC_ARM","MAC","WIN32","WIN64","downloads","find","link","fileName","toString","split","pop","cache","cacheDir","browserRoot","archivePath","join","recursive","downloadProgressCallback","outputPath","installationDir","installedBrowser","executablePath","runSetup","buildIdAlias","metadata","readMetadata","aliases","writeMetadata","browserDir","dirname","setupExePath","shell","uninstall","getInstalledBrowsers","canDownload"],"sources":["C:\\Users\\raffy\\Desktop\\test\\node_modules\\@puppeteer\\browsers\\src\\install.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport assert from 'assert';\nimport {spawnSync} from 'child_process';\nimport {existsSync} from 'fs';\nimport {mkdir, unlink} from 'fs/promises';\nimport os from 'os';\nimport path from 'path';\n\nimport {\n  Browser,\n  BrowserPlatform,\n  downloadUrls,\n} from './browser-data/browser-data.js';\nimport {Cache, InstalledBrowser} from './Cache.js';\nimport {debug} from './debug.js';\nimport {detectBrowserPlatform} from './detectPlatform.js';\nimport {unpackArchive} from './fileUtil.js';\nimport {downloadFile, getJSON, headHttpRequest} from './httpUtil.js';\n\nconst debugInstall = debug('puppeteer:browsers:install');\n\nconst times = new Map<string, [number, number]>();\nfunction debugTime(label: string) {\n  times.set(label, process.hrtime());\n}\n\nfunction debugTimeEnd(label: string) {\n  const end = process.hrtime();\n  const start = times.get(label);\n  if (!start) {\n    return;\n  }\n  const duration =\n    end[0] * 1000 + end[1] / 1e6 - (start[0] * 1000 + start[1] / 1e6); // calculate duration in milliseconds\n  debugInstall(`Duration for ${label}: ${duration}ms`);\n}\n\n/**\n * @public\n */\nexport interface InstallOptions {\n  /**\n   * Determines the path to download browsers to.\n   */\n  cacheDir: string;\n  /**\n   * Determines which platform the browser will be suited for.\n   *\n   * @defaultValue **Auto-detected.**\n   */\n  platform?: BrowserPlatform;\n  /**\n   * Determines which browser to install.\n   */\n  browser: Browser;\n  /**\n   * Determines which buildId to download. BuildId should uniquely identify\n   * binaries and they are used for caching.\n   */\n  buildId: string;\n  /**\n   * An alias for the provided `buildId`. It will be used to maintain local\n   * metadata to support aliases in the `launch` command.\n   *\n   * @example 'canary'\n   */\n  buildIdAlias?: string;\n  /**\n   * Provides information about the progress of the download.\n   */\n  downloadProgressCallback?: (\n    downloadedBytes: number,\n    totalBytes: number\n  ) => void;\n  /**\n   * Determines the host that will be used for downloading.\n   *\n   * @defaultValue Either\n   *\n   * - https://storage.googleapis.com/chrome-for-testing-public or\n   * - https://archive.mozilla.org/pub/firefox/nightly/latest-mozilla-central\n   *\n   */\n  baseUrl?: string;\n  /**\n   * Whether to unpack and install browser archives.\n   *\n   * @defaultValue `true`\n   */\n  unpack?: boolean;\n  /**\n   * @internal\n   * @defaultValue `false`\n   */\n  forceFallbackForTesting?: boolean;\n}\n\n/**\n * @public\n */\nexport function install(\n  options: InstallOptions & {unpack?: true}\n): Promise<InstalledBrowser>;\n/**\n * @public\n */\nexport function install(\n  options: InstallOptions & {unpack: false}\n): Promise<string>;\nexport async function install(\n  options: InstallOptions\n): Promise<InstalledBrowser | string> {\n  options.platform ??= detectBrowserPlatform();\n  options.unpack ??= true;\n  if (!options.platform) {\n    throw new Error(\n      `Cannot download a binary for the provided platform: ${os.platform()} (${os.arch()})`\n    );\n  }\n  const url = getDownloadUrl(\n    options.browser,\n    options.platform,\n    options.buildId,\n    options.baseUrl\n  );\n  try {\n    return await installUrl(url, options);\n  } catch (err) {\n    // If custom baseUrl is provided, do not fall back to CfT dashboard.\n    if (options.baseUrl && !options.forceFallbackForTesting) {\n      throw err;\n    }\n    debugInstall(`Error downloading from ${url}.`);\n    switch (options.browser) {\n      case Browser.CHROME:\n      case Browser.CHROMEDRIVER:\n      case Browser.CHROMEHEADLESSSHELL: {\n        debugInstall(\n          `Trying to find download URL via https://googlechromelabs.github.io/chrome-for-testing.`\n        );\n        interface Version {\n          downloads: Record<string, Array<{platform: string; url: string}>>;\n        }\n        const version = (await getJSON(\n          new URL(\n            `https://googlechromelabs.github.io/chrome-for-testing/${options.buildId}.json`\n          )\n        )) as Version;\n        let platform = '';\n        switch (options.platform) {\n          case BrowserPlatform.LINUX:\n            platform = 'linux64';\n            break;\n          case BrowserPlatform.MAC_ARM:\n            platform = 'mac-arm64';\n            break;\n          case BrowserPlatform.MAC:\n            platform = 'mac-x64';\n            break;\n          case BrowserPlatform.WIN32:\n            platform = 'win32';\n            break;\n          case BrowserPlatform.WIN64:\n            platform = 'win64';\n            break;\n        }\n        const url = version.downloads[options.browser]?.find(link => {\n          return link['platform'] === platform;\n        })?.url;\n        if (url) {\n          debugInstall(`Falling back to downloading from ${url}.`);\n          return await installUrl(new URL(url), options);\n        }\n        throw err;\n      }\n      default:\n        throw err;\n    }\n  }\n}\n\nasync function installUrl(\n  url: URL,\n  options: InstallOptions\n): Promise<InstalledBrowser | string> {\n  options.platform ??= detectBrowserPlatform();\n  if (!options.platform) {\n    throw new Error(\n      `Cannot download a binary for the provided platform: ${os.platform()} (${os.arch()})`\n    );\n  }\n  const fileName = url.toString().split('/').pop();\n  assert(fileName, `A malformed download URL was found: ${url}.`);\n  const cache = new Cache(options.cacheDir);\n  const browserRoot = cache.browserRoot(options.browser);\n  const archivePath = path.join(browserRoot, `${options.buildId}-${fileName}`);\n  if (!existsSync(browserRoot)) {\n    await mkdir(browserRoot, {recursive: true});\n  }\n\n  if (!options.unpack) {\n    if (existsSync(archivePath)) {\n      return archivePath;\n    }\n    debugInstall(`Downloading binary from ${url}`);\n    debugTime('download');\n    await downloadFile(url, archivePath, options.downloadProgressCallback);\n    debugTimeEnd('download');\n    return archivePath;\n  }\n\n  const outputPath = cache.installationDir(\n    options.browser,\n    options.platform,\n    options.buildId\n  );\n\n  try {\n    if (existsSync(outputPath)) {\n      const installedBrowser = new InstalledBrowser(\n        cache,\n        options.browser,\n        options.buildId,\n        options.platform\n      );\n      if (!existsSync(installedBrowser.executablePath)) {\n        throw new Error(\n          `The browser folder (${outputPath}) exists but the executable (${installedBrowser.executablePath}) is missing`\n        );\n      }\n      await runSetup(installedBrowser);\n      return installedBrowser;\n    }\n    debugInstall(`Downloading binary from ${url}`);\n    try {\n      debugTime('download');\n      await downloadFile(url, archivePath, options.downloadProgressCallback);\n    } finally {\n      debugTimeEnd('download');\n    }\n\n    debugInstall(`Installing ${archivePath} to ${outputPath}`);\n    try {\n      debugTime('extract');\n      await unpackArchive(archivePath, outputPath);\n    } finally {\n      debugTimeEnd('extract');\n    }\n\n    const installedBrowser = new InstalledBrowser(\n      cache,\n      options.browser,\n      options.buildId,\n      options.platform\n    );\n    if (options.buildIdAlias) {\n      const metadata = installedBrowser.readMetadata();\n      metadata.aliases[options.buildIdAlias] = options.buildId;\n      installedBrowser.writeMetadata(metadata);\n    }\n\n    await runSetup(installedBrowser);\n    return installedBrowser;\n  } finally {\n    if (existsSync(archivePath)) {\n      await unlink(archivePath);\n    }\n  }\n}\n\nasync function runSetup(installedBrowser: InstalledBrowser): Promise<void> {\n  // On Windows for Chrome invoke setup.exe to configure sandboxes.\n  if (\n    (installedBrowser.platform === BrowserPlatform.WIN32 ||\n      installedBrowser.platform === BrowserPlatform.WIN64) &&\n    installedBrowser.browser === Browser.CHROME &&\n    installedBrowser.platform === detectBrowserPlatform()\n  ) {\n    try {\n      debugTime('permissions');\n      const browserDir = path.dirname(installedBrowser.executablePath);\n      const setupExePath = path.join(browserDir, 'setup.exe');\n      if (!existsSync(setupExePath)) {\n        return;\n      }\n      spawnSync(\n        path.join(browserDir, 'setup.exe'),\n        [`--configure-browser-in-directory=` + browserDir],\n        {\n          shell: true,\n        }\n      );\n      // TODO: Handle error here. Currently the setup.exe sometimes\n      // errors although it sets the permissions correctly.\n    } finally {\n      debugTimeEnd('permissions');\n    }\n  }\n}\n\n/**\n * @public\n */\nexport interface UninstallOptions {\n  /**\n   * Determines the platform for the browser binary.\n   *\n   * @defaultValue **Auto-detected.**\n   */\n  platform?: BrowserPlatform;\n  /**\n   * The path to the root of the cache directory.\n   */\n  cacheDir: string;\n  /**\n   * Determines which browser to uninstall.\n   */\n  browser: Browser;\n  /**\n   * The browser build to uninstall\n   */\n  buildId: string;\n}\n\n/**\n *\n * @public\n */\nexport async function uninstall(options: UninstallOptions): Promise<void> {\n  options.platform ??= detectBrowserPlatform();\n  if (!options.platform) {\n    throw new Error(\n      `Cannot detect the browser platform for: ${os.platform()} (${os.arch()})`\n    );\n  }\n\n  new Cache(options.cacheDir).uninstall(\n    options.browser,\n    options.platform,\n    options.buildId\n  );\n}\n\n/**\n * @public\n */\nexport interface GetInstalledBrowsersOptions {\n  /**\n   * The path to the root of the cache directory.\n   */\n  cacheDir: string;\n}\n\n/**\n * Returns metadata about browsers installed in the cache directory.\n *\n * @public\n */\nexport async function getInstalledBrowsers(\n  options: GetInstalledBrowsersOptions\n): Promise<InstalledBrowser[]> {\n  return new Cache(options.cacheDir).getInstalledBrowsers();\n}\n\n/**\n * @public\n */\nexport async function canDownload(options: InstallOptions): Promise<boolean> {\n  options.platform ??= detectBrowserPlatform();\n  if (!options.platform) {\n    throw new Error(\n      `Cannot download a binary for the provided platform: ${os.platform()} (${os.arch()})`\n    );\n  }\n  return await headHttpRequest(\n    getDownloadUrl(\n      options.browser,\n      options.platform,\n      options.buildId,\n      options.baseUrl\n    )\n  );\n}\n\nfunction getDownloadUrl(\n  browser: Browser,\n  platform: BrowserPlatform,\n  buildId: string,\n  baseUrl?: string\n): URL {\n  return new URL(downloadUrls[browser](platform, buildId, baseUrl));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}