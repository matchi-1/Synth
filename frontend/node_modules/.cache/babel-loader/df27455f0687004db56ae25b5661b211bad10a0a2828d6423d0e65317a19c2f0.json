{"ast":null,"code":"/**\n * Copyright 2013-2015 Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BeforeInputEventPlugin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar FallbackCompositionState = require(\"./FallbackCompositionState\");\nvar SyntheticCompositionEvent = require(\"./SyntheticCompositionEvent\");\nvar SyntheticInputEvent = require(\"./SyntheticInputEvent\");\nvar keyOf = require(\"./keyOf\");\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\nvar documentMode = null;\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n}\n\n// Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;\n}\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\nvar topLevelTypes = EventConstants.topLevelTypes;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onBeforeInput: null\n      }),\n      captured: keyOf({\n        onBeforeInputCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]\n  },\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionEnd: null\n      }),\n      captured: keyOf({\n        onCompositionEndCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionStart: null\n      }),\n      captured: keyOf({\n        onCompositionStartCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionUpdate: null\n      }),\n      captured: keyOf({\n        onCompositionUpdateCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  }\n};\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\n  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n  return null;\n}\n\n// Track the current IME composition fallback object, if any.\nvar currentComposition = null;\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticCompositionEvent.\n */\nfunction extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n  var eventType;\n  var fallbackData;\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(topLevelType);\n  } else if (!currentComposition) {\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionStart;\n    }\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n    eventType = eventTypes.compositionEnd;\n  }\n  if (!eventType) {\n    return null;\n  }\n  if (useFallbackCompositionData) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!currentComposition && eventType === eventTypes.compositionStart) {\n      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n    } else if (eventType === eventTypes.compositionEnd) {\n      if (currentComposition) {\n        fallbackData = currentComposition.getData();\n      }\n    }\n  }\n  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent);\n  if (fallbackData) {\n    // Inject data generated from fallback path into the synthetic event.\n    // This matches the property of native CompositionEventInterface.\n    event.data = fallbackData;\n  } else {\n    var customData = getDataFromCustomEvent(nativeEvent);\n    if (customData !== null) {\n      event.data = customData;\n    }\n  }\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.\n */\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionEnd:\n      return getDataFromCustomEvent(nativeEvent);\n    case topLevelTypes.topKeyPress:\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n    case topLevelTypes.topTextInput:\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data;\n\n      // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to blacklist it.\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n      return chars;\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.\n */\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  if (currentComposition) {\n    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n      var chars = currentComposition.getData();\n      FallbackCompositionState.release(currentComposition);\n      currentComposition = null;\n      return chars;\n    }\n    return null;\n  }\n  switch (topLevelType) {\n    case topLevelTypes.topPaste:\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n    case topLevelTypes.topKeyPress:\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n        return String.fromCharCode(nativeEvent.which);\n      }\n      return null;\n    case topLevelTypes.topCompositionEnd:\n      return useFallbackCompositionData ? null : nativeEvent.data;\n    default:\n      return null;\n  }\n}\n\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticInputEvent.\n */\nfunction extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n  var chars;\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n  }\n\n  // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n  if (!chars) {\n    return null;\n  }\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent);\n  event.data = chars;\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\nvar BeforeInputEventPlugin = {\n  eventTypes: eventTypes,\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent)];\n  }\n};\nmodule.exports = BeforeInputEventPlugin;","map":{"version":3,"names":["EventConstants","require","EventPropagators","ExecutionEnvironment","FallbackCompositionState","SyntheticCompositionEvent","SyntheticInputEvent","keyOf","END_KEYCODES","START_KEYCODE","canUseCompositionEvent","canUseDOM","window","documentMode","document","canUseTextInputEvent","isPresto","useFallbackCompositionData","opera","version","parseInt","SPACEBAR_CODE","SPACEBAR_CHAR","String","fromCharCode","topLevelTypes","eventTypes","beforeInput","phasedRegistrationNames","bubbled","onBeforeInput","captured","onBeforeInputCapture","dependencies","topCompositionEnd","topKeyPress","topTextInput","topPaste","compositionEnd","onCompositionEnd","onCompositionEndCapture","topBlur","topKeyDown","topKeyUp","topMouseDown","compositionStart","onCompositionStart","onCompositionStartCapture","topCompositionStart","compositionUpdate","onCompositionUpdate","onCompositionUpdateCapture","topCompositionUpdate","hasSpaceKeypress","isKeypressCommand","nativeEvent","ctrlKey","altKey","metaKey","getCompositionEventType","topLevelType","isFallbackCompositionStart","keyCode","isFallbackCompositionEnd","indexOf","getDataFromCustomEvent","detail","data","currentComposition","extractCompositionEvent","topLevelTarget","topLevelTargetID","eventType","fallbackData","getPooled","getData","event","customData","accumulateTwoPhaseDispatches","getNativeBeforeInputChars","which","chars","getFallbackBeforeInputChars","release","extractBeforeInputEvent","BeforeInputEventPlugin","extractEvents","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/BeforeInputEventPlugin.js"],"sourcesContent":["/**\n * Copyright 2013-2015 Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BeforeInputEventPlugin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar FallbackCompositionState = require(\"./FallbackCompositionState\");\nvar SyntheticCompositionEvent = require(\"./SyntheticCompositionEvent\");\nvar SyntheticInputEvent = require(\"./SyntheticInputEvent\");\n\nvar keyOf = require(\"./keyOf\");\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar canUseCompositionEvent = (\n  ExecutionEnvironment.canUseDOM &&\n  'CompositionEvent' in window\n);\n\nvar documentMode = null;\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n}\n\n// Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\nvar canUseTextInputEvent = (\n  ExecutionEnvironment.canUseDOM &&\n  'TextEvent' in window &&\n  !documentMode &&\n  !isPresto()\n);\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\nvar useFallbackCompositionData = (\n  ExecutionEnvironment.canUseDOM &&\n  (\n    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)\n  )\n);\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return (\n    typeof opera === 'object' &&\n    typeof opera.version === 'function' &&\n    parseInt(opera.version(), 10) <= 12\n  );\n}\n\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onBeforeInput: null}),\n      captured: keyOf({onBeforeInputCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topCompositionEnd,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topTextInput,\n      topLevelTypes.topPaste\n    ]\n  },\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionEnd: null}),\n      captured: keyOf({onCompositionEndCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionEnd,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionStart: null}),\n      captured: keyOf({onCompositionStartCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionStart,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionUpdate: null}),\n      captured: keyOf({onCompositionUpdateCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionUpdate,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  }\n};\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (\n    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n    // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n    !(nativeEvent.ctrlKey && nativeEvent.altKey)\n  );\n}\n\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\n  return (\n    topLevelType === topLevelTypes.topKeyDown &&\n    nativeEvent.keyCode === START_KEYCODE\n  );\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return (nativeEvent.keyCode !== START_KEYCODE);\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n  return null;\n}\n\n// Track the current IME composition fallback object, if any.\nvar currentComposition = null;\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticCompositionEvent.\n */\nfunction extractCompositionEvent(\n  topLevelType,\n  topLevelTarget,\n  topLevelTargetID,\n  nativeEvent\n) {\n  var eventType;\n  var fallbackData;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(topLevelType);\n  } else if (!currentComposition) {\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionStart;\n    }\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n    eventType = eventTypes.compositionEnd;\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!currentComposition && eventType === eventTypes.compositionStart) {\n      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n    } else if (eventType === eventTypes.compositionEnd) {\n      if (currentComposition) {\n        fallbackData = currentComposition.getData();\n      }\n    }\n  }\n\n  var event = SyntheticCompositionEvent.getPooled(\n    eventType,\n    topLevelTargetID,\n    nativeEvent\n  );\n\n  if (fallbackData) {\n    // Inject data generated from fallback path into the synthetic event.\n    // This matches the property of native CompositionEventInterface.\n    event.data = fallbackData;\n  } else {\n    var customData = getDataFromCustomEvent(nativeEvent);\n    if (customData !== null) {\n      event.data = customData;\n    }\n  }\n\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.\n */\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionEnd:\n      return getDataFromCustomEvent(nativeEvent);\n    case topLevelTypes.topKeyPress:\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case topLevelTypes.topTextInput:\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data;\n\n      // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to blacklist it.\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.\n */\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  if (currentComposition) {\n    if (\n      topLevelType === topLevelTypes.topCompositionEnd ||\n      isFallbackCompositionEnd(topLevelType, nativeEvent)\n    ) {\n      var chars = currentComposition.getData();\n      FallbackCompositionState.release(currentComposition);\n      currentComposition = null;\n      return chars;\n    }\n    return null;\n  }\n\n  switch (topLevelType) {\n    case topLevelTypes.topPaste:\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n    case topLevelTypes.topKeyPress:\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n        return String.fromCharCode(nativeEvent.which);\n      }\n      return null;\n    case topLevelTypes.topCompositionEnd:\n      return useFallbackCompositionData ? null : nativeEvent.data;\n    default:\n      return null;\n  }\n}\n\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticInputEvent.\n */\nfunction extractBeforeInputEvent(\n  topLevelType,\n  topLevelTarget,\n  topLevelTargetID,\n  nativeEvent\n) {\n  var chars;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n  }\n\n  // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n  if (!chars) {\n    return null;\n  }\n\n  var event = SyntheticInputEvent.getPooled(\n    eventTypes.beforeInput,\n    topLevelTargetID,\n    nativeEvent\n  );\n\n  event.data = chars;\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\nvar BeforeInputEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID,\n    nativeEvent\n  ) {\n    return [\n      extractCompositionEvent(\n        topLevelType,\n        topLevelTarget,\n        topLevelTargetID,\n        nativeEvent\n      ),\n      extractBeforeInputEvent(\n        topLevelType,\n        topLevelTarget,\n        topLevelTargetID,\n        nativeEvent\n      )\n    ];\n  }\n};\n\nmodule.exports = BeforeInputEventPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}