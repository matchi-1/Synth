{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Explorer = void 0;\nconst promises_1 = __importDefault(require(\"fs/promises\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst defaults_1 = require(\"./defaults\");\nconst ExplorerBase_js_1 = require(\"./ExplorerBase.js\");\nconst merge_1 = require(\"./merge\");\nconst util_js_1 = require(\"./util.js\");\n/**\n * @internal\n */\nclass Explorer extends ExplorerBase_js_1.ExplorerBase {\n  async load(filepath) {\n    filepath = path_1.default.resolve(filepath);\n    const load = async () => {\n      return await this.config.transform(await this.#readConfiguration(filepath));\n    };\n    if (this.loadCache) {\n      return await (0, util_js_1.emplace)(this.loadCache, filepath, load);\n    }\n    return await load();\n  }\n  async search(from = '') {\n    if (this.config.metaConfigFilePath) {\n      this.loadingMetaConfig = true;\n      const config = await this.load(this.config.metaConfigFilePath);\n      this.loadingMetaConfig = false;\n      if (config && !config.isEmpty) {\n        return config;\n      }\n    }\n    from = path_1.default.resolve(from);\n    const dirs = this.#getDirs(from);\n    const firstDirIter = await dirs.next();\n    /* istanbul ignore if -- @preserve */\n    if (firstDirIter.done) {\n      // this should never happen\n      throw new Error(`Could not find any folders to iterate through (start from ${from})`);\n    }\n    let currentDir = firstDirIter.value;\n    const search = async () => {\n      /* istanbul ignore if -- @preserve */\n      if (await (0, util_js_1.isDirectory)(currentDir.path)) {\n        for (const filepath of this.getSearchPlacesForDir(currentDir, defaults_1.globalConfigSearchPlaces)) {\n          try {\n            const result = await this.#readConfiguration(filepath);\n            if (result !== null && !(result.isEmpty && this.config.ignoreEmptySearchPlaces)) {\n              return await this.config.transform(result);\n            }\n          } catch (error) {\n            if (error.code === 'ENOENT' || error.code === 'EISDIR' || error.code === 'ENOTDIR' || error.code === 'EACCES') {\n              continue;\n            }\n            throw error;\n          }\n        }\n      }\n      const nextDirIter = await dirs.next();\n      if (!nextDirIter.done) {\n        currentDir = nextDirIter.value;\n        if (this.searchCache) {\n          return await (0, util_js_1.emplace)(this.searchCache, currentDir.path, search);\n        }\n        return await search();\n      }\n      return await this.config.transform(null);\n    };\n    if (this.searchCache) {\n      return await (0, util_js_1.emplace)(this.searchCache, from, search);\n    }\n    return await search();\n  }\n  async #readConfiguration(filepath, importStack = []) {\n    const contents = await promises_1.default.readFile(filepath, {\n      encoding: 'utf-8'\n    });\n    return this.toCosmiconfigResult(filepath, await this.#loadConfigFileWithImports(filepath, contents, importStack));\n  }\n  async #loadConfigFileWithImports(filepath, contents, importStack) {\n    const loadedContent = await this.#loadConfiguration(filepath, contents);\n    if (!loadedContent || !(0, merge_1.hasOwn)(loadedContent, '$import')) {\n      return loadedContent;\n    }\n    const fileDirectory = path_1.default.dirname(filepath);\n    const {\n      $import: imports,\n      ...ownContent\n    } = loadedContent;\n    const importPaths = Array.isArray(imports) ? imports : [imports];\n    const newImportStack = [...importStack, filepath];\n    this.validateImports(filepath, importPaths, newImportStack);\n    const importedConfigs = await Promise.all(importPaths.map(async importPath => {\n      const fullPath = path_1.default.resolve(fileDirectory, importPath);\n      const result = await this.#readConfiguration(fullPath, newImportStack);\n      return result?.config;\n    }));\n    return (0, merge_1.mergeAll)([...importedConfigs, ownContent], {\n      mergeArrays: this.config.mergeImportArrays\n    });\n  }\n  async #loadConfiguration(filepath, contents) {\n    if (contents.trim() === '') {\n      return;\n    }\n    const extension = path_1.default.extname(filepath);\n    const loader = this.config.loaders[extension || 'noExt'] ?? this.config.loaders['default'];\n    if (!loader) {\n      throw new Error(`No loader specified for ${(0, ExplorerBase_js_1.getExtensionDescription)(extension)}`);\n    }\n    try {\n      const loadedContents = await loader(filepath, contents);\n      if (path_1.default.basename(filepath, extension) !== 'package') {\n        return loadedContents;\n      }\n      return (0, util_js_1.getPropertyByPath)(loadedContents, this.config.packageProp ?? this.config.moduleName) ?? null;\n    } catch (error) {\n      error.filepath = filepath;\n      throw error;\n    }\n  }\n  async #fileExists(path) {\n    try {\n      await promises_1.default.stat(path);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  async *#getDirs(startDir) {\n    switch (this.config.searchStrategy) {\n      case 'none':\n        {\n          // only check in the passed directory (defaults to working directory)\n          yield {\n            path: startDir,\n            isGlobalConfig: false\n          };\n          return;\n        }\n      case 'project':\n        {\n          let currentDir = startDir;\n          while (true) {\n            yield {\n              path: currentDir,\n              isGlobalConfig: false\n            };\n            for (const ext of ['json', 'yaml']) {\n              const packageFile = path_1.default.join(currentDir, `package.${ext}`);\n              if (await this.#fileExists(packageFile)) {\n                break;\n              }\n            }\n            const parentDir = path_1.default.dirname(currentDir);\n            /* istanbul ignore if -- @preserve */\n            if (parentDir === currentDir) {\n              // we're probably at the root of the directory structure\n              break;\n            }\n            currentDir = parentDir;\n          }\n          return;\n        }\n      case 'global':\n        {\n          yield* this.getGlobalDirs(startDir);\n        }\n    }\n  }\n}\nexports.Explorer = Explorer;","map":{"version":3,"names":["promises_1","__importDefault","require","path_1","defaults_1","ExplorerBase_js_1","merge_1","util_js_1","Explorer","ExplorerBase","load","filepath","default","resolve","config","transform","readConfiguration","loadCache","emplace","search","from","metaConfigFilePath","loadingMetaConfig","isEmpty","dirs","getDirs","firstDirIter","next","done","Error","currentDir","value","isDirectory","path","getSearchPlacesForDir","globalConfigSearchPlaces","result","ignoreEmptySearchPlaces","error","code","nextDirIter","searchCache","#readConfiguration","importStack","contents","readFile","encoding","toCosmiconfigResult","loadConfigFileWithImports","#loadConfigFileWithImports","loadedContent","loadConfiguration","hasOwn","fileDirectory","dirname","$import","imports","ownContent","importPaths","Array","isArray","newImportStack","validateImports","importedConfigs","Promise","all","map","importPath","fullPath","mergeAll","mergeArrays","mergeImportArrays","#loadConfiguration","trim","extension","extname","loader","loaders","getExtensionDescription","loadedContents","basename","getPropertyByPath","packageProp","moduleName","fileExists","#fileExists","stat","e","#getDirs","startDir","searchStrategy","isGlobalConfig","ext","packageFile","join","parentDir","getGlobalDirs","exports"],"sources":["../src/Explorer.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}