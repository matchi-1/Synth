{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactClass\n */\n\n'use strict';\n\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactErrorUtils = require(\"./ReactErrorUtils\");\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\nvar ReactLifeCycle = require(\"./ReactLifeCycle\");\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\nvar ReactUpdateQueue = require(\"./ReactUpdateQueue\");\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\nvar keyMirror = require(\"./keyMirror\");\nvar keyOf = require(\"./keyOf\");\nvar warning = require(\"./warning\");\nvar MIXINS_KEY = keyOf({\n  mixins: null\n});\n\n/**\n * Policies that describe methods in `ReactClassInterface`.\n */\nvar SpecPolicy = keyMirror({\n  /**\n   * These methods may be defined only once by the class specification or mixin.\n   */\n  DEFINE_ONCE: null,\n  /**\n   * These methods may be defined by both the class specification and mixins.\n   * Subsequent definitions will be chained. These methods must return void.\n   */\n  DEFINE_MANY: null,\n  /**\n   * These methods are overriding the base class.\n   */\n  OVERRIDE_BASE: null,\n  /**\n   * These methods are similar to DEFINE_MANY, except we assume they return\n   * objects. We try to merge the keys of the return values of all the mixed in\n   * functions. If there is a key conflict we throw.\n   */\n  DEFINE_MANY_MERGED: null\n});\nvar injectedMixins = [];\n\n/**\n * Composite components are higher-level components that compose other composite\n * or native components.\n *\n * To create a new type of `ReactClass`, pass a specification of\n * your new class to `React.createClass`. The only requirement of your class\n * specification is that you implement a `render` method.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return <div>Hello World</div>;\n *     }\n *   });\n *\n * The class specification supports a specific protocol of methods that have\n * special meaning (e.g. `render`). See `ReactClassInterface` for\n * more the comprehensive protocol. Any other properties and methods in the\n * class specification will available on the prototype.\n *\n * @interface ReactClassInterface\n * @internal\n */\nvar ReactClassInterface = {\n  /**\n   * An array of Mixin objects to include when defining your component.\n   *\n   * @type {array}\n   * @optional\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n  /**\n   * An object containing properties and methods that should be defined on\n   * the component's constructor instead of its prototype (static methods).\n   *\n   * @type {object}\n   * @optional\n   */\n  statics: SpecPolicy.DEFINE_MANY,\n  /**\n   * Definition of prop types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  propTypes: SpecPolicy.DEFINE_MANY,\n  /**\n   * Definition of context types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  contextTypes: SpecPolicy.DEFINE_MANY,\n  /**\n   * Definition of context types this component sets for its children.\n   *\n   * @type {object}\n   * @optional\n   */\n  childContextTypes: SpecPolicy.DEFINE_MANY,\n  // ==== Definition methods ====\n\n  /**\n   * Invoked when the component is mounted. Values in the mapping will be set on\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\n   *\n   * This method is invoked before `getInitialState` and therefore cannot rely\n   * on `this.state` or use `this.setState`.\n   *\n   * @return {object}\n   * @optional\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n  /**\n   * Invoked once before the component is mounted. The return value will be used\n   * as the initial value of `this.state`.\n   *\n   *   getInitialState: function() {\n   *     return {\n   *       isOn: false,\n   *       fooBaz: new BazFoo()\n   *     }\n   *   }\n   *\n   * @return {object}\n   * @optional\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n  /**\n   * @return {object}\n   * @optional\n   */\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,\n  /**\n   * Uses props from `this.props` and state from `this.state` to render the\n   * structure of the component.\n   *\n   * No guarantees are made about when or how often this method is invoked, so\n   * it must not have side effects.\n   *\n   *   render: function() {\n   *     var name = this.props.name;\n   *     return <div>Hello, {name}!</div>;\n   *   }\n   *\n   * @return {ReactComponent}\n   * @nosideeffects\n   * @required\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n  // ==== Delegate methods ====\n\n  /**\n   * Invoked when the component is initially created and about to be mounted.\n   * This may have side effects, but any external subscriptions or data created\n   * by this method must be cleaned up in `componentWillUnmount`.\n   *\n   * @optional\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n  /**\n   * Invoked when the component has been mounted and has a DOM representation.\n   * However, there is no guarantee that the DOM node is in the document.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been mounted (initialized and rendered) for the first time.\n   *\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n  /**\n   * Invoked before the component receives new props.\n   *\n   * Use this as an opportunity to react to a prop transition by updating the\n   * state using `this.setState`. Current props are accessed via `this.props`.\n   *\n   *   componentWillReceiveProps: function(nextProps, nextContext) {\n   *     this.setState({\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n   *     });\n   *   }\n   *\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n   * transition may cause a state change, but the opposite is not true. If you\n   * need it, you are probably looking for `componentWillUpdate`.\n   *\n   * @param {object} nextProps\n   * @optional\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n  /**\n   * Invoked while deciding if the component should be updated as a result of\n   * receiving new props, state and/or context.\n   *\n   * Use this as an opportunity to `return false` when you're certain that the\n   * transition to the new props/state/context will not require a component\n   * update.\n   *\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n   *     return !equal(nextProps, this.props) ||\n   *       !equal(nextState, this.state) ||\n   *       !equal(nextContext, this.context);\n   *   }\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @return {boolean} True if the component should update.\n   * @optional\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n  /**\n   * Invoked when the component is about to update due to a transition from\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n   * and `nextContext`.\n   *\n   * Use this as an opportunity to perform preparation before an update occurs.\n   *\n   * NOTE: You **cannot** use `this.setState()` in this method.\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @param {ReactReconcileTransaction} transaction\n   * @optional\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n  /**\n   * Invoked when the component's DOM representation has been updated.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been updated.\n   *\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @param {?object} prevContext\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n  /**\n   * Invoked when the component is about to be removed from its parent and have\n   * its DOM representation destroyed.\n   *\n   * Use this as an opportunity to deallocate any external resources.\n   *\n   * NOTE: There is no `componentDidUnmount` since your component will have been\n   * destroyed by that point.\n   *\n   * @optional\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n  // ==== Advanced methods ====\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   * @overridable\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n};\n\n/**\n * Mapping from class specification keys to special processing functions.\n *\n * Although these are declared like instance properties in the specification\n * when defining classes using `React.createClass`, they are actually static\n * and are accessible on the constructor instead of the prototype. Despite\n * being static, they must be defined outside of the \"statics\" key under\n * which all other static methods are defined.\n */\nvar RESERVED_SPEC_KEYS = {\n  displayName: function (Constructor, displayName) {\n    Constructor.displayName = displayName;\n  },\n  mixins: function (Constructor, mixins) {\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        mixSpecIntoComponent(Constructor, mixins[i]);\n      }\n    }\n  },\n  childContextTypes: function (Constructor, childContextTypes) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);\n    }\n    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);\n  },\n  contextTypes: function (Constructor, contextTypes) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);\n    }\n    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);\n  },\n  /**\n   * Special case getDefaultProps which should move into statics but requires\n   * automatic merging.\n   */\n  getDefaultProps: function (Constructor, getDefaultProps) {\n    if (Constructor.getDefaultProps) {\n      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);\n    } else {\n      Constructor.getDefaultProps = getDefaultProps;\n    }\n  },\n  propTypes: function (Constructor, propTypes) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);\n    }\n    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);\n  },\n  statics: function (Constructor, statics) {\n    mixStaticSpecIntoComponent(Constructor, statics);\n  }\n};\nfunction validateTypeDef(Constructor, typeDef, location) {\n  for (var propName in typeDef) {\n    if (typeDef.hasOwnProperty(propName)) {\n      // use a warning instead of an invariant so components\n      // don't show up in prod but not in __DEV__\n      \"production\" !== process.env.NODE_ENV ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : null;\n    }\n  }\n}\nfunction validateMethodOverride(proto, name) {\n  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;\n\n  // Disallow overriding of base class methods unless explicitly allowed.\n  if (ReactClassMixin.hasOwnProperty(name)) {\n    \"production\" !== process.env.NODE_ENV ? invariant(specPolicy === SpecPolicy.OVERRIDE_BASE, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE);\n  }\n\n  // Disallow defining methods more than once unless explicitly allowed.\n  if (proto.hasOwnProperty(name)) {\n    \"production\" !== process.env.NODE_ENV ? invariant(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED);\n  }\n}\n\n/**\n * Mixin helper which handles policy validation and reserved\n * specification keys when building React classses.\n */\nfunction mixSpecIntoComponent(Constructor, spec) {\n  if (!spec) {\n    return;\n  }\n  \"production\" !== process.env.NODE_ENV ? invariant(typeof spec !== 'function', 'ReactClass: You\\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(typeof spec !== 'function');\n  \"production\" !== process.env.NODE_ENV ? invariant(!ReactElement.isValidElement(spec), 'ReactClass: You\\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(!ReactElement.isValidElement(spec));\n  var proto = Constructor.prototype;\n\n  // By handling mixins before any other properties, we ensure the same\n  // chaining order is applied to methods with DEFINE_MANY policy, whether\n  // mixins are listed before or after these methods in the spec.\n  if (spec.hasOwnProperty(MIXINS_KEY)) {\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n  }\n  for (var name in spec) {\n    if (!spec.hasOwnProperty(name)) {\n      continue;\n    }\n    if (name === MIXINS_KEY) {\n      // We have already handled mixins in a special case above\n      continue;\n    }\n    var property = spec[name];\n    validateMethodOverride(proto, name);\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](Constructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactClass methods (in the \"interface\").\n      // 2. Overridden methods (that were mixed in).\n      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      var markedDontBind = property && property.__reactDontBind;\n      var isFunction = typeof property === 'function';\n      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && !markedDontBind;\n      if (shouldAutoBind) {\n        if (!proto.__reactAutoBindMap) {\n          proto.__reactAutoBindMap = {};\n        }\n        proto.__reactAutoBindMap[name] = property;\n        proto[name] = property;\n      } else {\n        if (isAlreadyDefined) {\n          var specPolicy = ReactClassInterface[name];\n\n          // These cases should already be caught by validateMethodOverride\n          \"production\" !== process.env.NODE_ENV ? invariant(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY));\n\n          // For methods which are defined more than once, call the existing\n          // methods before calling the new property, merging if appropriate.\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] = createMergedResultFunction(proto[name], property);\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {\n            proto[name] = createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] = property;\n          if (\"production\" !== process.env.NODE_ENV) {\n            // Add verbose displayName to the function, which helps when looking\n            // at profiling tools.\n            if (typeof property === 'function' && spec.displayName) {\n              proto[name].displayName = spec.displayName + '_' + name;\n            }\n          }\n        }\n      }\n    }\n  }\n}\nfunction mixStaticSpecIntoComponent(Constructor, statics) {\n  if (!statics) {\n    return;\n  }\n  for (var name in statics) {\n    var property = statics[name];\n    if (!statics.hasOwnProperty(name)) {\n      continue;\n    }\n    var isReserved = name in RESERVED_SPEC_KEYS;\n    \"production\" !== process.env.NODE_ENV ? invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(!isReserved);\n    var isInherited = name in Constructor;\n    \"production\" !== process.env.NODE_ENV ? invariant(!isInherited, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(!isInherited);\n    Constructor[name] = property;\n  }\n}\n\n/**\n * Merge two objects, but throw if both contain the same key.\n *\n * @param {object} one The first object, which is mutated.\n * @param {object} two The second object\n * @return {object} one after it has been mutated to contain everything in two.\n */\nfunction mergeIntoWithNoDuplicateKeys(one, two) {\n  \"production\" !== process.env.NODE_ENV ? invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(one && two && typeof one === 'object' && typeof two === 'object');\n  for (var key in two) {\n    if (two.hasOwnProperty(key)) {\n      \"production\" !== process.env.NODE_ENV ? invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(one[key] === undefined);\n      one[key] = two[key];\n    }\n  }\n  return one;\n}\n\n/**\n * Creates a function that invokes two functions and merges their return values.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    var a = one.apply(this, arguments);\n    var b = two.apply(this, arguments);\n    if (a == null) {\n      return b;\n    } else if (b == null) {\n      return a;\n    }\n    var c = {};\n    mergeIntoWithNoDuplicateKeys(c, a);\n    mergeIntoWithNoDuplicateKeys(c, b);\n    return c;\n  };\n}\n\n/**\n * Creates a function that invokes two functions and ignores their return vales.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n\n/**\n * Binds a method to the component.\n *\n * @param {object} component Component whose method is going to be bound.\n * @param {function} method Method to be bound.\n * @return {function} The bound method.\n */\nfunction bindAutoBindMethod(component, method) {\n  var boundMethod = method.bind(component);\n  if (\"production\" !== process.env.NODE_ENV) {\n    boundMethod.__reactBoundContext = component;\n    boundMethod.__reactBoundMethod = method;\n    boundMethod.__reactBoundArguments = null;\n    var componentName = component.constructor.displayName;\n    var _bind = boundMethod.bind;\n    /* eslint-disable block-scoped-var, no-undef */\n    boundMethod.bind = function (newThis) {\n      for (var args = [], $__0 = 1, $__1 = arguments.length; $__0 < $__1; $__0++) args.push(arguments[$__0]);\n      // User is trying to bind() an autobound method; we effectively will\n      // ignore the value of \"this\" that the user is trying to use, so\n      // let's warn.\n      if (newThis !== component && newThis !== null) {\n        \"production\" !== process.env.NODE_ENV ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : null;\n      } else if (!args.length) {\n        \"production\" !== process.env.NODE_ENV ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : null;\n        return boundMethod;\n      }\n      var reboundMethod = _bind.apply(boundMethod, arguments);\n      reboundMethod.__reactBoundContext = component;\n      reboundMethod.__reactBoundMethod = method;\n      reboundMethod.__reactBoundArguments = args;\n      return reboundMethod;\n      /* eslint-enable */\n    };\n  }\n  return boundMethod;\n}\n\n/**\n * Binds all auto-bound methods in a component.\n *\n * @param {object} component Component whose method is going to be bound.\n */\nfunction bindAutoBindMethods(component) {\n  for (var autoBindKey in component.__reactAutoBindMap) {\n    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\n      var method = component.__reactAutoBindMap[autoBindKey];\n      component[autoBindKey] = bindAutoBindMethod(component, ReactErrorUtils.guard(method, component.constructor.displayName + '.' + autoBindKey));\n    }\n  }\n}\nvar typeDeprecationDescriptor = {\n  enumerable: false,\n  get: function () {\n    var displayName = this.displayName || this.name || 'Component';\n    \"production\" !== process.env.NODE_ENV ? warning(false, '%s.type is deprecated. Use %s directly to access the class.', displayName, displayName) : null;\n    Object.defineProperty(this, 'type', {\n      value: this\n    });\n    return this;\n  }\n};\n\n/**\n * Add more to the ReactClass base class. These are all legacy features and\n * therefore not already part of the modern ReactComponent.\n */\nvar ReactClassMixin = {\n  /**\n   * TODO: This will be deprecated because state should always keep a consistent\n   * type signature and the only use case for this, is to avoid that.\n   */\n  replaceState: function (newState, callback) {\n    ReactUpdateQueue.enqueueReplaceState(this, newState);\n    if (callback) {\n      ReactUpdateQueue.enqueueCallback(this, callback);\n    }\n  },\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function () {\n    if (\"production\" !== process.env.NODE_ENV) {\n      var owner = ReactCurrentOwner.current;\n      if (owner !== null) {\n        \"production\" !== process.env.NODE_ENV ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : null;\n        owner._warnedAboutRefsInRender = true;\n      }\n    }\n    var internalInstance = ReactInstanceMap.get(this);\n    return internalInstance && internalInstance !== ReactLifeCycle.currentlyMountingInstance;\n  },\n  /**\n   * Sets a subset of the props.\n   *\n   * @param {object} partialProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @public\n   * @deprecated\n   */\n  setProps: function (partialProps, callback) {\n    ReactUpdateQueue.enqueueSetProps(this, partialProps);\n    if (callback) {\n      ReactUpdateQueue.enqueueCallback(this, callback);\n    }\n  },\n  /**\n   * Replace all the props.\n   *\n   * @param {object} newProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @public\n   * @deprecated\n   */\n  replaceProps: function (newProps, callback) {\n    ReactUpdateQueue.enqueueReplaceProps(this, newProps);\n    if (callback) {\n      ReactUpdateQueue.enqueueCallback(this, callback);\n    }\n  }\n};\nvar ReactClassComponent = function () {};\nassign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\n\n/**\n * Module for creating composite components.\n *\n * @class ReactClass\n */\nvar ReactClass = {\n  /**\n   * Creates a composite component class given a class specification.\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  createClass: function (spec) {\n    var Constructor = function (props, context) {\n      // This constructor is overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (\"production\" !== process.env.NODE_ENV) {\n        \"production\" !== process.env.NODE_ENV ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : null;\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindMap) {\n        bindAutoBindMethods(this);\n      }\n      this.props = props;\n      this.context = context;\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (\"production\" !== process.env.NODE_ENV) {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      \"production\" !== process.env.NODE_ENV ? invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(typeof initialState === 'object' && !Array.isArray(initialState));\n      this.state = initialState;\n    };\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n    mixSpecIntoComponent(Constructor, spec);\n\n    // Initialize the defaultProps property after all mixins have been merged\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n    if (\"production\" !== process.env.NODE_ENV) {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n    \"production\" !== process.env.NODE_ENV ? invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.') : invariant(Constructor.prototype.render);\n    if (\"production\" !== process.env.NODE_ENV) {\n      \"production\" !== process.env.NODE_ENV ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : null;\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    // Legacy hook\n    Constructor.type = Constructor;\n    if (\"production\" !== process.env.NODE_ENV) {\n      try {\n        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);\n      } catch (x) {\n        // IE will fail on defineProperty (es5-shim/sham too)\n      }\n    }\n    return Constructor;\n  },\n  injection: {\n    injectMixin: function (mixin) {\n      injectedMixins.push(mixin);\n    }\n  }\n};\nmodule.exports = ReactClass;","map":{"version":3,"names":["ReactComponent","require","ReactCurrentOwner","ReactElement","ReactErrorUtils","ReactInstanceMap","ReactLifeCycle","ReactPropTypeLocations","ReactPropTypeLocationNames","ReactUpdateQueue","assign","invariant","keyMirror","keyOf","warning","MIXINS_KEY","mixins","SpecPolicy","DEFINE_ONCE","DEFINE_MANY","OVERRIDE_BASE","DEFINE_MANY_MERGED","injectedMixins","ReactClassInterface","statics","propTypes","contextTypes","childContextTypes","getDefaultProps","getInitialState","getChildContext","render","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","componentWillUnmount","updateComponent","RESERVED_SPEC_KEYS","displayName","Constructor","i","length","mixSpecIntoComponent","process","env","NODE_ENV","validateTypeDef","childContext","context","createMergedResultFunction","prop","mixStaticSpecIntoComponent","typeDef","location","propName","hasOwnProperty","validateMethodOverride","proto","name","specPolicy","ReactClassMixin","spec","isValidElement","prototype","property","isReactClassMethod","isAlreadyDefined","markedDontBind","__reactDontBind","isFunction","shouldAutoBind","__reactAutoBindMap","createChainedFunction","isReserved","isInherited","mergeIntoWithNoDuplicateKeys","one","two","key","undefined","mergedResult","a","apply","arguments","b","c","chainedFunction","bindAutoBindMethod","component","method","boundMethod","bind","__reactBoundContext","__reactBoundMethod","__reactBoundArguments","componentName","constructor","_bind","newThis","args","$__0","$__1","push","reboundMethod","bindAutoBindMethods","autoBindKey","guard","typeDeprecationDescriptor","enumerable","get","Object","defineProperty","value","replaceState","newState","callback","enqueueReplaceState","enqueueCallback","isMounted","owner","current","_warnedAboutRefsInRender","getName","internalInstance","currentlyMountingInstance","setProps","partialProps","enqueueSetProps","replaceProps","newProps","enqueueReplaceProps","ReactClassComponent","ReactClass","createClass","props","state","initialState","_isMockFunction","Array","isArray","forEach","defaultProps","isReactClassApproved","componentShouldUpdate","methodName","type","x","injection","injectMixin","mixin","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/ReactClass.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactClass\n */\n\n'use strict';\n\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactErrorUtils = require(\"./ReactErrorUtils\");\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\nvar ReactLifeCycle = require(\"./ReactLifeCycle\");\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\nvar ReactUpdateQueue = require(\"./ReactUpdateQueue\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\nvar keyMirror = require(\"./keyMirror\");\nvar keyOf = require(\"./keyOf\");\nvar warning = require(\"./warning\");\n\nvar MIXINS_KEY = keyOf({mixins: null});\n\n/**\n * Policies that describe methods in `ReactClassInterface`.\n */\nvar SpecPolicy = keyMirror({\n  /**\n   * These methods may be defined only once by the class specification or mixin.\n   */\n  DEFINE_ONCE: null,\n  /**\n   * These methods may be defined by both the class specification and mixins.\n   * Subsequent definitions will be chained. These methods must return void.\n   */\n  DEFINE_MANY: null,\n  /**\n   * These methods are overriding the base class.\n   */\n  OVERRIDE_BASE: null,\n  /**\n   * These methods are similar to DEFINE_MANY, except we assume they return\n   * objects. We try to merge the keys of the return values of all the mixed in\n   * functions. If there is a key conflict we throw.\n   */\n  DEFINE_MANY_MERGED: null\n});\n\n\nvar injectedMixins = [];\n\n/**\n * Composite components are higher-level components that compose other composite\n * or native components.\n *\n * To create a new type of `ReactClass`, pass a specification of\n * your new class to `React.createClass`. The only requirement of your class\n * specification is that you implement a `render` method.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return <div>Hello World</div>;\n *     }\n *   });\n *\n * The class specification supports a specific protocol of methods that have\n * special meaning (e.g. `render`). See `ReactClassInterface` for\n * more the comprehensive protocol. Any other properties and methods in the\n * class specification will available on the prototype.\n *\n * @interface ReactClassInterface\n * @internal\n */\nvar ReactClassInterface = {\n\n  /**\n   * An array of Mixin objects to include when defining your component.\n   *\n   * @type {array}\n   * @optional\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * An object containing properties and methods that should be defined on\n   * the component's constructor instead of its prototype (static methods).\n   *\n   * @type {object}\n   * @optional\n   */\n  statics: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of prop types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  propTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  contextTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types this component sets for its children.\n   *\n   * @type {object}\n   * @optional\n   */\n  childContextTypes: SpecPolicy.DEFINE_MANY,\n\n  // ==== Definition methods ====\n\n  /**\n   * Invoked when the component is mounted. Values in the mapping will be set on\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\n   *\n   * This method is invoked before `getInitialState` and therefore cannot rely\n   * on `this.state` or use `this.setState`.\n   *\n   * @return {object}\n   * @optional\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Invoked once before the component is mounted. The return value will be used\n   * as the initial value of `this.state`.\n   *\n   *   getInitialState: function() {\n   *     return {\n   *       isOn: false,\n   *       fooBaz: new BazFoo()\n   *     }\n   *   }\n   *\n   * @return {object}\n   * @optional\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * @return {object}\n   * @optional\n   */\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Uses props from `this.props` and state from `this.state` to render the\n   * structure of the component.\n   *\n   * No guarantees are made about when or how often this method is invoked, so\n   * it must not have side effects.\n   *\n   *   render: function() {\n   *     var name = this.props.name;\n   *     return <div>Hello, {name}!</div>;\n   *   }\n   *\n   * @return {ReactComponent}\n   * @nosideeffects\n   * @required\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n\n\n\n  // ==== Delegate methods ====\n\n  /**\n   * Invoked when the component is initially created and about to be mounted.\n   * This may have side effects, but any external subscriptions or data created\n   * by this method must be cleaned up in `componentWillUnmount`.\n   *\n   * @optional\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component has been mounted and has a DOM representation.\n   * However, there is no guarantee that the DOM node is in the document.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been mounted (initialized and rendered) for the first time.\n   *\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked before the component receives new props.\n   *\n   * Use this as an opportunity to react to a prop transition by updating the\n   * state using `this.setState`. Current props are accessed via `this.props`.\n   *\n   *   componentWillReceiveProps: function(nextProps, nextContext) {\n   *     this.setState({\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n   *     });\n   *   }\n   *\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n   * transition may cause a state change, but the opposite is not true. If you\n   * need it, you are probably looking for `componentWillUpdate`.\n   *\n   * @param {object} nextProps\n   * @optional\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked while deciding if the component should be updated as a result of\n   * receiving new props, state and/or context.\n   *\n   * Use this as an opportunity to `return false` when you're certain that the\n   * transition to the new props/state/context will not require a component\n   * update.\n   *\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n   *     return !equal(nextProps, this.props) ||\n   *       !equal(nextState, this.state) ||\n   *       !equal(nextContext, this.context);\n   *   }\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @return {boolean} True if the component should update.\n   * @optional\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n\n  /**\n   * Invoked when the component is about to update due to a transition from\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n   * and `nextContext`.\n   *\n   * Use this as an opportunity to perform preparation before an update occurs.\n   *\n   * NOTE: You **cannot** use `this.setState()` in this method.\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @param {ReactReconcileTransaction} transaction\n   * @optional\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component's DOM representation has been updated.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been updated.\n   *\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @param {?object} prevContext\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component is about to be removed from its parent and have\n   * its DOM representation destroyed.\n   *\n   * Use this as an opportunity to deallocate any external resources.\n   *\n   * NOTE: There is no `componentDidUnmount` since your component will have been\n   * destroyed by that point.\n   *\n   * @optional\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n\n\n\n  // ==== Advanced methods ====\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   * @overridable\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n\n};\n\n/**\n * Mapping from class specification keys to special processing functions.\n *\n * Although these are declared like instance properties in the specification\n * when defining classes using `React.createClass`, they are actually static\n * and are accessible on the constructor instead of the prototype. Despite\n * being static, they must be defined outside of the \"statics\" key under\n * which all other static methods are defined.\n */\nvar RESERVED_SPEC_KEYS = {\n  displayName: function(Constructor, displayName) {\n    Constructor.displayName = displayName;\n  },\n  mixins: function(Constructor, mixins) {\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        mixSpecIntoComponent(Constructor, mixins[i]);\n      }\n    }\n  },\n  childContextTypes: function(Constructor, childContextTypes) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      validateTypeDef(\n        Constructor,\n        childContextTypes,\n        ReactPropTypeLocations.childContext\n      );\n    }\n    Constructor.childContextTypes = assign(\n      {},\n      Constructor.childContextTypes,\n      childContextTypes\n    );\n  },\n  contextTypes: function(Constructor, contextTypes) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      validateTypeDef(\n        Constructor,\n        contextTypes,\n        ReactPropTypeLocations.context\n      );\n    }\n    Constructor.contextTypes = assign(\n      {},\n      Constructor.contextTypes,\n      contextTypes\n    );\n  },\n  /**\n   * Special case getDefaultProps which should move into statics but requires\n   * automatic merging.\n   */\n  getDefaultProps: function(Constructor, getDefaultProps) {\n    if (Constructor.getDefaultProps) {\n      Constructor.getDefaultProps = createMergedResultFunction(\n        Constructor.getDefaultProps,\n        getDefaultProps\n      );\n    } else {\n      Constructor.getDefaultProps = getDefaultProps;\n    }\n  },\n  propTypes: function(Constructor, propTypes) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      validateTypeDef(\n        Constructor,\n        propTypes,\n        ReactPropTypeLocations.prop\n      );\n    }\n    Constructor.propTypes = assign(\n      {},\n      Constructor.propTypes,\n      propTypes\n    );\n  },\n  statics: function(Constructor, statics) {\n    mixStaticSpecIntoComponent(Constructor, statics);\n  }\n};\n\nfunction validateTypeDef(Constructor, typeDef, location) {\n  for (var propName in typeDef) {\n    if (typeDef.hasOwnProperty(propName)) {\n      // use a warning instead of an invariant so components\n      // don't show up in prod but not in __DEV__\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        typeof typeDef[propName] === 'function',\n        '%s: %s type `%s` is invalid; it must be a function, usually from ' +\n        'React.PropTypes.',\n        Constructor.displayName || 'ReactClass',\n        ReactPropTypeLocationNames[location],\n        propName\n      ) : null);\n    }\n  }\n}\n\nfunction validateMethodOverride(proto, name) {\n  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?\n    ReactClassInterface[name] :\n    null;\n\n  // Disallow overriding of base class methods unless explicitly allowed.\n  if (ReactClassMixin.hasOwnProperty(name)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      specPolicy === SpecPolicy.OVERRIDE_BASE,\n      'ReactClassInterface: You are attempting to override ' +\n      '`%s` from your class specification. Ensure that your method names ' +\n      'do not overlap with React methods.',\n      name\n    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));\n  }\n\n  // Disallow defining methods more than once unless explicitly allowed.\n  if (proto.hasOwnProperty(name)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      specPolicy === SpecPolicy.DEFINE_MANY ||\n      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,\n      'ReactClassInterface: You are attempting to define ' +\n      '`%s` on your component more than once. This conflict may be due ' +\n      'to a mixin.',\n      name\n    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||\n    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));\n  }\n}\n\n/**\n * Mixin helper which handles policy validation and reserved\n * specification keys when building React classses.\n */\nfunction mixSpecIntoComponent(Constructor, spec) {\n  if (!spec) {\n    return;\n  }\n\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    typeof spec !== 'function',\n    'ReactClass: You\\'re attempting to ' +\n    'use a component class as a mixin. Instead, just use a regular object.'\n  ) : invariant(typeof spec !== 'function'));\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !ReactElement.isValidElement(spec),\n    'ReactClass: You\\'re attempting to ' +\n    'use a component as a mixin. Instead, just use a regular object.'\n  ) : invariant(!ReactElement.isValidElement(spec)));\n\n  var proto = Constructor.prototype;\n\n  // By handling mixins before any other properties, we ensure the same\n  // chaining order is applied to methods with DEFINE_MANY policy, whether\n  // mixins are listed before or after these methods in the spec.\n  if (spec.hasOwnProperty(MIXINS_KEY)) {\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n  }\n\n  for (var name in spec) {\n    if (!spec.hasOwnProperty(name)) {\n      continue;\n    }\n\n    if (name === MIXINS_KEY) {\n      // We have already handled mixins in a special case above\n      continue;\n    }\n\n    var property = spec[name];\n    validateMethodOverride(proto, name);\n\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](Constructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactClass methods (in the \"interface\").\n      // 2. Overridden methods (that were mixed in).\n      var isReactClassMethod =\n        ReactClassInterface.hasOwnProperty(name);\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      var markedDontBind = property && property.__reactDontBind;\n      var isFunction = typeof property === 'function';\n      var shouldAutoBind =\n        isFunction &&\n        !isReactClassMethod &&\n        !isAlreadyDefined &&\n        !markedDontBind;\n\n      if (shouldAutoBind) {\n        if (!proto.__reactAutoBindMap) {\n          proto.__reactAutoBindMap = {};\n        }\n        proto.__reactAutoBindMap[name] = property;\n        proto[name] = property;\n      } else {\n        if (isAlreadyDefined) {\n          var specPolicy = ReactClassInterface[name];\n\n          // These cases should already be caught by validateMethodOverride\n          (\"production\" !== process.env.NODE_ENV ? invariant(\n            isReactClassMethod && (\n              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)\n            ),\n            'ReactClass: Unexpected spec policy %s for key %s ' +\n            'when mixing in component specs.',\n            specPolicy,\n            name\n          ) : invariant(isReactClassMethod && (\n            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)\n          )));\n\n          // For methods which are defined more than once, call the existing\n          // methods before calling the new property, merging if appropriate.\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] = createMergedResultFunction(proto[name], property);\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {\n            proto[name] = createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] = property;\n          if (\"production\" !== process.env.NODE_ENV) {\n            // Add verbose displayName to the function, which helps when looking\n            // at profiling tools.\n            if (typeof property === 'function' && spec.displayName) {\n              proto[name].displayName = spec.displayName + '_' + name;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction mixStaticSpecIntoComponent(Constructor, statics) {\n  if (!statics) {\n    return;\n  }\n  for (var name in statics) {\n    var property = statics[name];\n    if (!statics.hasOwnProperty(name)) {\n      continue;\n    }\n\n    var isReserved = name in RESERVED_SPEC_KEYS;\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !isReserved,\n      'ReactClass: You are attempting to define a reserved ' +\n      'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +\n      'as an instance property instead; it will still be accessible on the ' +\n      'constructor.',\n      name\n    ) : invariant(!isReserved));\n\n    var isInherited = name in Constructor;\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !isInherited,\n      'ReactClass: You are attempting to define ' +\n      '`%s` on your component more than once. This conflict may be ' +\n      'due to a mixin.',\n      name\n    ) : invariant(!isInherited));\n    Constructor[name] = property;\n  }\n}\n\n/**\n * Merge two objects, but throw if both contain the same key.\n *\n * @param {object} one The first object, which is mutated.\n * @param {object} two The second object\n * @return {object} one after it has been mutated to contain everything in two.\n */\nfunction mergeIntoWithNoDuplicateKeys(one, two) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    one && two && typeof one === 'object' && typeof two === 'object',\n    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'\n  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));\n\n  for (var key in two) {\n    if (two.hasOwnProperty(key)) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        one[key] === undefined,\n        'mergeIntoWithNoDuplicateKeys(): ' +\n        'Tried to merge two objects with the same key: `%s`. This conflict ' +\n        'may be due to a mixin; in particular, this may be caused by two ' +\n        'getInitialState() or getDefaultProps() methods returning objects ' +\n        'with clashing keys.',\n        key\n      ) : invariant(one[key] === undefined));\n      one[key] = two[key];\n    }\n  }\n  return one;\n}\n\n/**\n * Creates a function that invokes two functions and merges their return values.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    var a = one.apply(this, arguments);\n    var b = two.apply(this, arguments);\n    if (a == null) {\n      return b;\n    } else if (b == null) {\n      return a;\n    }\n    var c = {};\n    mergeIntoWithNoDuplicateKeys(c, a);\n    mergeIntoWithNoDuplicateKeys(c, b);\n    return c;\n  };\n}\n\n/**\n * Creates a function that invokes two functions and ignores their return vales.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n\n/**\n * Binds a method to the component.\n *\n * @param {object} component Component whose method is going to be bound.\n * @param {function} method Method to be bound.\n * @return {function} The bound method.\n */\nfunction bindAutoBindMethod(component, method) {\n  var boundMethod = method.bind(component);\n  if (\"production\" !== process.env.NODE_ENV) {\n    boundMethod.__reactBoundContext = component;\n    boundMethod.__reactBoundMethod = method;\n    boundMethod.__reactBoundArguments = null;\n    var componentName = component.constructor.displayName;\n    var _bind = boundMethod.bind;\n    /* eslint-disable block-scoped-var, no-undef */\n    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n      // User is trying to bind() an autobound method; we effectively will\n      // ignore the value of \"this\" that the user is trying to use, so\n      // let's warn.\n      if (newThis !== component && newThis !== null) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          false,\n          'bind(): React component methods may only be bound to the ' +\n          'component instance. See %s',\n          componentName\n        ) : null);\n      } else if (!args.length) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          false,\n          'bind(): You are binding a component method to the component. ' +\n          'React does this for you automatically in a high-performance ' +\n          'way, so you can safely remove this call. See %s',\n          componentName\n        ) : null);\n        return boundMethod;\n      }\n      var reboundMethod = _bind.apply(boundMethod, arguments);\n      reboundMethod.__reactBoundContext = component;\n      reboundMethod.__reactBoundMethod = method;\n      reboundMethod.__reactBoundArguments = args;\n      return reboundMethod;\n      /* eslint-enable */\n    };\n  }\n  return boundMethod;\n}\n\n/**\n * Binds all auto-bound methods in a component.\n *\n * @param {object} component Component whose method is going to be bound.\n */\nfunction bindAutoBindMethods(component) {\n  for (var autoBindKey in component.__reactAutoBindMap) {\n    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\n      var method = component.__reactAutoBindMap[autoBindKey];\n      component[autoBindKey] = bindAutoBindMethod(\n        component,\n        ReactErrorUtils.guard(\n          method,\n          component.constructor.displayName + '.' + autoBindKey\n        )\n      );\n    }\n  }\n}\n\nvar typeDeprecationDescriptor = {\n  enumerable: false,\n  get: function() {\n    var displayName = this.displayName || this.name || 'Component';\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      false,\n      '%s.type is deprecated. Use %s directly to access the class.',\n      displayName,\n      displayName\n    ) : null);\n    Object.defineProperty(this, 'type', {\n      value: this\n    });\n    return this;\n  }\n};\n\n/**\n * Add more to the ReactClass base class. These are all legacy features and\n * therefore not already part of the modern ReactComponent.\n */\nvar ReactClassMixin = {\n\n  /**\n   * TODO: This will be deprecated because state should always keep a consistent\n   * type signature and the only use case for this, is to avoid that.\n   */\n  replaceState: function(newState, callback) {\n    ReactUpdateQueue.enqueueReplaceState(this, newState);\n    if (callback) {\n      ReactUpdateQueue.enqueueCallback(this, callback);\n    }\n  },\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function() {\n    if (\"production\" !== process.env.NODE_ENV) {\n      var owner = ReactCurrentOwner.current;\n      if (owner !== null) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          owner._warnedAboutRefsInRender,\n          '%s is accessing isMounted inside its render() function. ' +\n          'render() should be a pure function of props and state. It should ' +\n          'never access something that requires stale data from the previous ' +\n          'render, such as refs. Move this logic to componentDidMount and ' +\n          'componentDidUpdate instead.',\n          owner.getName() || 'A component'\n        ) : null);\n        owner._warnedAboutRefsInRender = true;\n      }\n    }\n    var internalInstance = ReactInstanceMap.get(this);\n    return (\n      internalInstance &&\n      internalInstance !== ReactLifeCycle.currentlyMountingInstance\n    );\n  },\n\n  /**\n   * Sets a subset of the props.\n   *\n   * @param {object} partialProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @public\n   * @deprecated\n   */\n  setProps: function(partialProps, callback) {\n    ReactUpdateQueue.enqueueSetProps(this, partialProps);\n    if (callback) {\n      ReactUpdateQueue.enqueueCallback(this, callback);\n    }\n  },\n\n  /**\n   * Replace all the props.\n   *\n   * @param {object} newProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @public\n   * @deprecated\n   */\n  replaceProps: function(newProps, callback) {\n    ReactUpdateQueue.enqueueReplaceProps(this, newProps);\n    if (callback) {\n      ReactUpdateQueue.enqueueCallback(this, callback);\n    }\n  }\n};\n\nvar ReactClassComponent = function() {};\nassign(\n  ReactClassComponent.prototype,\n  ReactComponent.prototype,\n  ReactClassMixin\n);\n\n/**\n * Module for creating composite components.\n *\n * @class ReactClass\n */\nvar ReactClass = {\n\n  /**\n   * Creates a composite component class given a class specification.\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  createClass: function(spec) {\n    var Constructor = function(props, context) {\n      // This constructor is overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (\"production\" !== process.env.NODE_ENV) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          this instanceof Constructor,\n          'Something is calling a React component directly. Use a factory or ' +\n          'JSX instead. See: https://fb.me/react-legacyfactory'\n        ) : null);\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindMap) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (\"production\" !== process.env.NODE_ENV) {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (typeof initialState === 'undefined' &&\n            this.getInitialState._isMockFunction) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        typeof initialState === 'object' && !Array.isArray(initialState),\n        '%s.getInitialState(): must return an object or null',\n        Constructor.displayName || 'ReactCompositeComponent'\n      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));\n\n      this.state = initialState;\n    };\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n\n    injectedMixins.forEach(\n      mixSpecIntoComponent.bind(null, Constructor)\n    );\n\n    mixSpecIntoComponent(Constructor, spec);\n\n    // Initialize the defaultProps property after all mixins have been merged\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Constructor.prototype.render,\n      'createClass(...): Class specification must implement a `render` method.'\n    ) : invariant(Constructor.prototype.render));\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        !Constructor.prototype.componentShouldUpdate,\n        '%s has a method called ' +\n        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n        'The name is phrased as a question because the function is ' +\n        'expected to return a value.',\n        spec.displayName || 'A component'\n      ) : null);\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    // Legacy hook\n    Constructor.type = Constructor;\n    if (\"production\" !== process.env.NODE_ENV) {\n      try {\n        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);\n      } catch (x) {\n        // IE will fail on defineProperty (es5-shim/sham too)\n      }\n    }\n\n    return Constructor;\n  },\n\n  injection: {\n    injectMixin: function(mixin) {\n      injectedMixins.push(mixin);\n    }\n  }\n\n};\n\nmodule.exports = ReactClass;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAChD,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AACtD,IAAIE,YAAY,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAC5C,IAAIG,eAAe,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAClD,IAAII,gBAAgB,GAAGJ,OAAO,CAAC,oBAAoB,CAAC;AACpD,IAAIK,cAAc,GAAGL,OAAO,CAAC,kBAAkB,CAAC;AAChD,IAAIM,sBAAsB,GAAGN,OAAO,CAAC,0BAA0B,CAAC;AAChE,IAAIO,0BAA0B,GAAGP,OAAO,CAAC,8BAA8B,CAAC;AACxE,IAAIQ,gBAAgB,GAAGR,OAAO,CAAC,oBAAoB,CAAC;AAEpD,IAAIS,MAAM,GAAGT,OAAO,CAAC,iBAAiB,CAAC;AACvC,IAAIU,SAAS,GAAGV,OAAO,CAAC,aAAa,CAAC;AACtC,IAAIW,SAAS,GAAGX,OAAO,CAAC,aAAa,CAAC;AACtC,IAAIY,KAAK,GAAGZ,OAAO,CAAC,SAAS,CAAC;AAC9B,IAAIa,OAAO,GAAGb,OAAO,CAAC,WAAW,CAAC;AAElC,IAAIc,UAAU,GAAGF,KAAK,CAAC;EAACG,MAAM,EAAE;AAAI,CAAC,CAAC;;AAEtC;AACA;AACA;AACA,IAAIC,UAAU,GAAGL,SAAS,CAAC;EACzB;AACF;AACA;EACEM,WAAW,EAAE,IAAI;EACjB;AACF;AACA;AACA;EACEC,WAAW,EAAE,IAAI;EACjB;AACF;AACA;EACEC,aAAa,EAAE,IAAI;EACnB;AACF;AACA;AACA;AACA;EACEC,kBAAkB,EAAE;AACtB,CAAC,CAAC;AAGF,IAAIC,cAAc,GAAG,EAAE;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,mBAAmB,GAAG;EAExB;AACF;AACA;AACA;AACA;AACA;EACEP,MAAM,EAAEC,UAAU,CAACE,WAAW;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;EACEK,OAAO,EAAEP,UAAU,CAACE,WAAW;EAE/B;AACF;AACA;AACA;AACA;AACA;EACEM,SAAS,EAAER,UAAU,CAACE,WAAW;EAEjC;AACF;AACA;AACA;AACA;AACA;EACEO,YAAY,EAAET,UAAU,CAACE,WAAW;EAEpC;AACF;AACA;AACA;AACA;AACA;EACEQ,iBAAiB,EAAEV,UAAU,CAACE,WAAW;EAEzC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACES,eAAe,EAAEX,UAAU,CAACI,kBAAkB;EAE9C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEQ,eAAe,EAAEZ,UAAU,CAACI,kBAAkB;EAE9C;AACF;AACA;AACA;EACES,eAAe,EAAEb,UAAU,CAACI,kBAAkB;EAE9C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEU,MAAM,EAAEd,UAAU,CAACC,WAAW;EAI9B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEc,kBAAkB,EAAEf,UAAU,CAACE,WAAW;EAE1C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEc,iBAAiB,EAAEhB,UAAU,CAACE,WAAW;EAEzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEe,yBAAyB,EAAEjB,UAAU,CAACE,WAAW;EAEjD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEgB,qBAAqB,EAAElB,UAAU,CAACC,WAAW;EAE7C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEkB,mBAAmB,EAAEnB,UAAU,CAACE,WAAW;EAE3C;AACF;AACA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}