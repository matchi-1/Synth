{"ast":null,"code":"import { DOCUMENT_MODE } from '../common/html.js';\nfunction createTextNode(value) {\n  return {\n    nodeName: '#text',\n    value,\n    parentNode: null\n  };\n}\nexport const defaultTreeAdapter = {\n  //Node construction\n  createDocument() {\n    return {\n      nodeName: '#document',\n      mode: DOCUMENT_MODE.NO_QUIRKS,\n      childNodes: []\n    };\n  },\n  createDocumentFragment() {\n    return {\n      nodeName: '#document-fragment',\n      childNodes: []\n    };\n  },\n  createElement(tagName, namespaceURI, attrs) {\n    return {\n      nodeName: tagName,\n      tagName,\n      attrs,\n      namespaceURI,\n      childNodes: [],\n      parentNode: null\n    };\n  },\n  createCommentNode(data) {\n    return {\n      nodeName: '#comment',\n      data,\n      parentNode: null\n    };\n  },\n  //Tree mutation\n  appendChild(parentNode, newNode) {\n    parentNode.childNodes.push(newNode);\n    newNode.parentNode = parentNode;\n  },\n  insertBefore(parentNode, newNode, referenceNode) {\n    const insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n    parentNode.childNodes.splice(insertionIdx, 0, newNode);\n    newNode.parentNode = parentNode;\n  },\n  setTemplateContent(templateElement, contentElement) {\n    templateElement.content = contentElement;\n  },\n  getTemplateContent(templateElement) {\n    return templateElement.content;\n  },\n  setDocumentType(document, name, publicId, systemId) {\n    const doctypeNode = document.childNodes.find(node => node.nodeName === '#documentType');\n    if (doctypeNode) {\n      doctypeNode.name = name;\n      doctypeNode.publicId = publicId;\n      doctypeNode.systemId = systemId;\n    } else {\n      const node = {\n        nodeName: '#documentType',\n        name,\n        publicId,\n        systemId,\n        parentNode: null\n      };\n      defaultTreeAdapter.appendChild(document, node);\n    }\n  },\n  setDocumentMode(document, mode) {\n    document.mode = mode;\n  },\n  getDocumentMode(document) {\n    return document.mode;\n  },\n  detachNode(node) {\n    if (node.parentNode) {\n      const idx = node.parentNode.childNodes.indexOf(node);\n      node.parentNode.childNodes.splice(idx, 1);\n      node.parentNode = null;\n    }\n  },\n  insertText(parentNode, text) {\n    if (parentNode.childNodes.length > 0) {\n      const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n      if (defaultTreeAdapter.isTextNode(prevNode)) {\n        prevNode.value += text;\n        return;\n      }\n    }\n    defaultTreeAdapter.appendChild(parentNode, createTextNode(text));\n  },\n  insertTextBefore(parentNode, text, referenceNode) {\n    const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n    if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {\n      prevNode.value += text;\n    } else {\n      defaultTreeAdapter.insertBefore(parentNode, createTextNode(text), referenceNode);\n    }\n  },\n  adoptAttributes(recipient, attrs) {\n    const recipientAttrsMap = new Set(recipient.attrs.map(attr => attr.name));\n    for (let j = 0; j < attrs.length; j++) {\n      if (!recipientAttrsMap.has(attrs[j].name)) {\n        recipient.attrs.push(attrs[j]);\n      }\n    }\n  },\n  //Tree traversing\n  getFirstChild(node) {\n    return node.childNodes[0];\n  },\n  getChildNodes(node) {\n    return node.childNodes;\n  },\n  getParentNode(node) {\n    return node.parentNode;\n  },\n  getAttrList(element) {\n    return element.attrs;\n  },\n  //Node data\n  getTagName(element) {\n    return element.tagName;\n  },\n  getNamespaceURI(element) {\n    return element.namespaceURI;\n  },\n  getTextNodeContent(textNode) {\n    return textNode.value;\n  },\n  getCommentNodeContent(commentNode) {\n    return commentNode.data;\n  },\n  getDocumentTypeNodeName(doctypeNode) {\n    return doctypeNode.name;\n  },\n  getDocumentTypeNodePublicId(doctypeNode) {\n    return doctypeNode.publicId;\n  },\n  getDocumentTypeNodeSystemId(doctypeNode) {\n    return doctypeNode.systemId;\n  },\n  //Node types\n  isTextNode(node) {\n    return node.nodeName === '#text';\n  },\n  isCommentNode(node) {\n    return node.nodeName === '#comment';\n  },\n  isDocumentTypeNode(node) {\n    return node.nodeName === '#documentType';\n  },\n  isElementNode(node) {\n    return Object.prototype.hasOwnProperty.call(node, 'tagName');\n  },\n  // Source code location\n  setNodeSourceCodeLocation(node, location) {\n    node.sourceCodeLocation = location;\n  },\n  getNodeSourceCodeLocation(node) {\n    return node.sourceCodeLocation;\n  },\n  updateNodeSourceCodeLocation(node, endLocation) {\n    node.sourceCodeLocation = {\n      ...node.sourceCodeLocation,\n      ...endLocation\n    };\n  }\n};\n//# sourceMappingURL=default.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}