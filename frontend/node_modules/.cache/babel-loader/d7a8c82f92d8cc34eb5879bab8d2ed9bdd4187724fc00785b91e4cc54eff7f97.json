{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExplorerSync = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst defaults_1 = require(\"./defaults\");\nconst ExplorerBase_js_1 = require(\"./ExplorerBase.js\");\nconst merge_1 = require(\"./merge\");\nconst util_js_1 = require(\"./util.js\");\n/**\n * @internal\n */\nclass ExplorerSync extends ExplorerBase_js_1.ExplorerBase {\n  load(filepath) {\n    filepath = path_1.default.resolve(filepath);\n    const load = () => {\n      return this.config.transform(this.#readConfiguration(filepath));\n    };\n    if (this.loadCache) {\n      return (0, util_js_1.emplace)(this.loadCache, filepath, load);\n    }\n    return load();\n  }\n  search(from = '') {\n    if (this.config.metaConfigFilePath) {\n      this.loadingMetaConfig = true;\n      const config = this.load(this.config.metaConfigFilePath);\n      this.loadingMetaConfig = false;\n      if (config && !config.isEmpty) {\n        return config;\n      }\n    }\n    from = path_1.default.resolve(from);\n    const dirs = this.#getDirs(from);\n    const firstDirIter = dirs.next();\n    /* istanbul ignore if -- @preserve */\n    if (firstDirIter.done) {\n      // this should never happen\n      throw new Error(`Could not find any folders to iterate through (start from ${from})`);\n    }\n    let currentDir = firstDirIter.value;\n    const search = () => {\n      /* istanbul ignore if -- @preserve */\n      if ((0, util_js_1.isDirectorySync)(currentDir.path)) {\n        for (const filepath of this.getSearchPlacesForDir(currentDir, defaults_1.globalConfigSearchPlacesSync)) {\n          try {\n            const result = this.#readConfiguration(filepath);\n            if (result !== null && !(result.isEmpty && this.config.ignoreEmptySearchPlaces)) {\n              return this.config.transform(result);\n            }\n          } catch (error) {\n            if (error.code === 'ENOENT' || error.code === 'EISDIR' || error.code === 'ENOTDIR' || error.code === 'EACCES') {\n              continue;\n            }\n            throw error;\n          }\n        }\n      }\n      const nextDirIter = dirs.next();\n      if (!nextDirIter.done) {\n        currentDir = nextDirIter.value;\n        if (this.searchCache) {\n          return (0, util_js_1.emplace)(this.searchCache, currentDir.path, search);\n        }\n        return search();\n      }\n      return this.config.transform(null);\n    };\n    if (this.searchCache) {\n      return (0, util_js_1.emplace)(this.searchCache, from, search);\n    }\n    return search();\n  }\n  #readConfiguration(filepath, importStack = []) {\n    const contents = fs_1.default.readFileSync(filepath, 'utf8');\n    return this.toCosmiconfigResult(filepath, this.#loadConfigFileWithImports(filepath, contents, importStack));\n  }\n  #loadConfigFileWithImports(filepath, contents, importStack) {\n    const loadedContent = this.#loadConfiguration(filepath, contents);\n    if (!loadedContent || !(0, merge_1.hasOwn)(loadedContent, '$import')) {\n      return loadedContent;\n    }\n    const fileDirectory = path_1.default.dirname(filepath);\n    const {\n      $import: imports,\n      ...ownContent\n    } = loadedContent;\n    const importPaths = Array.isArray(imports) ? imports : [imports];\n    const newImportStack = [...importStack, filepath];\n    this.validateImports(filepath, importPaths, newImportStack);\n    const importedConfigs = importPaths.map(importPath => {\n      const fullPath = path_1.default.resolve(fileDirectory, importPath);\n      const result = this.#readConfiguration(fullPath, newImportStack);\n      return result?.config;\n    });\n    return (0, merge_1.mergeAll)([...importedConfigs, ownContent], {\n      mergeArrays: this.config.mergeImportArrays\n    });\n  }\n  #loadConfiguration(filepath, contents) {\n    if (contents.trim() === '') {\n      return;\n    }\n    const extension = path_1.default.extname(filepath);\n    const loader = this.config.loaders[extension || 'noExt'] ?? this.config.loaders['default'];\n    if (!loader) {\n      throw new Error(`No loader specified for ${(0, ExplorerBase_js_1.getExtensionDescription)(extension)}`);\n    }\n    try {\n      const loadedContents = loader(filepath, contents);\n      if (path_1.default.basename(filepath, extension) !== 'package') {\n        return loadedContents;\n      }\n      return (0, util_js_1.getPropertyByPath)(loadedContents, this.config.packageProp ?? this.config.moduleName) ?? null;\n    } catch (error) {\n      error.filepath = filepath;\n      throw error;\n    }\n  }\n  #fileExists(path) {\n    try {\n      fs_1.default.statSync(path);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  *#getDirs(startDir) {\n    switch (this.config.searchStrategy) {\n      case 'none':\n        {\n          // there is no next dir\n          yield {\n            path: startDir,\n            isGlobalConfig: false\n          };\n          return;\n        }\n      case 'project':\n        {\n          let currentDir = startDir;\n          while (true) {\n            yield {\n              path: currentDir,\n              isGlobalConfig: false\n            };\n            for (const ext of ['json', 'yaml']) {\n              const packageFile = path_1.default.join(currentDir, `package.${ext}`);\n              if (this.#fileExists(packageFile)) {\n                break;\n              }\n            }\n            const parentDir = path_1.default.dirname(currentDir);\n            /* istanbul ignore if -- @preserve */\n            if (parentDir === currentDir) {\n              // we're probably at the root of the directory structure\n              break;\n            }\n            currentDir = parentDir;\n          }\n          return;\n        }\n      case 'global':\n        {\n          yield* this.getGlobalDirs(startDir);\n        }\n    }\n  }\n  /**\n   * @deprecated Use {@link ExplorerSync.prototype.load}.\n   */\n  /* istanbul ignore next */\n  loadSync(filepath) {\n    return this.load(filepath);\n  }\n  /**\n   * @deprecated Use {@link ExplorerSync.prototype.search}.\n   */\n  /* istanbul ignore next */\n  searchSync(from = '') {\n    return this.search(from);\n  }\n}\nexports.ExplorerSync = ExplorerSync;","map":{"version":3,"names":["fs_1","__importDefault","require","path_1","defaults_1","ExplorerBase_js_1","merge_1","util_js_1","ExplorerSync","ExplorerBase","load","filepath","default","resolve","config","transform","readConfiguration","loadCache","emplace","search","from","metaConfigFilePath","loadingMetaConfig","isEmpty","dirs","getDirs","firstDirIter","next","done","Error","currentDir","value","isDirectorySync","path","getSearchPlacesForDir","globalConfigSearchPlacesSync","result","ignoreEmptySearchPlaces","error","code","nextDirIter","searchCache","#readConfiguration","importStack","contents","readFileSync","toCosmiconfigResult","loadConfigFileWithImports","#loadConfigFileWithImports","loadedContent","loadConfiguration","hasOwn","fileDirectory","dirname","$import","imports","ownContent","importPaths","Array","isArray","newImportStack","validateImports","importedConfigs","map","importPath","fullPath","mergeAll","mergeArrays","mergeImportArrays","#loadConfiguration","trim","extension","extname","loader","loaders","getExtensionDescription","loadedContents","basename","getPropertyByPath","packageProp","moduleName","fileExists","#fileExists","statSync","e","#getDirs","startDir","searchStrategy","isGlobalConfig","ext","packageFile","join","parentDir","getGlobalDirs","loadSync","searchSync","exports"],"sources":["../src/ExplorerSync.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}