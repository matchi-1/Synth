{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelection\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar getNodeForCharacterOffset = require(\"./getNodeForCharacterOffset\");\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");\n\n/**\n * While `isCollapsed` is available on the Selection object and `collapsed`\n * is available on the Range object, IE11 sometimes gets them wrong.\n * If the anchor/focus nodes and offsets are the same, the range is collapsed.\n */\nfunction isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {\n  return anchorNode === focusNode && anchorOffset === focusOffset;\n}\n\n/**\n * Get the appropriate anchor and focus node/offset pairs for IE.\n *\n * The catch here is that IE's selection API doesn't provide information\n * about whether the selection is forward or backward, so we have to\n * behave as though it's always forward.\n *\n * IE text differs from modern selection in that it behaves as though\n * block elements end with a new line. This means character offsets will\n * differ between the two APIs.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getIEOffsets(node) {\n  var selection = document.selection;\n  var selectedRange = selection.createRange();\n  var selectedLength = selectedRange.text.length;\n\n  // Duplicate selection so we can move range without breaking user selection.\n  var fromStart = selectedRange.duplicate();\n  fromStart.moveToElementText(node);\n  fromStart.setEndPoint('EndToStart', selectedRange);\n  var startOffset = fromStart.text.length;\n  var endOffset = startOffset + selectedLength;\n  return {\n    start: startOffset,\n    end: endOffset\n  };\n}\n\n/**\n * @param {DOMElement} node\n * @return {?object}\n */\nfunction getModernOffsets(node) {\n  var selection = window.getSelection && window.getSelection();\n  if (!selection || selection.rangeCount === 0) {\n    return null;\n  }\n  var anchorNode = selection.anchorNode;\n  var anchorOffset = selection.anchorOffset;\n  var focusNode = selection.focusNode;\n  var focusOffset = selection.focusOffset;\n  var currentRange = selection.getRangeAt(0);\n\n  // If the node and offset values are the same, the selection is collapsed.\n  // `Selection.isCollapsed` is available natively, but IE sometimes gets\n  // this value wrong.\n  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);\n  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;\n  var tempRange = currentRange.cloneRange();\n  tempRange.selectNodeContents(node);\n  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);\n  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);\n  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;\n  var end = start + rangeLength;\n\n  // Detect whether the selection is backward.\n  var detectionRange = document.createRange();\n  detectionRange.setStart(anchorNode, anchorOffset);\n  detectionRange.setEnd(focusNode, focusOffset);\n  var isBackward = detectionRange.collapsed;\n  return {\n    start: isBackward ? end : start,\n    end: isBackward ? start : end\n  };\n}\n\n/**\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setIEOffsets(node, offsets) {\n  var range = document.selection.createRange().duplicate();\n  var start, end;\n  if (typeof offsets.end === 'undefined') {\n    start = offsets.start;\n    end = start;\n  } else if (offsets.start > offsets.end) {\n    start = offsets.end;\n    end = offsets.start;\n  } else {\n    start = offsets.start;\n    end = offsets.end;\n  }\n  range.moveToElementText(node);\n  range.moveStart('character', start);\n  range.setEndPoint('EndToStart', range);\n  range.moveEnd('character', end - start);\n  range.select();\n}\n\n/**\n * In modern non-IE browsers, we can support both forward and backward\n * selections.\n *\n * Note: IE10+ supports the Selection object, but it does not support\n * the `extend` method, which means that even in modern IE, it's not possible\n * to programatically create a backward selection. Thus, for all IE\n * versions, we use the old IE API to create our selections.\n *\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setModernOffsets(node, offsets) {\n  if (!window.getSelection) {\n    return;\n  }\n  var selection = window.getSelection();\n  var length = node[getTextContentAccessor()].length;\n  var start = Math.min(offsets.start, length);\n  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);\n\n  // IE 11 uses modern selection, but doesn't support the extend method.\n  // Flip backward selections, so we can set with a single range.\n  if (!selection.extend && start > end) {\n    var temp = end;\n    end = start;\n    start = temp;\n  }\n  var startMarker = getNodeForCharacterOffset(node, start);\n  var endMarker = getNodeForCharacterOffset(node, end);\n  if (startMarker && endMarker) {\n    var range = document.createRange();\n    range.setStart(startMarker.node, startMarker.offset);\n    selection.removeAllRanges();\n    if (start > end) {\n      selection.addRange(range);\n      selection.extend(endMarker.node, endMarker.offset);\n    } else {\n      range.setEnd(endMarker.node, endMarker.offset);\n      selection.addRange(range);\n    }\n  }\n}\nvar useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);\nvar ReactDOMSelection = {\n  /**\n   * @param {DOMElement} node\n   */\n  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,\n  /**\n   * @param {DOMElement|DOMTextNode} node\n   * @param {object} offsets\n   */\n  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets\n};\nmodule.exports = ReactDOMSelection;","map":{"version":3,"names":["ExecutionEnvironment","require","getNodeForCharacterOffset","getTextContentAccessor","isCollapsed","anchorNode","anchorOffset","focusNode","focusOffset","getIEOffsets","node","selection","document","selectedRange","createRange","selectedLength","text","length","fromStart","duplicate","moveToElementText","setEndPoint","startOffset","endOffset","start","end","getModernOffsets","window","getSelection","rangeCount","currentRange","getRangeAt","isSelectionCollapsed","rangeLength","toString","tempRange","cloneRange","selectNodeContents","setEnd","startContainer","isTempRangeCollapsed","endContainer","detectionRange","setStart","isBackward","collapsed","setIEOffsets","offsets","range","moveStart","moveEnd","select","setModernOffsets","Math","min","extend","temp","startMarker","endMarker","offset","removeAllRanges","addRange","useIEOffsets","canUseDOM","ReactDOMSelection","getOffsets","setOffsets","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/ReactDOMSelection.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelection\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar getNodeForCharacterOffset = require(\"./getNodeForCharacterOffset\");\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");\n\n/**\n * While `isCollapsed` is available on the Selection object and `collapsed`\n * is available on the Range object, IE11 sometimes gets them wrong.\n * If the anchor/focus nodes and offsets are the same, the range is collapsed.\n */\nfunction isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {\n  return anchorNode === focusNode && anchorOffset === focusOffset;\n}\n\n/**\n * Get the appropriate anchor and focus node/offset pairs for IE.\n *\n * The catch here is that IE's selection API doesn't provide information\n * about whether the selection is forward or backward, so we have to\n * behave as though it's always forward.\n *\n * IE text differs from modern selection in that it behaves as though\n * block elements end with a new line. This means character offsets will\n * differ between the two APIs.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getIEOffsets(node) {\n  var selection = document.selection;\n  var selectedRange = selection.createRange();\n  var selectedLength = selectedRange.text.length;\n\n  // Duplicate selection so we can move range without breaking user selection.\n  var fromStart = selectedRange.duplicate();\n  fromStart.moveToElementText(node);\n  fromStart.setEndPoint('EndToStart', selectedRange);\n\n  var startOffset = fromStart.text.length;\n  var endOffset = startOffset + selectedLength;\n\n  return {\n    start: startOffset,\n    end: endOffset\n  };\n}\n\n/**\n * @param {DOMElement} node\n * @return {?object}\n */\nfunction getModernOffsets(node) {\n  var selection = window.getSelection && window.getSelection();\n\n  if (!selection || selection.rangeCount === 0) {\n    return null;\n  }\n\n  var anchorNode = selection.anchorNode;\n  var anchorOffset = selection.anchorOffset;\n  var focusNode = selection.focusNode;\n  var focusOffset = selection.focusOffset;\n\n  var currentRange = selection.getRangeAt(0);\n\n  // If the node and offset values are the same, the selection is collapsed.\n  // `Selection.isCollapsed` is available natively, but IE sometimes gets\n  // this value wrong.\n  var isSelectionCollapsed = isCollapsed(\n    selection.anchorNode,\n    selection.anchorOffset,\n    selection.focusNode,\n    selection.focusOffset\n  );\n\n  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;\n\n  var tempRange = currentRange.cloneRange();\n  tempRange.selectNodeContents(node);\n  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);\n\n  var isTempRangeCollapsed = isCollapsed(\n    tempRange.startContainer,\n    tempRange.startOffset,\n    tempRange.endContainer,\n    tempRange.endOffset\n  );\n\n  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;\n  var end = start + rangeLength;\n\n  // Detect whether the selection is backward.\n  var detectionRange = document.createRange();\n  detectionRange.setStart(anchorNode, anchorOffset);\n  detectionRange.setEnd(focusNode, focusOffset);\n  var isBackward = detectionRange.collapsed;\n\n  return {\n    start: isBackward ? end : start,\n    end: isBackward ? start : end\n  };\n}\n\n/**\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setIEOffsets(node, offsets) {\n  var range = document.selection.createRange().duplicate();\n  var start, end;\n\n  if (typeof offsets.end === 'undefined') {\n    start = offsets.start;\n    end = start;\n  } else if (offsets.start > offsets.end) {\n    start = offsets.end;\n    end = offsets.start;\n  } else {\n    start = offsets.start;\n    end = offsets.end;\n  }\n\n  range.moveToElementText(node);\n  range.moveStart('character', start);\n  range.setEndPoint('EndToStart', range);\n  range.moveEnd('character', end - start);\n  range.select();\n}\n\n/**\n * In modern non-IE browsers, we can support both forward and backward\n * selections.\n *\n * Note: IE10+ supports the Selection object, but it does not support\n * the `extend` method, which means that even in modern IE, it's not possible\n * to programatically create a backward selection. Thus, for all IE\n * versions, we use the old IE API to create our selections.\n *\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setModernOffsets(node, offsets) {\n  if (!window.getSelection) {\n    return;\n  }\n\n  var selection = window.getSelection();\n  var length = node[getTextContentAccessor()].length;\n  var start = Math.min(offsets.start, length);\n  var end = typeof offsets.end === 'undefined' ?\n            start : Math.min(offsets.end, length);\n\n  // IE 11 uses modern selection, but doesn't support the extend method.\n  // Flip backward selections, so we can set with a single range.\n  if (!selection.extend && start > end) {\n    var temp = end;\n    end = start;\n    start = temp;\n  }\n\n  var startMarker = getNodeForCharacterOffset(node, start);\n  var endMarker = getNodeForCharacterOffset(node, end);\n\n  if (startMarker && endMarker) {\n    var range = document.createRange();\n    range.setStart(startMarker.node, startMarker.offset);\n    selection.removeAllRanges();\n\n    if (start > end) {\n      selection.addRange(range);\n      selection.extend(endMarker.node, endMarker.offset);\n    } else {\n      range.setEnd(endMarker.node, endMarker.offset);\n      selection.addRange(range);\n    }\n  }\n}\n\nvar useIEOffsets = (\n  ExecutionEnvironment.canUseDOM &&\n  'selection' in document &&\n  !('getSelection' in window)\n);\n\nvar ReactDOMSelection = {\n  /**\n   * @param {DOMElement} node\n   */\n  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,\n\n  /**\n   * @param {DOMElement|DOMTextNode} node\n   * @param {object} offsets\n   */\n  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets\n};\n\nmodule.exports = ReactDOMSelection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}