{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponent\n */\n\n'use strict';\n\nvar ReactUpdateQueue = require(\"./ReactUpdateQueue\");\nvar invariant = require(\"./invariant\");\nvar warning = require(\"./warning\");\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction ReactComponent(props, context) {\n  this.props = props;\n  this.context = context;\n}\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nReactComponent.prototype.setState = function (partialState, callback) {\n  \"production\" !== process.env.NODE_ENV ? invariant(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null);\n  if (\"production\" !== process.env.NODE_ENV) {\n    \"production\" !== process.env.NODE_ENV ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : null;\n  }\n  ReactUpdateQueue.enqueueSetState(this, partialState);\n  if (callback) {\n    ReactUpdateQueue.enqueueCallback(this, callback);\n  }\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nReactComponent.prototype.forceUpdate = function (callback) {\n  ReactUpdateQueue.enqueueForceUpdate(this);\n  if (callback) {\n    ReactUpdateQueue.enqueueCallback(this, callback);\n  }\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\nif (\"production\" !== process.env.NODE_ENV) {\n  var deprecatedAPIs = {\n    getDOMNode: ['getDOMNode', 'Use React.findDOMNode(component) instead.'],\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceProps: ['replaceProps', 'Instead, call React.render again at the top level.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],\n    setProps: ['setProps', 'Instead, call React.render again at the top level.']\n  };\n  var defineDeprecationWarning = function (methodName, info) {\n    try {\n      Object.defineProperty(ReactComponent.prototype, methodName, {\n        get: function () {\n          \"production\" !== process.env.NODE_ENV ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : null;\n          return undefined;\n        }\n      });\n    } catch (x) {\n      // IE will fail on defineProperty (es5-shim/sham too)\n    }\n  };\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\nmodule.exports = ReactComponent;","map":{"version":3,"names":["ReactUpdateQueue","require","invariant","warning","ReactComponent","props","context","prototype","setState","partialState","callback","process","env","NODE_ENV","enqueueSetState","enqueueCallback","forceUpdate","enqueueForceUpdate","deprecatedAPIs","getDOMNode","isMounted","replaceProps","replaceState","setProps","defineDeprecationWarning","methodName","info","Object","defineProperty","get","undefined","x","fnName","hasOwnProperty","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/ReactComponent.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponent\n */\n\n'use strict';\n\nvar ReactUpdateQueue = require(\"./ReactUpdateQueue\");\n\nvar invariant = require(\"./invariant\");\nvar warning = require(\"./warning\");\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction ReactComponent(props, context) {\n  this.props = props;\n  this.context = context;\n}\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nReactComponent.prototype.setState = function(partialState, callback) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    typeof partialState === 'object' ||\n    typeof partialState === 'function' ||\n    partialState == null,\n    'setState(...): takes an object of state variables to update or a ' +\n    'function which returns an object of state variables.'\n  ) : invariant(typeof partialState === 'object' ||\n  typeof partialState === 'function' ||\n  partialState == null));\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      partialState != null,\n      'setState(...): You passed an undefined or null state object; ' +\n      'instead, use forceUpdate().'\n    ) : null);\n  }\n  ReactUpdateQueue.enqueueSetState(this, partialState);\n  if (callback) {\n    ReactUpdateQueue.enqueueCallback(this, callback);\n  }\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nReactComponent.prototype.forceUpdate = function(callback) {\n  ReactUpdateQueue.enqueueForceUpdate(this);\n  if (callback) {\n    ReactUpdateQueue.enqueueCallback(this, callback);\n  }\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\nif (\"production\" !== process.env.NODE_ENV) {\n  var deprecatedAPIs = {\n    getDOMNode: [\n      'getDOMNode',\n      'Use React.findDOMNode(component) instead.'\n    ],\n    isMounted: [\n      'isMounted',\n      'Instead, make sure to clean up subscriptions and pending requests in ' +\n      'componentWillUnmount to prevent memory leaks.'\n    ],\n    replaceProps: [\n      'replaceProps',\n      'Instead, call React.render again at the top level.'\n    ],\n    replaceState: [\n      'replaceState',\n      'Refactor your code to use setState instead (see ' +\n      'https://github.com/facebook/react/issues/3236).'\n    ],\n    setProps: [\n      'setProps',\n      'Instead, call React.render again at the top level.'\n    ]\n  };\n  var defineDeprecationWarning = function(methodName, info) {\n    try {\n      Object.defineProperty(ReactComponent.prototype, methodName, {\n        get: function() {\n          (\"production\" !== process.env.NODE_ENV ? warning(\n            false,\n            '%s(...) is deprecated in plain JavaScript React classes. %s',\n            info[0],\n            info[1]\n          ) : null);\n          return undefined;\n        }\n      });\n    } catch (x) {\n      // IE will fail on defineProperty (es5-shim/sham too)\n    }\n  };\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nmodule.exports = ReactComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}