{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Danger\n * @typechecks static-only\n */\n\n/*jslint evil: true, sub: true */\n\n'use strict';\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar createNodesFromMarkup = require(\"./createNodesFromMarkup\");\nvar emptyFunction = require(\"./emptyFunction\");\nvar getMarkupWrap = require(\"./getMarkupWrap\");\nvar invariant = require(\"./invariant\");\nvar OPEN_TAG_NAME_EXP = /^(<[^ \\/>]+)/;\nvar RESULT_INDEX_ATTR = 'data-danger-index';\n\n/**\n * Extracts the `nodeName` from a string of markup.\n *\n * NOTE: Extracting the `nodeName` does not require a regular expression match\n * because we make assumptions about React-generated markup (i.e. there are no\n * spaces surrounding the opening tag and there is at least one attribute).\n *\n * @param {string} markup String of markup.\n * @return {string} Node name of the supplied markup.\n * @see http://jsperf.com/extract-nodename\n */\nfunction getNodeName(markup) {\n  return markup.substring(1, markup.indexOf(' '));\n}\nvar Danger = {\n  /**\n   * Renders markup into an array of nodes. The markup is expected to render\n   * into a list of root nodes. Also, the length of `resultList` and\n   * `markupList` should be the same.\n   *\n   * @param {array<string>} markupList List of markup strings to render.\n   * @return {array<DOMElement>} List of rendered nodes.\n   * @internal\n   */\n  dangerouslyRenderMarkup: function (markupList) {\n    \"production\" !== process.env.NODE_ENV ? invariant(ExecutionEnvironment.canUseDOM, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'React.renderToString for server rendering.') : invariant(ExecutionEnvironment.canUseDOM);\n    var nodeName;\n    var markupByNodeName = {};\n    // Group markup by `nodeName` if a wrap is necessary, else by '*'.\n    for (var i = 0; i < markupList.length; i++) {\n      \"production\" !== process.env.NODE_ENV ? invariant(markupList[i], 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(markupList[i]);\n      nodeName = getNodeName(markupList[i]);\n      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';\n      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];\n      markupByNodeName[nodeName][i] = markupList[i];\n    }\n    var resultList = [];\n    var resultListAssignmentCount = 0;\n    for (nodeName in markupByNodeName) {\n      if (!markupByNodeName.hasOwnProperty(nodeName)) {\n        continue;\n      }\n      var markupListByNodeName = markupByNodeName[nodeName];\n\n      // This for-in loop skips the holes of the sparse array. The order of\n      // iteration should follow the order of assignment, which happens to match\n      // numerical index order, but we don't rely on that.\n      var resultIndex;\n      for (resultIndex in markupListByNodeName) {\n        if (markupListByNodeName.hasOwnProperty(resultIndex)) {\n          var markup = markupListByNodeName[resultIndex];\n\n          // Push the requested markup with an additional RESULT_INDEX_ATTR\n          // attribute.  If the markup does not start with a < character, it\n          // will be discarded below (with an appropriate console.error).\n          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,\n          // This index will be parsed back out below.\n          '$1 ' + RESULT_INDEX_ATTR + '=\"' + resultIndex + '\" ');\n        }\n      }\n\n      // Render each group of markup with similar wrapping `nodeName`.\n      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.\n      );\n      for (var j = 0; j < renderNodes.length; ++j) {\n        var renderNode = renderNodes[j];\n        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {\n          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);\n          renderNode.removeAttribute(RESULT_INDEX_ATTR);\n          \"production\" !== process.env.NODE_ENV ? invariant(!resultList.hasOwnProperty(resultIndex), 'Danger: Assigning to an already-occupied result index.') : invariant(!resultList.hasOwnProperty(resultIndex));\n          resultList[resultIndex] = renderNode;\n\n          // This should match resultList.length and markupList.length when\n          // we're done.\n          resultListAssignmentCount += 1;\n        } else if (\"production\" !== process.env.NODE_ENV) {\n          console.error('Danger: Discarding unexpected node:', renderNode);\n        }\n      }\n    }\n\n    // Although resultList was populated out of order, it should now be a dense\n    // array.\n    \"production\" !== process.env.NODE_ENV ? invariant(resultListAssignmentCount === resultList.length, 'Danger: Did not assign to every index of resultList.') : invariant(resultListAssignmentCount === resultList.length);\n    \"production\" !== process.env.NODE_ENV ? invariant(resultList.length === markupList.length, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(resultList.length === markupList.length);\n    return resultList;\n  },\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {\n    \"production\" !== process.env.NODE_ENV ? invariant(ExecutionEnvironment.canUseDOM, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'React.renderToString for server rendering.') : invariant(ExecutionEnvironment.canUseDOM);\n    \"production\" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup);\n    \"production\" !== process.env.NODE_ENV ? invariant(oldChild.tagName.toLowerCase() !== 'html', 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See React.renderToString().') : invariant(oldChild.tagName.toLowerCase() !== 'html');\n    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n    oldChild.parentNode.replaceChild(newChild, oldChild);\n  }\n};\nmodule.exports = Danger;","map":{"version":3,"names":["ExecutionEnvironment","require","createNodesFromMarkup","emptyFunction","getMarkupWrap","invariant","OPEN_TAG_NAME_EXP","RESULT_INDEX_ATTR","getNodeName","markup","substring","indexOf","Danger","dangerouslyRenderMarkup","markupList","process","env","NODE_ENV","canUseDOM","nodeName","markupByNodeName","i","length","resultList","resultListAssignmentCount","hasOwnProperty","markupListByNodeName","resultIndex","replace","renderNodes","join","j","renderNode","hasAttribute","getAttribute","removeAttribute","console","error","dangerouslyReplaceNodeWithMarkup","oldChild","tagName","toLowerCase","newChild","parentNode","replaceChild","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/Danger.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Danger\n * @typechecks static-only\n */\n\n/*jslint evil: true, sub: true */\n\n'use strict';\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar createNodesFromMarkup = require(\"./createNodesFromMarkup\");\nvar emptyFunction = require(\"./emptyFunction\");\nvar getMarkupWrap = require(\"./getMarkupWrap\");\nvar invariant = require(\"./invariant\");\n\nvar OPEN_TAG_NAME_EXP = /^(<[^ \\/>]+)/;\nvar RESULT_INDEX_ATTR = 'data-danger-index';\n\n/**\n * Extracts the `nodeName` from a string of markup.\n *\n * NOTE: Extracting the `nodeName` does not require a regular expression match\n * because we make assumptions about React-generated markup (i.e. there are no\n * spaces surrounding the opening tag and there is at least one attribute).\n *\n * @param {string} markup String of markup.\n * @return {string} Node name of the supplied markup.\n * @see http://jsperf.com/extract-nodename\n */\nfunction getNodeName(markup) {\n  return markup.substring(1, markup.indexOf(' '));\n}\n\nvar Danger = {\n\n  /**\n   * Renders markup into an array of nodes. The markup is expected to render\n   * into a list of root nodes. Also, the length of `resultList` and\n   * `markupList` should be the same.\n   *\n   * @param {array<string>} markupList List of markup strings to render.\n   * @return {array<DOMElement>} List of rendered nodes.\n   * @internal\n   */\n  dangerouslyRenderMarkup: function(markupList) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ExecutionEnvironment.canUseDOM,\n      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +\n      'thread. Make sure `window` and `document` are available globally ' +\n      'before requiring React when unit testing or use ' +\n      'React.renderToString for server rendering.'\n    ) : invariant(ExecutionEnvironment.canUseDOM));\n    var nodeName;\n    var markupByNodeName = {};\n    // Group markup by `nodeName` if a wrap is necessary, else by '*'.\n    for (var i = 0; i < markupList.length; i++) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        markupList[i],\n        'dangerouslyRenderMarkup(...): Missing markup.'\n      ) : invariant(markupList[i]));\n      nodeName = getNodeName(markupList[i]);\n      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';\n      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];\n      markupByNodeName[nodeName][i] = markupList[i];\n    }\n    var resultList = [];\n    var resultListAssignmentCount = 0;\n    for (nodeName in markupByNodeName) {\n      if (!markupByNodeName.hasOwnProperty(nodeName)) {\n        continue;\n      }\n      var markupListByNodeName = markupByNodeName[nodeName];\n\n      // This for-in loop skips the holes of the sparse array. The order of\n      // iteration should follow the order of assignment, which happens to match\n      // numerical index order, but we don't rely on that.\n      var resultIndex;\n      for (resultIndex in markupListByNodeName) {\n        if (markupListByNodeName.hasOwnProperty(resultIndex)) {\n          var markup = markupListByNodeName[resultIndex];\n\n          // Push the requested markup with an additional RESULT_INDEX_ATTR\n          // attribute.  If the markup does not start with a < character, it\n          // will be discarded below (with an appropriate console.error).\n          markupListByNodeName[resultIndex] = markup.replace(\n            OPEN_TAG_NAME_EXP,\n            // This index will be parsed back out below.\n            '$1 ' + RESULT_INDEX_ATTR + '=\"' + resultIndex + '\" '\n          );\n        }\n      }\n\n      // Render each group of markup with similar wrapping `nodeName`.\n      var renderNodes = createNodesFromMarkup(\n        markupListByNodeName.join(''),\n        emptyFunction // Do nothing special with <script> tags.\n      );\n\n      for (var j = 0; j < renderNodes.length; ++j) {\n        var renderNode = renderNodes[j];\n        if (renderNode.hasAttribute &&\n            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {\n\n          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);\n          renderNode.removeAttribute(RESULT_INDEX_ATTR);\n\n          (\"production\" !== process.env.NODE_ENV ? invariant(\n            !resultList.hasOwnProperty(resultIndex),\n            'Danger: Assigning to an already-occupied result index.'\n          ) : invariant(!resultList.hasOwnProperty(resultIndex)));\n\n          resultList[resultIndex] = renderNode;\n\n          // This should match resultList.length and markupList.length when\n          // we're done.\n          resultListAssignmentCount += 1;\n\n        } else if (\"production\" !== process.env.NODE_ENV) {\n          console.error(\n            'Danger: Discarding unexpected node:',\n            renderNode\n          );\n        }\n      }\n    }\n\n    // Although resultList was populated out of order, it should now be a dense\n    // array.\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      resultListAssignmentCount === resultList.length,\n      'Danger: Did not assign to every index of resultList.'\n    ) : invariant(resultListAssignmentCount === resultList.length));\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      resultList.length === markupList.length,\n      'Danger: Expected markup to render %s nodes, but rendered %s.',\n      markupList.length,\n      resultList.length\n    ) : invariant(resultList.length === markupList.length));\n\n    return resultList;\n  },\n\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ExecutionEnvironment.canUseDOM,\n      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +\n      'worker thread. Make sure `window` and `document` are available ' +\n      'globally before requiring React when unit testing or use ' +\n      'React.renderToString for server rendering.'\n    ) : invariant(ExecutionEnvironment.canUseDOM));\n    (\"production\" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      oldChild.tagName.toLowerCase() !== 'html',\n      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +\n      '<html> node. This is because browser quirks make this unreliable ' +\n      'and/or slow. If you want to render to the root you must use ' +\n      'server rendering. See React.renderToString().'\n    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));\n\n    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n    oldChild.parentNode.replaceChild(newChild, oldChild);\n  }\n\n};\n\nmodule.exports = Danger;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}