{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule traverseAllChildren\n */\n\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactFragment = require(\"./ReactFragment\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\nvar getIteratorFn = require(\"./getIteratorFn\");\nvar invariant = require(\"./invariant\");\nvar warning = require(\"./warning\");\nvar SEPARATOR = ReactInstanceHandles.SEPARATOR;\nvar SUBSEPARATOR = ':';\n\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\nvar userProvidedKeyEscaperLookup = {\n  '=': '=0',\n  '.': '=1',\n  ':': '=2'\n};\nvar userProvidedKeyEscapeRegex = /[=.:]/g;\nvar didWarnAboutMaps = false;\nfunction userProvidedKeyEscaper(match) {\n  return userProvidedKeyEscaperLookup[match];\n}\n\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\nfunction getComponentKey(component, index) {\n  if (component && component.key != null) {\n    // Explicit key\n    return wrapUserProvidedKey(component.key);\n  }\n  // Implicit key determined by the index in the set\n  return index.toString(36);\n}\n\n/**\n * Escape a component key so that it is safe to use in a reactid.\n *\n * @param {*} key Component key to be escaped.\n * @return {string} An escaped string.\n */\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);\n}\n\n/**\n * Wrap a `key` value explicitly provided by the user to distinguish it from\n * implicitly-generated keys generated by a component's index in its parent.\n *\n * @param {string} key Value of a user-provided `key` attribute\n * @return {string}\n */\nfunction wrapUserProvidedKey(key) {\n  return '$' + escapeUserProvidedKey(key);\n}\n\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!number} indexSoFar Number of children encountered until this point.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildrenImpl(children, nameSoFar, indexSoFar, callback, traverseContext) {\n  var type = typeof children;\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {\n    callback(traverseContext, children,\n    // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows.\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar, indexSoFar);\n    return 1;\n  }\n  var child, nextName, nextIndex;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) + getComponentKey(child, i);\n      nextIndex = indexSoFar + subtreeCount;\n      subtreeCount += traverseAllChildrenImpl(child, nextName, nextIndex, callback, traverseContext);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n    if (iteratorFn) {\n      var iterator = iteratorFn.call(children);\n      var step;\n      if (iteratorFn !== children.entries) {\n        var ii = 0;\n        while (!(step = iterator.next()).done) {\n          child = step.value;\n          nextName = (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) + getComponentKey(child, ii++);\n          nextIndex = indexSoFar + subtreeCount;\n          subtreeCount += traverseAllChildrenImpl(child, nextName, nextIndex, callback, traverseContext);\n        }\n      } else {\n        if (\"production\" !== process.env.NODE_ENV) {\n          \"production\" !== process.env.NODE_ENV ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : null;\n          didWarnAboutMaps = true;\n        }\n        // Iterator will provide entry [k,v] tuples rather than values.\n        while (!(step = iterator.next()).done) {\n          var entry = step.value;\n          if (entry) {\n            child = entry[1];\n            nextName = (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);\n            nextIndex = indexSoFar + subtreeCount;\n            subtreeCount += traverseAllChildrenImpl(child, nextName, nextIndex, callback, traverseContext);\n          }\n        }\n      }\n    } else if (type === 'object') {\n      \"production\" !== process.env.NODE_ENV ? invariant(children.nodeType !== 1, 'traverseAllChildren(...): Encountered an invalid child; DOM ' + 'elements are not valid children of React components.') : invariant(children.nodeType !== 1);\n      var fragment = ReactFragment.extract(children);\n      for (var key in fragment) {\n        if (fragment.hasOwnProperty(key)) {\n          child = fragment[key];\n          nextName = (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) + wrapUserProvidedKey(key) + SUBSEPARATOR + getComponentKey(child, 0);\n          nextIndex = indexSoFar + subtreeCount;\n          subtreeCount += traverseAllChildrenImpl(child, nextName, nextIndex, callback, traverseContext);\n        }\n      }\n    }\n  }\n  return subtreeCount;\n}\n\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);\n}\nmodule.exports = traverseAllChildren;","map":{"version":3,"names":["ReactElement","require","ReactFragment","ReactInstanceHandles","getIteratorFn","invariant","warning","SEPARATOR","SUBSEPARATOR","userProvidedKeyEscaperLookup","userProvidedKeyEscapeRegex","didWarnAboutMaps","userProvidedKeyEscaper","match","getComponentKey","component","index","key","wrapUserProvidedKey","toString","escapeUserProvidedKey","text","replace","traverseAllChildrenImpl","children","nameSoFar","indexSoFar","callback","traverseContext","type","isValidElement","child","nextName","nextIndex","subtreeCount","Array","isArray","i","length","iteratorFn","iterator","call","step","entries","ii","next","done","value","process","env","NODE_ENV","entry","nodeType","fragment","extract","hasOwnProperty","traverseAllChildren","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/traverseAllChildren.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule traverseAllChildren\n */\n\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactFragment = require(\"./ReactFragment\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\n\nvar getIteratorFn = require(\"./getIteratorFn\");\nvar invariant = require(\"./invariant\");\nvar warning = require(\"./warning\");\n\nvar SEPARATOR = ReactInstanceHandles.SEPARATOR;\nvar SUBSEPARATOR = ':';\n\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\nvar userProvidedKeyEscaperLookup = {\n  '=': '=0',\n  '.': '=1',\n  ':': '=2'\n};\n\nvar userProvidedKeyEscapeRegex = /[=.:]/g;\n\nvar didWarnAboutMaps = false;\n\nfunction userProvidedKeyEscaper(match) {\n  return userProvidedKeyEscaperLookup[match];\n}\n\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\nfunction getComponentKey(component, index) {\n  if (component && component.key != null) {\n    // Explicit key\n    return wrapUserProvidedKey(component.key);\n  }\n  // Implicit key determined by the index in the set\n  return index.toString(36);\n}\n\n/**\n * Escape a component key so that it is safe to use in a reactid.\n *\n * @param {*} key Component key to be escaped.\n * @return {string} An escaped string.\n */\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(\n    userProvidedKeyEscapeRegex,\n    userProvidedKeyEscaper\n  );\n}\n\n/**\n * Wrap a `key` value explicitly provided by the user to distinguish it from\n * implicitly-generated keys generated by a component's index in its parent.\n *\n * @param {string} key Value of a user-provided `key` attribute\n * @return {string}\n */\nfunction wrapUserProvidedKey(key) {\n  return '$' + escapeUserProvidedKey(key);\n}\n\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!number} indexSoFar Number of children encountered until this point.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildrenImpl(\n  children,\n  nameSoFar,\n  indexSoFar,\n  callback,\n  traverseContext\n) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  if (children === null ||\n      type === 'string' ||\n      type === 'number' ||\n      ReactElement.isValidElement(children)) {\n    callback(\n      traverseContext,\n      children,\n      // If it's the only child, treat the name as if it was wrapped in an array\n      // so that it's consistent if the number of children grows.\n      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,\n      indexSoFar\n    );\n    return 1;\n  }\n\n  var child, nextName, nextIndex;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = (\n        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +\n        getComponentKey(child, i)\n      );\n      nextIndex = indexSoFar + subtreeCount;\n      subtreeCount += traverseAllChildrenImpl(\n        child,\n        nextName,\n        nextIndex,\n        callback,\n        traverseContext\n      );\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n    if (iteratorFn) {\n      var iterator = iteratorFn.call(children);\n      var step;\n      if (iteratorFn !== children.entries) {\n        var ii = 0;\n        while (!(step = iterator.next()).done) {\n          child = step.value;\n          nextName = (\n            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +\n            getComponentKey(child, ii++)\n          );\n          nextIndex = indexSoFar + subtreeCount;\n          subtreeCount += traverseAllChildrenImpl(\n            child,\n            nextName,\n            nextIndex,\n            callback,\n            traverseContext\n          );\n        }\n      } else {\n        if (\"production\" !== process.env.NODE_ENV) {\n          (\"production\" !== process.env.NODE_ENV ? warning(\n            didWarnAboutMaps,\n            'Using Maps as children is not yet fully supported. It is an ' +\n            'experimental feature that might be removed. Convert it to a ' +\n            'sequence / iterable of keyed ReactElements instead.'\n          ) : null);\n          didWarnAboutMaps = true;\n        }\n        // Iterator will provide entry [k,v] tuples rather than values.\n        while (!(step = iterator.next()).done) {\n          var entry = step.value;\n          if (entry) {\n            child = entry[1];\n            nextName = (\n              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +\n              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +\n              getComponentKey(child, 0)\n            );\n            nextIndex = indexSoFar + subtreeCount;\n            subtreeCount += traverseAllChildrenImpl(\n              child,\n              nextName,\n              nextIndex,\n              callback,\n              traverseContext\n            );\n          }\n        }\n      }\n    } else if (type === 'object') {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        children.nodeType !== 1,\n        'traverseAllChildren(...): Encountered an invalid child; DOM ' +\n        'elements are not valid children of React components.'\n      ) : invariant(children.nodeType !== 1));\n      var fragment = ReactFragment.extract(children);\n      for (var key in fragment) {\n        if (fragment.hasOwnProperty(key)) {\n          child = fragment[key];\n          nextName = (\n            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +\n            wrapUserProvidedKey(key) + SUBSEPARATOR +\n            getComponentKey(child, 0)\n          );\n          nextIndex = indexSoFar + subtreeCount;\n          subtreeCount += traverseAllChildrenImpl(\n            child,\n            nextName,\n            nextIndex,\n            callback,\n            traverseContext\n          );\n        }\n      }\n    }\n  }\n\n  return subtreeCount;\n}\n\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);\n}\n\nmodule.exports = traverseAllChildren;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}