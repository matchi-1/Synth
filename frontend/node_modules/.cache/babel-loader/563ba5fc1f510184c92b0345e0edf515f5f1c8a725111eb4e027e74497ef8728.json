{"ast":null,"code":"import { FormData, File, getMultipartRequestOptions, isFsReadStream } from \"./_shims/index.mjs\";\nexport { fileFromPath } from \"./_shims/index.mjs\";\nexport const isResponseLike = value => value != null && typeof value === 'object' && typeof value.url === 'string' && typeof value.blob === 'function';\nexport const isFileLike = value => value != null && typeof value === 'object' && typeof value.name === 'string' && typeof value.lastModified === 'number' && isBlobLike(value);\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */\nexport const isBlobLike = value => value != null && typeof value === 'object' && typeof value.size === 'number' && typeof value.type === 'string' && typeof value.text === 'function' && typeof value.slice === 'function' && typeof value.arrayBuffer === 'function';\nexport const isUploadable = value => {\n  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);\n};\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nexport async function toFile(value, name, options) {\n  // If it's a promise, resolve it.\n  value = await value;\n  // Use the file's options if there isn't one provided\n  options ?? (options = isFileLike(value) ? {\n    lastModified: value.lastModified,\n    type: value.type\n  } : {});\n  if (isResponseLike(value)) {\n    const blob = await value.blob();\n    name || (name = new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? 'unknown_file');\n    return new File([blob], name, options);\n  }\n  const bits = await getBytes(value);\n  name || (name = getName(value) ?? 'unknown_file');\n  if (!options.type) {\n    const type = bits[0]?.type;\n    if (typeof type === 'string') {\n      options = {\n        ...options,\n        type\n      };\n    }\n  }\n  return new File(bits, name, options);\n}\nasync function getBytes(value) {\n  let parts = [];\n  if (typeof value === 'string' || ArrayBuffer.isView(value) ||\n  // includes Uint8Array, Buffer, etc.\n  value instanceof ArrayBuffer) {\n    parts.push(value);\n  } else if (isBlobLike(value)) {\n    parts.push(await value.arrayBuffer());\n  } else if (isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n  ) {\n    for await (const chunk of value) {\n      parts.push(chunk); // TODO, consider validating?\n    }\n  } else {\n    throw new Error(`Unexpected data type: ${typeof value}; constructor: ${value?.constructor?.name}; props: ${propsForError(value)}`);\n  }\n  return parts;\n}\nfunction propsForError(value) {\n  const props = Object.getOwnPropertyNames(value);\n  return `[${props.map(p => `\"${p}\"`).join(', ')}]`;\n}\nfunction getName(value) {\n  return getStringFromMaybeBuffer(value.name) || getStringFromMaybeBuffer(value.filename) ||\n  // For fs.ReadStream\n  getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop();\n}\nconst getStringFromMaybeBuffer = x => {\n  if (typeof x === 'string') return x;\n  if (typeof Buffer !== 'undefined' && x instanceof Buffer) return String(x);\n  return undefined;\n};\nconst isAsyncIterableIterator = value => value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\nexport const isMultipartBody = body => body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nexport const maybeMultipartFormRequestOptions = async opts => {\n  if (!hasUploadableValue(opts.body)) return opts;\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\nexport const multipartFormRequestOptions = async opts => {\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\nexport const createForm = async body => {\n  const form = new FormData();\n  await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\n  return form;\n};\nconst hasUploadableValue = value => {\n  if (isUploadable(value)) return true;\n  if (Array.isArray(value)) return value.some(hasUploadableValue);\n  if (value && typeof value === 'object') {\n    for (const k in value) {\n      if (hasUploadableValue(value[k])) return true;\n    }\n  }\n  return false;\n};\nconst addFormValue = async (form, key, value) => {\n  if (value === undefined) return;\n  if (value == null) {\n    throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\n  }\n  // TODO: make nested formats configurable\n  if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n    form.append(key, String(value));\n  } else if (isUploadable(value)) {\n    const file = await toFile(value);\n    form.append(key, file);\n  } else if (Array.isArray(value)) {\n    await Promise.all(value.map(entry => addFormValue(form, key + '[]', entry)));\n  } else if (typeof value === 'object') {\n    await Promise.all(Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)));\n  } else {\n    throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);\n  }\n};\n//# sourceMappingURL=uploads.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}