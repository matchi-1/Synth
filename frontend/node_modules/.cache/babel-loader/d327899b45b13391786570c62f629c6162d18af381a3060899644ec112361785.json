{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { FrameEvent } from '../api/Frame.js';\nimport { EventEmitter } from '../common/EventEmitter.js';\nimport { NetworkManagerEvent } from '../common/NetworkManagerEvents.js';\nimport { assert } from '../util/assert.js';\nimport { Deferred } from '../util/Deferred.js';\nimport { DisposableStack } from '../util/disposable.js';\nimport { FrameManagerEvent } from './FrameManagerEvents.js';\nconst puppeteerToProtocolLifecycle = new Map([['load', 'load'], ['domcontentloaded', 'DOMContentLoaded'], ['networkidle0', 'networkIdle'], ['networkidle2', 'networkAlmostIdle']]);\n/**\n * @internal\n */\nexport class LifecycleWatcher {\n  #expectedLifecycle;\n  #frame;\n  #timeout;\n  #navigationRequest = null;\n  #subscriptions = new DisposableStack();\n  #initialLoaderId;\n  #terminationDeferred;\n  #sameDocumentNavigationDeferred = Deferred.create();\n  #lifecycleDeferred = Deferred.create();\n  #newDocumentNavigationDeferred = Deferred.create();\n  #hasSameDocumentNavigation;\n  #swapped;\n  #navigationResponseReceived;\n  constructor(networkManager, frame, waitUntil, timeout, signal) {\n    if (Array.isArray(waitUntil)) {\n      waitUntil = waitUntil.slice();\n    } else if (typeof waitUntil === 'string') {\n      waitUntil = [waitUntil];\n    }\n    this.#initialLoaderId = frame._loaderId;\n    this.#expectedLifecycle = waitUntil.map(value => {\n      const protocolEvent = puppeteerToProtocolLifecycle.get(value);\n      assert(protocolEvent, 'Unknown value for options.waitUntil: ' + value);\n      return protocolEvent;\n    });\n    signal?.addEventListener('abort', () => {\n      this.#terminationDeferred.reject(signal.reason);\n    });\n    this.#frame = frame;\n    this.#timeout = timeout;\n    const frameManagerEmitter = this.#subscriptions.use(new EventEmitter(frame._frameManager));\n    frameManagerEmitter.on(FrameManagerEvent.LifecycleEvent, this.#checkLifecycleComplete.bind(this));\n    const frameEmitter = this.#subscriptions.use(new EventEmitter(frame));\n    frameEmitter.on(FrameEvent.FrameNavigatedWithinDocument, this.#navigatedWithinDocument.bind(this));\n    frameEmitter.on(FrameEvent.FrameNavigated, this.#navigated.bind(this));\n    frameEmitter.on(FrameEvent.FrameSwapped, this.#frameSwapped.bind(this));\n    frameEmitter.on(FrameEvent.FrameSwappedByActivation, this.#frameSwapped.bind(this));\n    frameEmitter.on(FrameEvent.FrameDetached, this.#onFrameDetached.bind(this));\n    const networkManagerEmitter = this.#subscriptions.use(new EventEmitter(networkManager));\n    networkManagerEmitter.on(NetworkManagerEvent.Request, this.#onRequest.bind(this));\n    networkManagerEmitter.on(NetworkManagerEvent.Response, this.#onResponse.bind(this));\n    networkManagerEmitter.on(NetworkManagerEvent.RequestFailed, this.#onRequestFailed.bind(this));\n    this.#terminationDeferred = Deferred.create({\n      timeout: this.#timeout,\n      message: `Navigation timeout of ${this.#timeout} ms exceeded`\n    });\n    this.#checkLifecycleComplete();\n  }\n  #onRequest(request) {\n    if (request.frame() !== this.#frame || !request.isNavigationRequest()) {\n      return;\n    }\n    this.#navigationRequest = request;\n    // Resolve previous navigation response in case there are multiple\n    // navigation requests reported by the backend. This generally should not\n    // happen by it looks like it's possible.\n    this.#navigationResponseReceived?.resolve();\n    this.#navigationResponseReceived = Deferred.create();\n    if (request.response() !== null) {\n      this.#navigationResponseReceived?.resolve();\n    }\n  }\n  #onRequestFailed(request) {\n    if (this.#navigationRequest?.id !== request.id) {\n      return;\n    }\n    this.#navigationResponseReceived?.resolve();\n  }\n  #onResponse(response) {\n    if (this.#navigationRequest?.id !== response.request().id) {\n      return;\n    }\n    this.#navigationResponseReceived?.resolve();\n  }\n  #onFrameDetached(frame) {\n    if (this.#frame === frame) {\n      this.#terminationDeferred.resolve(new Error('Navigating frame was detached'));\n      return;\n    }\n    this.#checkLifecycleComplete();\n  }\n  async navigationResponse() {\n    // Continue with a possibly null response.\n    await this.#navigationResponseReceived?.valueOrThrow();\n    return this.#navigationRequest ? this.#navigationRequest.response() : null;\n  }\n  sameDocumentNavigationPromise() {\n    return this.#sameDocumentNavigationDeferred.valueOrThrow();\n  }\n  newDocumentNavigationPromise() {\n    return this.#newDocumentNavigationDeferred.valueOrThrow();\n  }\n  lifecyclePromise() {\n    return this.#lifecycleDeferred.valueOrThrow();\n  }\n  terminationPromise() {\n    return this.#terminationDeferred.valueOrThrow();\n  }\n  #navigatedWithinDocument() {\n    this.#hasSameDocumentNavigation = true;\n    this.#checkLifecycleComplete();\n  }\n  #navigated(navigationType) {\n    if (navigationType === 'BackForwardCacheRestore') {\n      return this.#frameSwapped();\n    }\n    this.#checkLifecycleComplete();\n  }\n  #frameSwapped() {\n    this.#swapped = true;\n    this.#checkLifecycleComplete();\n  }\n  #checkLifecycleComplete() {\n    // We expect navigation to commit.\n    if (!checkLifecycle(this.#frame, this.#expectedLifecycle)) {\n      return;\n    }\n    this.#lifecycleDeferred.resolve();\n    if (this.#hasSameDocumentNavigation) {\n      this.#sameDocumentNavigationDeferred.resolve(undefined);\n    }\n    if (this.#swapped || this.#frame._loaderId !== this.#initialLoaderId) {\n      this.#newDocumentNavigationDeferred.resolve(undefined);\n    }\n    function checkLifecycle(frame, expectedLifecycle) {\n      for (const event of expectedLifecycle) {\n        if (!frame._lifecycleEvents.has(event)) {\n          return false;\n        }\n      }\n      for (const child of frame.childFrames()) {\n        if (child._hasStartedLoading && !checkLifecycle(child, expectedLifecycle)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  dispose() {\n    this.#subscriptions.dispose();\n    this.#terminationDeferred.resolve(new Error('LifecycleWatcher disposed'));\n  }\n}","map":{"version":3,"names":["FrameEvent","EventEmitter","NetworkManagerEvent","assert","Deferred","DisposableStack","FrameManagerEvent","puppeteerToProtocolLifecycle","Map","LifecycleWatcher","expectedLifecycle","frame","timeout","navigationRequest","subscriptions","initialLoaderId","terminationDeferred","sameDocumentNavigationDeferred","create","lifecycleDeferred","newDocumentNavigationDeferred","hasSameDocumentNavigation","swapped","navigationResponseReceived","constructor","networkManager","waitUntil","signal","Array","isArray","slice","_loaderId","map","value","protocolEvent","get","addEventListener","reject","reason","frameManagerEmitter","use","_frameManager","on","LifecycleEvent","checkLifecycleComplete","bind","frameEmitter","FrameNavigatedWithinDocument","navigatedWithinDocument","FrameNavigated","navigated","FrameSwapped","frameSwapped","FrameSwappedByActivation","FrameDetached","onFrameDetached","networkManagerEmitter","Request","onRequest","Response","onResponse","RequestFailed","onRequestFailed","message","#onRequest","request","isNavigationRequest","resolve","response","#onRequestFailed","id","#onResponse","#onFrameDetached","Error","navigationResponse","valueOrThrow","sameDocumentNavigationPromise","newDocumentNavigationPromise","lifecyclePromise","terminationPromise","#navigatedWithinDocument","#navigated","navigationType","#frameSwapped","#checkLifecycleComplete","checkLifecycle","undefined","event","_lifecycleEvents","has","child","childFrames","_hasStartedLoading","dispose"],"sources":["C:\\Users\\raffy\\Desktop\\test\\node_modules\\puppeteer-core\\src\\cdp\\LifecycleWatcher.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type Protocol from 'devtools-protocol';\n\nimport {type Frame, FrameEvent} from '../api/Frame.js';\nimport type {HTTPRequest} from '../api/HTTPRequest.js';\nimport type {HTTPResponse} from '../api/HTTPResponse.js';\nimport type {TimeoutError} from '../common/Errors.js';\nimport {EventEmitter} from '../common/EventEmitter.js';\nimport {NetworkManagerEvent} from '../common/NetworkManagerEvents.js';\nimport {assert} from '../util/assert.js';\nimport {Deferred} from '../util/Deferred.js';\nimport {DisposableStack} from '../util/disposable.js';\n\nimport type {CdpFrame} from './Frame.js';\nimport {FrameManagerEvent} from './FrameManagerEvents.js';\nimport type {NetworkManager} from './NetworkManager.js';\n\n/**\n * @public\n */\nexport type PuppeteerLifeCycleEvent =\n  /**\n   * Waits for the 'load' event.\n   */\n  | 'load'\n  /**\n   * Waits for the 'DOMContentLoaded' event.\n   */\n  | 'domcontentloaded'\n  /**\n   * Waits till there are no more than 0 network connections for at least `500`\n   * ms.\n   */\n  | 'networkidle0'\n  /**\n   * Waits till there are no more than 2 network connections for at least `500`\n   * ms.\n   */\n  | 'networkidle2';\n\n/**\n * @public\n */\nexport type ProtocolLifeCycleEvent =\n  | 'load'\n  | 'DOMContentLoaded'\n  | 'networkIdle'\n  | 'networkAlmostIdle';\n\nconst puppeteerToProtocolLifecycle = new Map<\n  PuppeteerLifeCycleEvent,\n  ProtocolLifeCycleEvent\n>([\n  ['load', 'load'],\n  ['domcontentloaded', 'DOMContentLoaded'],\n  ['networkidle0', 'networkIdle'],\n  ['networkidle2', 'networkAlmostIdle'],\n]);\n\n/**\n * @internal\n */\nexport class LifecycleWatcher {\n  #expectedLifecycle: ProtocolLifeCycleEvent[];\n  #frame: CdpFrame;\n  #timeout: number;\n  #navigationRequest: HTTPRequest | null = null;\n  #subscriptions = new DisposableStack();\n  #initialLoaderId: string;\n\n  #terminationDeferred: Deferred<Error>;\n  #sameDocumentNavigationDeferred = Deferred.create<undefined>();\n  #lifecycleDeferred = Deferred.create<void>();\n  #newDocumentNavigationDeferred = Deferred.create<undefined>();\n\n  #hasSameDocumentNavigation?: boolean;\n  #swapped?: boolean;\n\n  #navigationResponseReceived?: Deferred<void>;\n\n  constructor(\n    networkManager: NetworkManager,\n    frame: CdpFrame,\n    waitUntil: PuppeteerLifeCycleEvent | PuppeteerLifeCycleEvent[],\n    timeout: number,\n    signal?: AbortSignal\n  ) {\n    if (Array.isArray(waitUntil)) {\n      waitUntil = waitUntil.slice();\n    } else if (typeof waitUntil === 'string') {\n      waitUntil = [waitUntil];\n    }\n    this.#initialLoaderId = frame._loaderId;\n    this.#expectedLifecycle = waitUntil.map(value => {\n      const protocolEvent = puppeteerToProtocolLifecycle.get(value);\n      assert(protocolEvent, 'Unknown value for options.waitUntil: ' + value);\n      return protocolEvent as ProtocolLifeCycleEvent;\n    });\n\n    signal?.addEventListener('abort', () => {\n      this.#terminationDeferred.reject(signal.reason);\n    });\n\n    this.#frame = frame;\n    this.#timeout = timeout;\n    const frameManagerEmitter = this.#subscriptions.use(\n      new EventEmitter(frame._frameManager)\n    );\n    frameManagerEmitter.on(\n      FrameManagerEvent.LifecycleEvent,\n      this.#checkLifecycleComplete.bind(this)\n    );\n\n    const frameEmitter = this.#subscriptions.use(new EventEmitter(frame));\n    frameEmitter.on(\n      FrameEvent.FrameNavigatedWithinDocument,\n      this.#navigatedWithinDocument.bind(this)\n    );\n    frameEmitter.on(FrameEvent.FrameNavigated, this.#navigated.bind(this));\n    frameEmitter.on(FrameEvent.FrameSwapped, this.#frameSwapped.bind(this));\n    frameEmitter.on(\n      FrameEvent.FrameSwappedByActivation,\n      this.#frameSwapped.bind(this)\n    );\n    frameEmitter.on(FrameEvent.FrameDetached, this.#onFrameDetached.bind(this));\n\n    const networkManagerEmitter = this.#subscriptions.use(\n      new EventEmitter(networkManager)\n    );\n    networkManagerEmitter.on(\n      NetworkManagerEvent.Request,\n      this.#onRequest.bind(this)\n    );\n    networkManagerEmitter.on(\n      NetworkManagerEvent.Response,\n      this.#onResponse.bind(this)\n    );\n    networkManagerEmitter.on(\n      NetworkManagerEvent.RequestFailed,\n      this.#onRequestFailed.bind(this)\n    );\n\n    this.#terminationDeferred = Deferred.create<Error>({\n      timeout: this.#timeout,\n      message: `Navigation timeout of ${this.#timeout} ms exceeded`,\n    });\n\n    this.#checkLifecycleComplete();\n  }\n\n  #onRequest(request: HTTPRequest): void {\n    if (request.frame() !== this.#frame || !request.isNavigationRequest()) {\n      return;\n    }\n    this.#navigationRequest = request;\n    // Resolve previous navigation response in case there are multiple\n    // navigation requests reported by the backend. This generally should not\n    // happen by it looks like it's possible.\n    this.#navigationResponseReceived?.resolve();\n    this.#navigationResponseReceived = Deferred.create();\n    if (request.response() !== null) {\n      this.#navigationResponseReceived?.resolve();\n    }\n  }\n\n  #onRequestFailed(request: HTTPRequest): void {\n    if (this.#navigationRequest?.id !== request.id) {\n      return;\n    }\n    this.#navigationResponseReceived?.resolve();\n  }\n\n  #onResponse(response: HTTPResponse): void {\n    if (this.#navigationRequest?.id !== response.request().id) {\n      return;\n    }\n    this.#navigationResponseReceived?.resolve();\n  }\n\n  #onFrameDetached(frame: Frame): void {\n    if (this.#frame === frame) {\n      this.#terminationDeferred.resolve(\n        new Error('Navigating frame was detached')\n      );\n      return;\n    }\n    this.#checkLifecycleComplete();\n  }\n\n  async navigationResponse(): Promise<HTTPResponse | null> {\n    // Continue with a possibly null response.\n    await this.#navigationResponseReceived?.valueOrThrow();\n    return this.#navigationRequest ? this.#navigationRequest.response() : null;\n  }\n\n  sameDocumentNavigationPromise(): Promise<Error | undefined> {\n    return this.#sameDocumentNavigationDeferred.valueOrThrow();\n  }\n\n  newDocumentNavigationPromise(): Promise<Error | undefined> {\n    return this.#newDocumentNavigationDeferred.valueOrThrow();\n  }\n\n  lifecyclePromise(): Promise<void> {\n    return this.#lifecycleDeferred.valueOrThrow();\n  }\n\n  terminationPromise(): Promise<Error | TimeoutError | undefined> {\n    return this.#terminationDeferred.valueOrThrow();\n  }\n\n  #navigatedWithinDocument(): void {\n    this.#hasSameDocumentNavigation = true;\n    this.#checkLifecycleComplete();\n  }\n\n  #navigated(navigationType: Protocol.Page.NavigationType): void {\n    if (navigationType === 'BackForwardCacheRestore') {\n      return this.#frameSwapped();\n    }\n    this.#checkLifecycleComplete();\n  }\n\n  #frameSwapped(): void {\n    this.#swapped = true;\n    this.#checkLifecycleComplete();\n  }\n\n  #checkLifecycleComplete(): void {\n    // We expect navigation to commit.\n    if (!checkLifecycle(this.#frame, this.#expectedLifecycle)) {\n      return;\n    }\n    this.#lifecycleDeferred.resolve();\n    if (this.#hasSameDocumentNavigation) {\n      this.#sameDocumentNavigationDeferred.resolve(undefined);\n    }\n    if (this.#swapped || this.#frame._loaderId !== this.#initialLoaderId) {\n      this.#newDocumentNavigationDeferred.resolve(undefined);\n    }\n\n    function checkLifecycle(\n      frame: CdpFrame,\n      expectedLifecycle: ProtocolLifeCycleEvent[]\n    ): boolean {\n      for (const event of expectedLifecycle) {\n        if (!frame._lifecycleEvents.has(event)) {\n          return false;\n        }\n      }\n      for (const child of frame.childFrames()) {\n        if (\n          child._hasStartedLoading &&\n          !checkLifecycle(child, expectedLifecycle)\n        ) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  dispose(): void {\n    this.#subscriptions.dispose();\n    this.#terminationDeferred.resolve(new Error('LifecycleWatcher disposed'));\n  }\n}\n"],"mappings":"AAAA;;;;;AAQA,SAAoBA,UAAU,QAAO,iBAAiB;AAItD,SAAQC,YAAY,QAAO,2BAA2B;AACtD,SAAQC,mBAAmB,QAAO,mCAAmC;AACrE,SAAQC,MAAM,QAAO,mBAAmB;AACxC,SAAQC,QAAQ,QAAO,qBAAqB;AAC5C,SAAQC,eAAe,QAAO,uBAAuB;AAGrD,SAAQC,iBAAiB,QAAO,yBAAyB;AAmCzD,MAAMC,4BAA4B,GAAG,IAAIC,GAAG,CAG1C,CACA,CAAC,MAAM,EAAE,MAAM,CAAC,EAChB,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,EACxC,CAAC,cAAc,EAAE,aAAa,CAAC,EAC/B,CAAC,cAAc,EAAE,mBAAmB,CAAC,CACtC,CAAC;AAEF;;;AAGA,OAAM,MAAOC,gBAAgB;EAC3B,CAAAC,iBAAkB;EAClB,CAAAC,KAAM;EACN,CAAAC,OAAQ;EACR,CAAAC,iBAAkB,GAAuB,IAAI;EAC7C,CAAAC,aAAc,GAAG,IAAIT,eAAe,EAAE;EACtC,CAAAU,eAAgB;EAEhB,CAAAC,mBAAoB;EACpB,CAAAC,8BAA+B,GAAGb,QAAQ,CAACc,MAAM,EAAa;EAC9D,CAAAC,iBAAkB,GAAGf,QAAQ,CAACc,MAAM,EAAQ;EAC5C,CAAAE,6BAA8B,GAAGhB,QAAQ,CAACc,MAAM,EAAa;EAE7D,CAAAG,yBAA0B;EAC1B,CAAAC,OAAQ;EAER,CAAAC,0BAA2B;EAE3BC,YACEC,cAA8B,EAC9Bd,KAAe,EACfe,SAA8D,EAC9Dd,OAAe,EACfe,MAAoB;IAEpB,IAAIC,KAAK,CAACC,OAAO,CAACH,SAAS,CAAC,EAAE;MAC5BA,SAAS,GAAGA,SAAS,CAACI,KAAK,EAAE;IAC/B,CAAC,MAAM,IAAI,OAAOJ,SAAS,KAAK,QAAQ,EAAE;MACxCA,SAAS,GAAG,CAACA,SAAS,CAAC;IACzB;IACA,IAAI,CAAC,CAAAX,eAAgB,GAAGJ,KAAK,CAACoB,SAAS;IACvC,IAAI,CAAC,CAAArB,iBAAkB,GAAGgB,SAAS,CAACM,GAAG,CAACC,KAAK,IAAG;MAC9C,MAAMC,aAAa,GAAG3B,4BAA4B,CAAC4B,GAAG,CAACF,KAAK,CAAC;MAC7D9B,MAAM,CAAC+B,aAAa,EAAE,uCAAuC,GAAGD,KAAK,CAAC;MACtE,OAAOC,aAAuC;IAChD,CAAC,CAAC;IAEFP,MAAM,EAAES,gBAAgB,CAAC,OAAO,EAAE,MAAK;MACrC,IAAI,CAAC,CAAApB,mBAAoB,CAACqB,MAAM,CAACV,MAAM,CAACW,MAAM,CAAC;IACjD,CAAC,CAAC;IAEF,IAAI,CAAC,CAAA3B,KAAM,GAAGA,KAAK;IACnB,IAAI,CAAC,CAAAC,OAAQ,GAAGA,OAAO;IACvB,MAAM2B,mBAAmB,GAAG,IAAI,CAAC,CAAAzB,aAAc,CAAC0B,GAAG,CACjD,IAAIvC,YAAY,CAACU,KAAK,CAAC8B,aAAa,CAAC,CACtC;IACDF,mBAAmB,CAACG,EAAE,CACpBpC,iBAAiB,CAACqC,cAAc,EAChC,IAAI,CAAC,CAAAC,sBAAuB,CAACC,IAAI,CAAC,IAAI,CAAC,CACxC;IAED,MAAMC,YAAY,GAAG,IAAI,CAAC,CAAAhC,aAAc,CAAC0B,GAAG,CAAC,IAAIvC,YAAY,CAACU,KAAK,CAAC,CAAC;IACrEmC,YAAY,CAACJ,EAAE,CACb1C,UAAU,CAAC+C,4BAA4B,EACvC,IAAI,CAAC,CAAAC,uBAAwB,CAACH,IAAI,CAAC,IAAI,CAAC,CACzC;IACDC,YAAY,CAACJ,EAAE,CAAC1C,UAAU,CAACiD,cAAc,EAAE,IAAI,CAAC,CAAAC,SAAU,CAACL,IAAI,CAAC,IAAI,CAAC,CAAC;IACtEC,YAAY,CAACJ,EAAE,CAAC1C,UAAU,CAACmD,YAAY,EAAE,IAAI,CAAC,CAAAC,YAAa,CAACP,IAAI,CAAC,IAAI,CAAC,CAAC;IACvEC,YAAY,CAACJ,EAAE,CACb1C,UAAU,CAACqD,wBAAwB,EACnC,IAAI,CAAC,CAAAD,YAAa,CAACP,IAAI,CAAC,IAAI,CAAC,CAC9B;IACDC,YAAY,CAACJ,EAAE,CAAC1C,UAAU,CAACsD,aAAa,EAAE,IAAI,CAAC,CAAAC,eAAgB,CAACV,IAAI,CAAC,IAAI,CAAC,CAAC;IAE3E,MAAMW,qBAAqB,GAAG,IAAI,CAAC,CAAA1C,aAAc,CAAC0B,GAAG,CACnD,IAAIvC,YAAY,CAACwB,cAAc,CAAC,CACjC;IACD+B,qBAAqB,CAACd,EAAE,CACtBxC,mBAAmB,CAACuD,OAAO,EAC3B,IAAI,CAAC,CAAAC,SAAU,CAACb,IAAI,CAAC,IAAI,CAAC,CAC3B;IACDW,qBAAqB,CAACd,EAAE,CACtBxC,mBAAmB,CAACyD,QAAQ,EAC5B,IAAI,CAAC,CAAAC,UAAW,CAACf,IAAI,CAAC,IAAI,CAAC,CAC5B;IACDW,qBAAqB,CAACd,EAAE,CACtBxC,mBAAmB,CAAC2D,aAAa,EACjC,IAAI,CAAC,CAAAC,eAAgB,CAACjB,IAAI,CAAC,IAAI,CAAC,CACjC;IAED,IAAI,CAAC,CAAA7B,mBAAoB,GAAGZ,QAAQ,CAACc,MAAM,CAAQ;MACjDN,OAAO,EAAE,IAAI,CAAC,CAAAA,OAAQ;MACtBmD,OAAO,EAAE,yBAAyB,IAAI,CAAC,CAAAnD,OAAQ;KAChD,CAAC;IAEF,IAAI,CAAC,CAAAgC,sBAAuB,EAAE;EAChC;EAEA,CAAAc,SAAUM,CAACC,OAAoB;IAC7B,IAAIA,OAAO,CAACtD,KAAK,EAAE,KAAK,IAAI,CAAC,CAAAA,KAAM,IAAI,CAACsD,OAAO,CAACC,mBAAmB,EAAE,EAAE;MACrE;IACF;IACA,IAAI,CAAC,CAAArD,iBAAkB,GAAGoD,OAAO;IACjC;IACA;IACA;IACA,IAAI,CAAC,CAAA1C,0BAA2B,EAAE4C,OAAO,EAAE;IAC3C,IAAI,CAAC,CAAA5C,0BAA2B,GAAGnB,QAAQ,CAACc,MAAM,EAAE;IACpD,IAAI+C,OAAO,CAACG,QAAQ,EAAE,KAAK,IAAI,EAAE;MAC/B,IAAI,CAAC,CAAA7C,0BAA2B,EAAE4C,OAAO,EAAE;IAC7C;EACF;EAEA,CAAAL,eAAgBO,CAACJ,OAAoB;IACnC,IAAI,IAAI,CAAC,CAAApD,iBAAkB,EAAEyD,EAAE,KAAKL,OAAO,CAACK,EAAE,EAAE;MAC9C;IACF;IACA,IAAI,CAAC,CAAA/C,0BAA2B,EAAE4C,OAAO,EAAE;EAC7C;EAEA,CAAAP,UAAWW,CAACH,QAAsB;IAChC,IAAI,IAAI,CAAC,CAAAvD,iBAAkB,EAAEyD,EAAE,KAAKF,QAAQ,CAACH,OAAO,EAAE,CAACK,EAAE,EAAE;MACzD;IACF;IACA,IAAI,CAAC,CAAA/C,0BAA2B,EAAE4C,OAAO,EAAE;EAC7C;EAEA,CAAAZ,eAAgBiB,CAAC7D,KAAY;IAC3B,IAAI,IAAI,CAAC,CAAAA,KAAM,KAAKA,KAAK,EAAE;MACzB,IAAI,CAAC,CAAAK,mBAAoB,CAACmD,OAAO,CAC/B,IAAIM,KAAK,CAAC,+BAA+B,CAAC,CAC3C;MACD;IACF;IACA,IAAI,CAAC,CAAA7B,sBAAuB,EAAE;EAChC;EAEA,MAAM8B,kBAAkBA,CAAA;IACtB;IACA,MAAM,IAAI,CAAC,CAAAnD,0BAA2B,EAAEoD,YAAY,EAAE;IACtD,OAAO,IAAI,CAAC,CAAA9D,iBAAkB,GAAG,IAAI,CAAC,CAAAA,iBAAkB,CAACuD,QAAQ,EAAE,GAAG,IAAI;EAC5E;EAEAQ,6BAA6BA,CAAA;IAC3B,OAAO,IAAI,CAAC,CAAA3D,8BAA+B,CAAC0D,YAAY,EAAE;EAC5D;EAEAE,4BAA4BA,CAAA;IAC1B,OAAO,IAAI,CAAC,CAAAzD,6BAA8B,CAACuD,YAAY,EAAE;EAC3D;EAEAG,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAAC,CAAA3D,iBAAkB,CAACwD,YAAY,EAAE;EAC/C;EAEAI,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAAC,CAAA/D,mBAAoB,CAAC2D,YAAY,EAAE;EACjD;EAEA,CAAA3B,uBAAwBgC,CAAA;IACtB,IAAI,CAAC,CAAA3D,yBAA0B,GAAG,IAAI;IACtC,IAAI,CAAC,CAAAuB,sBAAuB,EAAE;EAChC;EAEA,CAAAM,SAAU+B,CAACC,cAA4C;IACrD,IAAIA,cAAc,KAAK,yBAAyB,EAAE;MAChD,OAAO,IAAI,CAAC,CAAA9B,YAAa,EAAE;IAC7B;IACA,IAAI,CAAC,CAAAR,sBAAuB,EAAE;EAChC;EAEA,CAAAQ,YAAa+B,CAAA;IACX,IAAI,CAAC,CAAA7D,OAAQ,GAAG,IAAI;IACpB,IAAI,CAAC,CAAAsB,sBAAuB,EAAE;EAChC;EAEA,CAAAA,sBAAuBwC,CAAA;IACrB;IACA,IAAI,CAACC,cAAc,CAAC,IAAI,CAAC,CAAA1E,KAAM,EAAE,IAAI,CAAC,CAAAD,iBAAkB,CAAC,EAAE;MACzD;IACF;IACA,IAAI,CAAC,CAAAS,iBAAkB,CAACgD,OAAO,EAAE;IACjC,IAAI,IAAI,CAAC,CAAA9C,yBAA0B,EAAE;MACnC,IAAI,CAAC,CAAAJ,8BAA+B,CAACkD,OAAO,CAACmB,SAAS,CAAC;IACzD;IACA,IAAI,IAAI,CAAC,CAAAhE,OAAQ,IAAI,IAAI,CAAC,CAAAX,KAAM,CAACoB,SAAS,KAAK,IAAI,CAAC,CAAAhB,eAAgB,EAAE;MACpE,IAAI,CAAC,CAAAK,6BAA8B,CAAC+C,OAAO,CAACmB,SAAS,CAAC;IACxD;IAEA,SAASD,cAAcA,CACrB1E,KAAe,EACfD,iBAA2C;MAE3C,KAAK,MAAM6E,KAAK,IAAI7E,iBAAiB,EAAE;QACrC,IAAI,CAACC,KAAK,CAAC6E,gBAAgB,CAACC,GAAG,CAACF,KAAK,CAAC,EAAE;UACtC,OAAO,KAAK;QACd;MACF;MACA,KAAK,MAAMG,KAAK,IAAI/E,KAAK,CAACgF,WAAW,EAAE,EAAE;QACvC,IACED,KAAK,CAACE,kBAAkB,IACxB,CAACP,cAAc,CAACK,KAAK,EAAEhF,iBAAiB,CAAC,EACzC;UACA,OAAO,KAAK;QACd;MACF;MACA,OAAO,IAAI;IACb;EACF;EAEAmF,OAAOA,CAAA;IACL,IAAI,CAAC,CAAA/E,aAAc,CAAC+E,OAAO,EAAE;IAC7B,IAAI,CAAC,CAAA7E,mBAAoB,CAACmD,OAAO,CAAC,IAAIM,KAAK,CAAC,2BAA2B,CAAC,CAAC;EAC3E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}