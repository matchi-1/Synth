{"ast":null,"code":"/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule accumulateInto\n */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\n/**\n *\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto(current, next) {\n  \"production\" !== process.env.NODE_ENV ? invariant(next != null, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(next != null);\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  var currentIsArray = Array.isArray(current);\n  var nextIsArray = Array.isArray(next);\n  if (currentIsArray && nextIsArray) {\n    current.push.apply(current, next);\n    return current;\n  }\n  if (currentIsArray) {\n    current.push(next);\n    return current;\n  }\n  if (nextIsArray) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n  return [current, next];\n}\nmodule.exports = accumulateInto;","map":{"version":3,"names":["invariant","require","accumulateInto","current","next","process","env","NODE_ENV","currentIsArray","Array","isArray","nextIsArray","push","apply","concat","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/accumulateInto.js"],"sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule accumulateInto\n */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\n/**\n *\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto(current, next) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    next != null,\n    'accumulateInto(...): Accumulated items must not be null or undefined.'\n  ) : invariant(next != null));\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  var currentIsArray = Array.isArray(current);\n  var nextIsArray = Array.isArray(next);\n\n  if (currentIsArray && nextIsArray) {\n    current.push.apply(current, next);\n    return current;\n  }\n\n  if (currentIsArray) {\n    current.push(next);\n    return current;\n  }\n\n  if (nextIsArray) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\nmodule.exports = accumulateInto;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,cAAcA,CAACC,OAAO,EAAEC,IAAI,EAAE;EACpC,YAAY,KAAKC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAGP,SAAS,CAChDI,IAAI,IAAI,IAAI,EACZ,uEACF,CAAC,GAAGJ,SAAS,CAACI,IAAI,IAAI,IAAI,CAAC;EAC3B,IAAID,OAAO,IAAI,IAAI,EAAE;IACnB,OAAOC,IAAI;EACb;;EAEA;EACA;EACA,IAAII,cAAc,GAAGC,KAAK,CAACC,OAAO,CAACP,OAAO,CAAC;EAC3C,IAAIQ,WAAW,GAAGF,KAAK,CAACC,OAAO,CAACN,IAAI,CAAC;EAErC,IAAII,cAAc,IAAIG,WAAW,EAAE;IACjCR,OAAO,CAACS,IAAI,CAACC,KAAK,CAACV,OAAO,EAAEC,IAAI,CAAC;IACjC,OAAOD,OAAO;EAChB;EAEA,IAAIK,cAAc,EAAE;IAClBL,OAAO,CAACS,IAAI,CAACR,IAAI,CAAC;IAClB,OAAOD,OAAO;EAChB;EAEA,IAAIQ,WAAW,EAAE;IACf;IACA,OAAO,CAACR,OAAO,CAAC,CAACW,MAAM,CAACV,IAAI,CAAC;EAC/B;EAEA,OAAO,CAACD,OAAO,EAAEC,IAAI,CAAC;AACxB;AAEAW,MAAM,CAACC,OAAO,GAAGd,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}