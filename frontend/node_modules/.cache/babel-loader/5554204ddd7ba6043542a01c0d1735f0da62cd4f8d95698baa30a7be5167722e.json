{"ast":null,"code":"import OpenAI from \"openai/index.mjs\";\nimport axios from \"axios\";\nimport * as cheerio from \"cheerio\";\nconst client = new OpenAI({\n  dangerouslyAllowBrowser: true,\n  apiKey: \"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\"\n});\nconst getSite = async link => {\n  const res = await axios.get(`http://localhost:5000/?url=${link}`);\n  let content = res.data.replace(/<style\\b[^<]*(?:(?!<\\/style>)<[^<]*)*<\\/style>/gi, '').replace(/<link\\b[^<]*(?:(?!<\\/link>)<[^<]*)*<\\/link>/gi, '').replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\n  const contents = content.split('\\n');\n  let finalText = [];\n  contents.forEach(content => {\n    const tag = cheerio.load(content);\n    const text = tag.text();\n    finalText.push(text);\n  });\n  return finalText.join(' ');\n};\nfunction splitTextIntoThree(text) {\n  const partLength = Math.ceil(text.length / 3);\n  const part1 = text.slice(0, partLength);\n  const part2 = text.slice(partLength, 2 * partLength);\n  const part3 = text.slice(2 * partLength);\n  return [part1, part2, part3];\n}\nasync function chat(link, prompt) {\n  const article = await getSite(link);\n  const split = splitTextIntoThree(article);\n  let responses = [];\n  await Promise.all(split.map(async text => {\n    const chatCompletion = await client.chat.completions.create({\n      messages: [{\n        role: 'user',\n        content: `Categorize specific blocks of text from the provided text into the following only, nothing more: Highly Relevant, Moderately Relevant, and Tangentially Relevant based on this prompt: '${prompt}' (if no prompt was given, based on the whole text). Keep the text from the provided article as is and make sure to include all text in the article provided. If you think the text contains no relevant items, return a blank string. Return a JSON format of {<category> : {[<texts>]} }with the keys being the categories The text is \"${text}\"`\n      }],\n      model: 'gpt-3.5-turbo'\n    });\n    responses.push(chatCompletion.choices[0].message.content);\n  }));\n  return responses;\n}\nexport default chat;\n// const res = await chat();\n\n// res.forEach((e) => {\n//     const obj = JSON.parse(e);\n//     console.log(obj);\n// });","map":{"version":3,"names":["OpenAI","axios","cheerio","client","dangerouslyAllowBrowser","apiKey","getSite","link","res","get","content","data","replace","contents","split","finalText","forEach","tag","load","text","push","join","splitTextIntoThree","partLength","Math","ceil","length","part1","slice","part2","part3","chat","prompt","article","responses","Promise","all","map","chatCompletion","completions","create","messages","role","model","choices","message"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/frontend/src/chatgpt/ai.js"],"sourcesContent":["import OpenAI from \"openai/index.mjs\";\r\nimport axios from \"axios\";\r\nimport * as cheerio from \"cheerio\";\r\n\r\nconst client = new OpenAI({\r\n    dangerouslyAllowBrowser: true,\r\n    apiKey: \"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\"\r\n});\r\n\r\nconst getSite = async (link) => {\r\n    const res = await axios.get(`http://localhost:5000/?url=${link}`);\r\n    let content = res.data.replace(/<style\\b[^<]*(?:(?!<\\/style>)<[^<]*)*<\\/style>/gi, '')\r\n                        .replace(/<link\\b[^<]*(?:(?!<\\/link>)<[^<]*)*<\\/link>/gi, '')\r\n                        .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\r\n    const contents = content.split('\\n');\r\n    let finalText = []\r\n    contents.forEach(content => {\r\n        const tag = cheerio.load(content);\r\n        const text = tag.text();\r\n        finalText.push(text);\r\n    })\r\n    return finalText.join(' ');\r\n}\r\n\r\nfunction splitTextIntoThree(text) {\r\n    const partLength = Math.ceil(text.length / 3);\r\n    const part1 = text.slice(0, partLength);\r\n    const part2 = text.slice(partLength, 2 * partLength);\r\n    const part3 = text.slice(2 * partLength);\r\n\r\n    return [part1, part2, part3];\r\n}\r\n\r\nasync function chat(link, prompt) {\r\n   const article = await getSite(link);\r\n   const split = splitTextIntoThree(article);\r\n   let responses = []\r\n    await Promise.all(split.map(async (text) => {\r\n        const chatCompletion =  await client.chat.completions.create({\r\n                    messages: [{ role: 'user', content: `Categorize specific blocks of text from the provided text into the following only, nothing more: Highly Relevant, Moderately Relevant, and Tangentially Relevant based on this prompt: '${prompt}' (if no prompt was given, based on the whole text). Keep the text from the provided article as is and make sure to include all text in the article provided. If you think the text contains no relevant items, return a blank string. Return a JSON format of {<category> : {[<texts>]} }with the keys being the categories The text is \"${text}\"`}],\r\n                    model: 'gpt-3.5-turbo',\r\n                }); \r\n        responses.push(chatCompletion.choices[0].message.content);\r\n    }));\r\n    return responses;\r\n }\r\n\r\n export default chat;\r\n// const res = await chat();\r\n\r\n// res.forEach((e) => {\r\n//     const obj = JSON.parse(e);\r\n//     console.log(obj);\r\n// });"],"mappings":"AAAA,OAAOA,MAAM,MAAM,kBAAkB;AACrC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,OAAO,MAAM,SAAS;AAElC,MAAMC,MAAM,GAAG,IAAIH,MAAM,CAAC;EACtBI,uBAAuB,EAAE,IAAI;EAC7BC,MAAM,EAAE;AACZ,CAAC,CAAC;AAEF,MAAMC,OAAO,GAAG,MAAOC,IAAI,IAAK;EAC5B,MAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,8BAA8BF,IAAI,EAAE,CAAC;EACjE,IAAIG,OAAO,GAAGF,GAAG,CAACG,IAAI,CAACC,OAAO,CAAC,kDAAkD,EAAE,EAAE,CAAC,CACjEA,OAAO,CAAC,+CAA+C,EAAE,EAAE,CAAC,CAC5DA,OAAO,CAAC,qDAAqD,EAAE,EAAE,CAAC;EACvF,MAAMC,QAAQ,GAAGH,OAAO,CAACI,KAAK,CAAC,IAAI,CAAC;EACpC,IAAIC,SAAS,GAAG,EAAE;EAClBF,QAAQ,CAACG,OAAO,CAACN,OAAO,IAAI;IACxB,MAAMO,GAAG,GAAGf,OAAO,CAACgB,IAAI,CAACR,OAAO,CAAC;IACjC,MAAMS,IAAI,GAAGF,GAAG,CAACE,IAAI,CAAC,CAAC;IACvBJ,SAAS,CAACK,IAAI,CAACD,IAAI,CAAC;EACxB,CAAC,CAAC;EACF,OAAOJ,SAAS,CAACM,IAAI,CAAC,GAAG,CAAC;AAC9B,CAAC;AAED,SAASC,kBAAkBA,CAACH,IAAI,EAAE;EAC9B,MAAMI,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACN,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC;EAC7C,MAAMC,KAAK,GAAGR,IAAI,CAACS,KAAK,CAAC,CAAC,EAAEL,UAAU,CAAC;EACvC,MAAMM,KAAK,GAAGV,IAAI,CAACS,KAAK,CAACL,UAAU,EAAE,CAAC,GAAGA,UAAU,CAAC;EACpD,MAAMO,KAAK,GAAGX,IAAI,CAACS,KAAK,CAAC,CAAC,GAAGL,UAAU,CAAC;EAExC,OAAO,CAACI,KAAK,EAAEE,KAAK,EAAEC,KAAK,CAAC;AAChC;AAEA,eAAeC,IAAIA,CAACxB,IAAI,EAAEyB,MAAM,EAAE;EAC/B,MAAMC,OAAO,GAAG,MAAM3B,OAAO,CAACC,IAAI,CAAC;EACnC,MAAMO,KAAK,GAAGQ,kBAAkB,CAACW,OAAO,CAAC;EACzC,IAAIC,SAAS,GAAG,EAAE;EACjB,MAAMC,OAAO,CAACC,GAAG,CAACtB,KAAK,CAACuB,GAAG,CAAC,MAAOlB,IAAI,IAAK;IACxC,MAAMmB,cAAc,GAAI,MAAMnC,MAAM,CAAC4B,IAAI,CAACQ,WAAW,CAACC,MAAM,CAAC;MACjDC,QAAQ,EAAE,CAAC;QAAEC,IAAI,EAAE,MAAM;QAAEhC,OAAO,EAAE,2LAA2LsB,MAAM,6UAA6Ub,IAAI;MAAG,CAAC,CAAC;MAC3jBwB,KAAK,EAAE;IACX,CAAC,CAAC;IACVT,SAAS,CAACd,IAAI,CAACkB,cAAc,CAACM,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACnC,OAAO,CAAC;EAC7D,CAAC,CAAC,CAAC;EACH,OAAOwB,SAAS;AACnB;AAEA,eAAeH,IAAI;AACpB;;AAEA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}