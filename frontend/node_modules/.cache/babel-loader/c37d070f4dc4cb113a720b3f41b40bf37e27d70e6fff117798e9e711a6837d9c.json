{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nexport {};","map":{"version":3,"names":[],"sources":["C:\\Users\\raffy\\Desktop\\test\\node_modules\\puppeteer-core\\src\\common\\Configuration.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {SupportedBrowser} from './SupportedBrowser.js';\n\n/**\n * Defines experiment options for Puppeteer.\n *\n * See individual properties for more information.\n *\n * @public\n */\nexport type ExperimentsConfiguration = Record<string, never>;\n\n/**\n * Defines options to configure Puppeteer's behavior during installation and\n * runtime.\n *\n * See individual properties for more information.\n *\n * @public\n */\nexport interface Configuration {\n  /**\n   * Defines the directory to be used by Puppeteer for caching.\n   *\n   * Can be overridden by `PUPPETEER_CACHE_DIR`.\n   *\n   * @defaultValue `path.join(os.homedir(), '.cache', 'puppeteer')`\n   */\n  cacheDirectory?: string;\n  /**\n   * Specifies an executable path to be used in\n   * {@link PuppeteerNode.launch | puppeteer.launch}.\n   *\n   * Can be overridden by `PUPPETEER_EXECUTABLE_PATH`.\n   *\n   * @defaultValue **Auto-computed.**\n   */\n  executablePath?: string;\n  /**\n   * Specifies which browser you'd like Puppeteer to use.\n   *\n   * Can be overridden by `PUPPETEER_BROWSER`.\n   *\n   * @defaultValue `chrome`\n   */\n  defaultBrowser?: SupportedBrowser;\n  /**\n   * Defines the directory to be used by Puppeteer for creating temporary files.\n   *\n   * Can be overridden by `PUPPETEER_TMP_DIR`.\n   *\n   * @defaultValue `os.tmpdir()`\n   */\n  temporaryDirectory?: string;\n  /**\n   * Tells Puppeteer to not download during installation.\n   *\n   * Can be overridden by `PUPPETEER_SKIP_DOWNLOAD`.\n   */\n  skipDownload?: boolean;\n  /**\n   * Tells Puppeteer to log at the given level.\n   *\n   * @defaultValue `warn`\n   */\n  logLevel?: 'silent' | 'error' | 'warn';\n  /**\n   * Defines experimental options for Puppeteer.\n   */\n  experiments?: ExperimentsConfiguration;\n\n  chrome?: ChromeSettings;\n  ['chrome-headless-shell']?: ChromeHeadlessShellSettings;\n  firefox?: FirefoxSettings;\n}\n\n/**\n * @public\n */\nexport interface ChromeSettings {\n  /**\n   * Tells Puppeteer to not download the browser during installation.\n   *\n   * Can be overridden by `PUPPETEER_CHROME_SKIP_DOWNLOAD`.\n   *\n   * @defaultValue false\n   */\n  skipDownload?: boolean;\n  /**\n   * Specifies the URL prefix that is used to download the browser.\n   *\n   * Can be overridden by `PUPPETEER_CHROME_DOWNLOAD_BASE_URL`.\n   *\n   * @remarks\n   * This must include the protocol and may even need a path prefix.\n   * This must **not** include a trailing slash similar to the default.\n   *\n   * @defaultValue https://storage.googleapis.com/chrome-for-testing-public\n   */\n  downloadBaseUrl?: string;\n  /**\n   * Specifies a certain version of the browser you'd like Puppeteer to use.\n   *\n   * Can be overridden by `PUPPETEER_CHROME_VERSION`\n   * or `PUPPETEER_SKIP_CHROME_DOWNLOAD`.\n   *\n   * See {@link PuppeteerNode.launch | puppeteer.launch} on how executable path\n   * is inferred.\n   *\n   * @example 119.0.6045.105\n   * @defaultValue The pinned browser version supported by the current Puppeteer\n   * version.\n   */\n  version?: string;\n}\n\n/**\n * @public\n */\nexport interface ChromeHeadlessShellSettings {\n  /**\n   * Tells Puppeteer to not download the browser during installation.\n   *\n   * Can be overridden by `PUPPETEER_CHROME_HEADLESS_SHELL_SKIP_DOWNLOAD`\n   * or `PUPPETEER_SKIP_CHROME_HEADLESS_SHELL_DOWNLOAD`.\n   *\n   * @defaultValue false\n   */\n  skipDownload?: boolean;\n  /**\n   * Specifies the URL prefix that is used to download the browser.\n   *\n   * Can be overridden by `PUPPETEER_CHROME_HEADLESS_SHELL_DOWNLOAD_BASE_URL`.\n   *\n   * @remarks\n   * This must include the protocol and may even need a path prefix.\n   * This must **not** include a trailing slash similar to the default.\n   *\n   * @defaultValue https://storage.googleapis.com/chrome-for-testing-public\n   */\n  downloadBaseUrl?: string;\n  /**\n   * Specifies a certain version of the browser you'd like Puppeteer to use.\n   *\n   * Can be overridden by `PUPPETEER_CHROME_HEADLESS_SHELL_VERSION`.\n   *\n   * See {@link PuppeteerNode.launch | puppeteer.launch} on how executable path\n   * is inferred.\n   *\n   * @example 119.0.6045.105\n   * @defaultValue The pinned browser version supported by the current Puppeteer\n   * version.\n   */\n  version?: string;\n}\n\n/**\n * @public\n */\nexport interface FirefoxSettings {\n  /**\n   * Tells Puppeteer to not download the browser during installation.\n   *\n   * Can be overridden by `PUPPETEER_FIREFOX_SKIP_DOWNLOAD`.\n   *\n   * @defaultValue true\n   */\n  skipDownload?: boolean;\n  /**\n   * Specifies the URL prefix that is used to download the browser.\n   *\n   * Can be overridden by `PUPPETEER_FIREFOX_DOWNLOAD_BASE_URL`.\n   *\n   * @remarks\n   * This must include the protocol and may even need a path prefix.\n   * This must **not** include a trailing slash similar to the default.\n   *\n   * @defaultValue https://archive.mozilla.org/pub/firefox/releases\n   */\n  downloadBaseUrl?: string;\n  /**\n   * Specifies a certain version of the browser you'd like Puppeteer to use.\n   *\n   * Can be overridden by `PUPPETEER_FIREFOX_VERSION`.\n   *\n   * See {@link PuppeteerNode.launch | puppeteer.launch} on how executable path\n   * is inferred.\n   *\n   * @example stable_129.0\n   * @defaultValue The pinned browser version supported by the current Puppeteer\n   * version.\n   */\n  version?: string;\n}\n"],"mappings":"AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}