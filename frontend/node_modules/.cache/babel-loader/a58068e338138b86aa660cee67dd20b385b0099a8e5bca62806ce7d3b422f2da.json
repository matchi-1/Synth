{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPropagators\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginHub = require(\"./EventPluginHub\");\nvar accumulateInto = require(\"./accumulateInto\");\nvar forEachAccumulated = require(\"./forEachAccumulated\");\nvar PropagationPhases = EventConstants.PropagationPhases;\nvar getListener = EventPluginHub.getListener;\n\n/**\n * Some event types have a notion of different registration names for different\n * \"phases\" of propagation. This finds listeners by a given phase.\n */\nfunction listenerAtPhase(id, event, propagationPhase) {\n  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n  return getListener(id, registrationName);\n}\n\n/**\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function\n * here, allows us to not have to bind or create functions for each event.\n * Mutating the event's members allows us to not have to create a wrapping\n * \"dispatch\" object that pairs the event with the listener.\n */\nfunction accumulateDirectionalDispatches(domID, upwards, event) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    if (!domID) {\n      throw new Error('Dispatching id must not be null');\n    }\n  }\n  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;\n  var listener = listenerAtPhase(domID, event, phase);\n  if (listener) {\n    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);\n  }\n}\n\n/**\n * Collect dispatches (must be entirely collected before dispatching - see unit\n * tests). Lazily allocate the array to conserve memory.  We must loop through\n * each event and perform the traversal for each one. We can not perform a\n * single traversal for the entire collection of events because each event may\n * have a different target.\n */\nfunction accumulateTwoPhaseDispatchesSingle(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);\n  }\n}\n\n/**\n * Accumulates without regard to direction, does not look for phased\n * registration names. Same as `accumulateDirectDispatchesSingle` but without\n * requiring that the `dispatchMarker` be the same as the dispatched ID.\n */\nfunction accumulateDispatches(id, ignoredDirection, event) {\n  if (event && event.dispatchConfig.registrationName) {\n    var registrationName = event.dispatchConfig.registrationName;\n    var listener = getListener(id, registrationName);\n    if (listener) {\n      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);\n    }\n  }\n}\n\n/**\n * Accumulates dispatches on an `SyntheticEvent`, but only for the\n * `dispatchMarker`.\n * @param {SyntheticEvent} event\n */\nfunction accumulateDirectDispatchesSingle(event) {\n  if (event && event.dispatchConfig.registrationName) {\n    accumulateDispatches(event.dispatchMarker, null, event);\n  }\n}\nfunction accumulateTwoPhaseDispatches(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n}\nfunction accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {\n  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);\n}\nfunction accumulateDirectDispatches(events) {\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);\n}\n\n/**\n * A small set of propagation patterns, each of which will accept a small amount\n * of information, and generate a set of \"dispatch ready event objects\" - which\n * are sets of events that have already been annotated with a set of dispatched\n * listener functions/ids. The API is designed this way to discourage these\n * propagation strategies from actually executing the dispatches, since we\n * always want to collect the entire set of dispatches before executing event a\n * single one.\n *\n * @constructor EventPropagators\n */\nvar EventPropagators = {\n  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,\n  accumulateDirectDispatches: accumulateDirectDispatches,\n  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches\n};\nmodule.exports = EventPropagators;","map":{"version":3,"names":["EventConstants","require","EventPluginHub","accumulateInto","forEachAccumulated","PropagationPhases","getListener","listenerAtPhase","id","event","propagationPhase","registrationName","dispatchConfig","phasedRegistrationNames","accumulateDirectionalDispatches","domID","upwards","process","env","NODE_ENV","Error","phase","bubbled","captured","listener","_dispatchListeners","_dispatchIDs","accumulateTwoPhaseDispatchesSingle","injection","getInstanceHandle","traverseTwoPhase","dispatchMarker","accumulateDispatches","ignoredDirection","accumulateDirectDispatchesSingle","accumulateTwoPhaseDispatches","events","accumulateEnterLeaveDispatches","leave","enter","fromID","toID","traverseEnterLeave","accumulateDirectDispatches","EventPropagators","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/EventPropagators.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPropagators\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginHub = require(\"./EventPluginHub\");\n\nvar accumulateInto = require(\"./accumulateInto\");\nvar forEachAccumulated = require(\"./forEachAccumulated\");\n\nvar PropagationPhases = EventConstants.PropagationPhases;\nvar getListener = EventPluginHub.getListener;\n\n/**\n * Some event types have a notion of different registration names for different\n * \"phases\" of propagation. This finds listeners by a given phase.\n */\nfunction listenerAtPhase(id, event, propagationPhase) {\n  var registrationName =\n    event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n  return getListener(id, registrationName);\n}\n\n/**\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function\n * here, allows us to not have to bind or create functions for each event.\n * Mutating the event's members allows us to not have to create a wrapping\n * \"dispatch\" object that pairs the event with the listener.\n */\nfunction accumulateDirectionalDispatches(domID, upwards, event) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    if (!domID) {\n      throw new Error('Dispatching id must not be null');\n    }\n  }\n  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;\n  var listener = listenerAtPhase(domID, event, phase);\n  if (listener) {\n    event._dispatchListeners =\n      accumulateInto(event._dispatchListeners, listener);\n    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);\n  }\n}\n\n/**\n * Collect dispatches (must be entirely collected before dispatching - see unit\n * tests). Lazily allocate the array to conserve memory.  We must loop through\n * each event and perform the traversal for each one. We can not perform a\n * single traversal for the entire collection of events because each event may\n * have a different target.\n */\nfunction accumulateTwoPhaseDispatchesSingle(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(\n      event.dispatchMarker,\n      accumulateDirectionalDispatches,\n      event\n    );\n  }\n}\n\n\n/**\n * Accumulates without regard to direction, does not look for phased\n * registration names. Same as `accumulateDirectDispatchesSingle` but without\n * requiring that the `dispatchMarker` be the same as the dispatched ID.\n */\nfunction accumulateDispatches(id, ignoredDirection, event) {\n  if (event && event.dispatchConfig.registrationName) {\n    var registrationName = event.dispatchConfig.registrationName;\n    var listener = getListener(id, registrationName);\n    if (listener) {\n      event._dispatchListeners =\n        accumulateInto(event._dispatchListeners, listener);\n      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);\n    }\n  }\n}\n\n/**\n * Accumulates dispatches on an `SyntheticEvent`, but only for the\n * `dispatchMarker`.\n * @param {SyntheticEvent} event\n */\nfunction accumulateDirectDispatchesSingle(event) {\n  if (event && event.dispatchConfig.registrationName) {\n    accumulateDispatches(event.dispatchMarker, null, event);\n  }\n}\n\nfunction accumulateTwoPhaseDispatches(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n}\n\nfunction accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {\n  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(\n    fromID,\n    toID,\n    accumulateDispatches,\n    leave,\n    enter\n  );\n}\n\n\nfunction accumulateDirectDispatches(events) {\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);\n}\n\n\n\n/**\n * A small set of propagation patterns, each of which will accept a small amount\n * of information, and generate a set of \"dispatch ready event objects\" - which\n * are sets of events that have already been annotated with a set of dispatched\n * listener functions/ids. The API is designed this way to discourage these\n * propagation strategies from actually executing the dispatches, since we\n * always want to collect the entire set of dispatches before executing event a\n * single one.\n *\n * @constructor EventPropagators\n */\nvar EventPropagators = {\n  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,\n  accumulateDirectDispatches: accumulateDirectDispatches,\n  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches\n};\n\nmodule.exports = EventPropagators;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}