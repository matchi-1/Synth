{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport mitt from '../../third_party/mitt/mitt.js';\nimport { disposeSymbol } from '../util/disposable.js';\n/**\n * The EventEmitter class that many Puppeteer classes extend.\n *\n * @remarks\n *\n * This allows you to listen to events that Puppeteer classes fire and act\n * accordingly. Therefore you'll mostly use {@link EventEmitter.on | on} and\n * {@link EventEmitter.off | off} to bind\n * and unbind to event listeners.\n *\n * @public\n */\nexport class EventEmitter {\n  #emitter;\n  #handlers = new Map();\n  /**\n   * If you pass an emitter, the returned emitter will wrap the passed emitter.\n   *\n   * @internal\n   */\n  constructor(emitter = mitt(new Map())) {\n    this.#emitter = emitter;\n  }\n  /**\n   * Bind an event listener to fire when an event occurs.\n   * @param type - the event type you'd like to listen to. Can be a string or symbol.\n   * @param handler - the function to be called when the event occurs.\n   * @returns `this` to enable you to chain method calls.\n   */\n  on(type, handler) {\n    const handlers = this.#handlers.get(type);\n    if (handlers === undefined) {\n      this.#handlers.set(type, [handler]);\n    } else {\n      handlers.push(handler);\n    }\n    this.#emitter.on(type, handler);\n    return this;\n  }\n  /**\n   * Remove an event listener from firing.\n   * @param type - the event type you'd like to stop listening to.\n   * @param handler - the function that should be removed.\n   * @returns `this` to enable you to chain method calls.\n   */\n  off(type, handler) {\n    const handlers = this.#handlers.get(type) ?? [];\n    if (handler === undefined) {\n      for (const handler of handlers) {\n        this.#emitter.off(type, handler);\n      }\n      this.#handlers.delete(type);\n      return this;\n    }\n    const index = handlers.lastIndexOf(handler);\n    if (index > -1) {\n      this.#emitter.off(type, ...handlers.splice(index, 1));\n    }\n    return this;\n  }\n  /**\n   * Emit an event and call any associated listeners.\n   *\n   * @param type - the event you'd like to emit\n   * @param eventData - any data you'd like to emit with the event\n   * @returns `true` if there are any listeners, `false` if there are not.\n   */\n  emit(type, event) {\n    this.#emitter.emit(type, event);\n    return this.listenerCount(type) > 0;\n  }\n  /**\n   * Like `on` but the listener will only be fired once and then it will be removed.\n   * @param type - the event you'd like to listen to\n   * @param handler - the handler function to run when the event occurs\n   * @returns `this` to enable you to chain method calls.\n   */\n  once(type, handler) {\n    const onceHandler = eventData => {\n      handler(eventData);\n      this.off(type, onceHandler);\n    };\n    return this.on(type, onceHandler);\n  }\n  /**\n   * Gets the number of listeners for a given event.\n   *\n   * @param type - the event to get the listener count for\n   * @returns the number of listeners bound to the given event\n   */\n  listenerCount(type) {\n    return this.#handlers.get(type)?.length || 0;\n  }\n  /**\n   * Removes all listeners. If given an event argument, it will remove only\n   * listeners for that event.\n   *\n   * @param type - the event to remove listeners for.\n   * @returns `this` to enable you to chain method calls.\n   */\n  removeAllListeners(type) {\n    if (type !== undefined) {\n      return this.off(type);\n    }\n    this[disposeSymbol]();\n    return this;\n  }\n  /**\n   * @internal\n   */\n  [disposeSymbol]() {\n    for (const [type, handlers] of this.#handlers) {\n      for (const handler of handlers) {\n        this.#emitter.off(type, handler);\n      }\n    }\n    this.#handlers.clear();\n  }\n}","map":{"version":3,"names":["mitt","disposeSymbol","EventEmitter","emitter","handlers","Map","constructor","on","type","handler","get","undefined","set","push","off","delete","index","lastIndexOf","splice","emit","event","listenerCount","once","onceHandler","eventData","length","removeAllListeners","clear"],"sources":["C:\\Users\\raffy\\Desktop\\test\\node_modules\\puppeteer-core\\src\\common\\EventEmitter.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport mitt, {type Emitter} from '../../third_party/mitt/mitt.js';\nimport {disposeSymbol} from '../util/disposable.js';\n\n/**\n * @public\n */\nexport type EventType = string | symbol;\n\n/**\n * @public\n */\nexport type Handler<T = unknown> = (event: T) => void;\n\n/**\n * @public\n */\nexport interface CommonEventEmitter<Events extends Record<EventType, unknown>> {\n  on<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): this;\n  off<Key extends keyof Events>(\n    type: Key,\n    handler?: Handler<Events[Key]>\n  ): this;\n  emit<Key extends keyof Events>(type: Key, event: Events[Key]): boolean;\n  once<Key extends keyof Events>(\n    type: Key,\n    handler: Handler<Events[Key]>\n  ): this;\n  listenerCount(event: keyof Events): number;\n\n  removeAllListeners(event?: keyof Events): this;\n}\n\n/**\n * @public\n */\nexport type EventsWithWildcard<Events extends Record<EventType, unknown>> =\n  Events & {\n    '*': Events[keyof Events];\n  };\n\n/**\n * The EventEmitter class that many Puppeteer classes extend.\n *\n * @remarks\n *\n * This allows you to listen to events that Puppeteer classes fire and act\n * accordingly. Therefore you'll mostly use {@link EventEmitter.on | on} and\n * {@link EventEmitter.off | off} to bind\n * and unbind to event listeners.\n *\n * @public\n */\nexport class EventEmitter<Events extends Record<EventType, unknown>>\n  implements CommonEventEmitter<EventsWithWildcard<Events>>\n{\n  #emitter: Emitter<EventsWithWildcard<Events>> | EventEmitter<Events>;\n  #handlers = new Map<keyof Events | '*', Array<Handler<any>>>();\n\n  /**\n   * If you pass an emitter, the returned emitter will wrap the passed emitter.\n   *\n   * @internal\n   */\n  constructor(\n    emitter: Emitter<EventsWithWildcard<Events>> | EventEmitter<Events> = mitt(\n      new Map()\n    )\n  ) {\n    this.#emitter = emitter;\n  }\n\n  /**\n   * Bind an event listener to fire when an event occurs.\n   * @param type - the event type you'd like to listen to. Can be a string or symbol.\n   * @param handler - the function to be called when the event occurs.\n   * @returns `this` to enable you to chain method calls.\n   */\n  on<Key extends keyof EventsWithWildcard<Events>>(\n    type: Key,\n    handler: Handler<EventsWithWildcard<Events>[Key]>\n  ): this {\n    const handlers = this.#handlers.get(type);\n    if (handlers === undefined) {\n      this.#handlers.set(type, [handler]);\n    } else {\n      handlers.push(handler);\n    }\n\n    this.#emitter.on(type, handler);\n    return this;\n  }\n\n  /**\n   * Remove an event listener from firing.\n   * @param type - the event type you'd like to stop listening to.\n   * @param handler - the function that should be removed.\n   * @returns `this` to enable you to chain method calls.\n   */\n  off<Key extends keyof EventsWithWildcard<Events>>(\n    type: Key,\n    handler?: Handler<EventsWithWildcard<Events>[Key]>\n  ): this {\n    const handlers = this.#handlers.get(type) ?? [];\n    if (handler === undefined) {\n      for (const handler of handlers) {\n        this.#emitter.off(type, handler);\n      }\n      this.#handlers.delete(type);\n      return this;\n    }\n    const index = handlers.lastIndexOf(handler);\n    if (index > -1) {\n      this.#emitter.off(type, ...handlers.splice(index, 1));\n    }\n    return this;\n  }\n\n  /**\n   * Emit an event and call any associated listeners.\n   *\n   * @param type - the event you'd like to emit\n   * @param eventData - any data you'd like to emit with the event\n   * @returns `true` if there are any listeners, `false` if there are not.\n   */\n  emit<Key extends keyof EventsWithWildcard<Events>>(\n    type: Key,\n    event: EventsWithWildcard<Events>[Key]\n  ): boolean {\n    this.#emitter.emit(type, event);\n    return this.listenerCount(type) > 0;\n  }\n\n  /**\n   * Like `on` but the listener will only be fired once and then it will be removed.\n   * @param type - the event you'd like to listen to\n   * @param handler - the handler function to run when the event occurs\n   * @returns `this` to enable you to chain method calls.\n   */\n  once<Key extends keyof EventsWithWildcard<Events>>(\n    type: Key,\n    handler: Handler<EventsWithWildcard<Events>[Key]>\n  ): this {\n    const onceHandler: Handler<EventsWithWildcard<Events>[Key]> = eventData => {\n      handler(eventData);\n      this.off(type, onceHandler);\n    };\n\n    return this.on(type, onceHandler);\n  }\n\n  /**\n   * Gets the number of listeners for a given event.\n   *\n   * @param type - the event to get the listener count for\n   * @returns the number of listeners bound to the given event\n   */\n  listenerCount(type: keyof EventsWithWildcard<Events>): number {\n    return this.#handlers.get(type)?.length || 0;\n  }\n\n  /**\n   * Removes all listeners. If given an event argument, it will remove only\n   * listeners for that event.\n   *\n   * @param type - the event to remove listeners for.\n   * @returns `this` to enable you to chain method calls.\n   */\n  removeAllListeners(type?: keyof EventsWithWildcard<Events>): this {\n    if (type !== undefined) {\n      return this.off(type);\n    }\n    this[disposeSymbol]();\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  [disposeSymbol](): void {\n    for (const [type, handlers] of this.#handlers) {\n      for (const handler of handlers) {\n        this.#emitter.off(type, handler);\n      }\n    }\n    this.#handlers.clear();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}