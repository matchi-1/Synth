{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule PooledClass\n */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Static poolers. Several custom versions for each potential number of\n * arguments. A completely generic pooler is easy to implement, but would\n * require accessing the `arguments` object. In each of these, `this` refers to\n * the Class itself, not an instance. If any others are needed, simply add them\n * here, or in their own files.\n */\nvar oneArgumentPooler = function (copyFieldsFrom) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, copyFieldsFrom);\n    return instance;\n  } else {\n    return new Klass(copyFieldsFrom);\n  }\n};\nvar twoArgumentPooler = function (a1, a2) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\nvar threeArgumentPooler = function (a1, a2, a3) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3);\n  }\n};\nvar fiveArgumentPooler = function (a1, a2, a3, a4, a5) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4, a5);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4, a5);\n  }\n};\nvar standardReleaser = function (instance) {\n  var Klass = this;\n  \"production\" !== process.env.NODE_ENV ? invariant(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.') : invariant(instance instanceof Klass);\n  if (instance.destructor) {\n    instance.destructor();\n  }\n  if (Klass.instancePool.length < Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\nvar DEFAULT_POOL_SIZE = 10;\nvar DEFAULT_POOLER = oneArgumentPooler;\n\n/**\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\n * you give this may have a `poolSize` property, and will look for a\n * prototypical `destructor` on instances (optional).\n *\n * @param {Function} CopyConstructor Constructor that can be used to reset.\n * @param {Function} pooler Customizable pooler.\n */\nvar addPoolingTo = function (CopyConstructor, pooler) {\n  var NewKlass = CopyConstructor;\n  NewKlass.instancePool = [];\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\n  }\n  NewKlass.release = standardReleaser;\n  return NewKlass;\n};\nvar PooledClass = {\n  addPoolingTo: addPoolingTo,\n  oneArgumentPooler: oneArgumentPooler,\n  twoArgumentPooler: twoArgumentPooler,\n  threeArgumentPooler: threeArgumentPooler,\n  fiveArgumentPooler: fiveArgumentPooler\n};\nmodule.exports = PooledClass;","map":{"version":3,"names":["invariant","require","oneArgumentPooler","copyFieldsFrom","Klass","instancePool","length","instance","pop","call","twoArgumentPooler","a1","a2","threeArgumentPooler","a3","fiveArgumentPooler","a4","a5","standardReleaser","process","env","NODE_ENV","destructor","poolSize","push","DEFAULT_POOL_SIZE","DEFAULT_POOLER","addPoolingTo","CopyConstructor","pooler","NewKlass","getPooled","release","PooledClass","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/PooledClass.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule PooledClass\n */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Static poolers. Several custom versions for each potential number of\n * arguments. A completely generic pooler is easy to implement, but would\n * require accessing the `arguments` object. In each of these, `this` refers to\n * the Class itself, not an instance. If any others are needed, simply add them\n * here, or in their own files.\n */\nvar oneArgumentPooler = function(copyFieldsFrom) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, copyFieldsFrom);\n    return instance;\n  } else {\n    return new Klass(copyFieldsFrom);\n  }\n};\n\nvar twoArgumentPooler = function(a1, a2) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\n\nvar threeArgumentPooler = function(a1, a2, a3) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3);\n  }\n};\n\nvar fiveArgumentPooler = function(a1, a2, a3, a4, a5) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4, a5);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4, a5);\n  }\n};\n\nvar standardReleaser = function(instance) {\n  var Klass = this;\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    instance instanceof Klass,\n    'Trying to release an instance into a pool of a different type.'\n  ) : invariant(instance instanceof Klass));\n  if (instance.destructor) {\n    instance.destructor();\n  }\n  if (Klass.instancePool.length < Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\n\nvar DEFAULT_POOL_SIZE = 10;\nvar DEFAULT_POOLER = oneArgumentPooler;\n\n/**\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\n * you give this may have a `poolSize` property, and will look for a\n * prototypical `destructor` on instances (optional).\n *\n * @param {Function} CopyConstructor Constructor that can be used to reset.\n * @param {Function} pooler Customizable pooler.\n */\nvar addPoolingTo = function(CopyConstructor, pooler) {\n  var NewKlass = CopyConstructor;\n  NewKlass.instancePool = [];\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\n  }\n  NewKlass.release = standardReleaser;\n  return NewKlass;\n};\n\nvar PooledClass = {\n  addPoolingTo: addPoolingTo,\n  oneArgumentPooler: oneArgumentPooler,\n  twoArgumentPooler: twoArgumentPooler,\n  threeArgumentPooler: threeArgumentPooler,\n  fiveArgumentPooler: fiveArgumentPooler\n};\n\nmodule.exports = PooledClass;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,iBAAiB,GAAG,SAAAA,CAASC,cAAc,EAAE;EAC/C,IAAIC,KAAK,GAAG,IAAI;EAChB,IAAIA,KAAK,CAACC,YAAY,CAACC,MAAM,EAAE;IAC7B,IAAIC,QAAQ,GAAGH,KAAK,CAACC,YAAY,CAACG,GAAG,CAAC,CAAC;IACvCJ,KAAK,CAACK,IAAI,CAACF,QAAQ,EAAEJ,cAAc,CAAC;IACpC,OAAOI,QAAQ;EACjB,CAAC,MAAM;IACL,OAAO,IAAIH,KAAK,CAACD,cAAc,CAAC;EAClC;AACF,CAAC;AAED,IAAIO,iBAAiB,GAAG,SAAAA,CAASC,EAAE,EAAEC,EAAE,EAAE;EACvC,IAAIR,KAAK,GAAG,IAAI;EAChB,IAAIA,KAAK,CAACC,YAAY,CAACC,MAAM,EAAE;IAC7B,IAAIC,QAAQ,GAAGH,KAAK,CAACC,YAAY,CAACG,GAAG,CAAC,CAAC;IACvCJ,KAAK,CAACK,IAAI,CAACF,QAAQ,EAAEI,EAAE,EAAEC,EAAE,CAAC;IAC5B,OAAOL,QAAQ;EACjB,CAAC,MAAM;IACL,OAAO,IAAIH,KAAK,CAACO,EAAE,EAAEC,EAAE,CAAC;EAC1B;AACF,CAAC;AAED,IAAIC,mBAAmB,GAAG,SAAAA,CAASF,EAAE,EAAEC,EAAE,EAAEE,EAAE,EAAE;EAC7C,IAAIV,KAAK,GAAG,IAAI;EAChB,IAAIA,KAAK,CAACC,YAAY,CAACC,MAAM,EAAE;IAC7B,IAAIC,QAAQ,GAAGH,KAAK,CAACC,YAAY,CAACG,GAAG,CAAC,CAAC;IACvCJ,KAAK,CAACK,IAAI,CAACF,QAAQ,EAAEI,EAAE,EAAEC,EAAE,EAAEE,EAAE,CAAC;IAChC,OAAOP,QAAQ;EACjB,CAAC,MAAM;IACL,OAAO,IAAIH,KAAK,CAACO,EAAE,EAAEC,EAAE,EAAEE,EAAE,CAAC;EAC9B;AACF,CAAC;AAED,IAAIC,kBAAkB,GAAG,SAAAA,CAASJ,EAAE,EAAEC,EAAE,EAAEE,EAAE,EAAEE,EAAE,EAAEC,EAAE,EAAE;EACpD,IAAIb,KAAK,GAAG,IAAI;EAChB,IAAIA,KAAK,CAACC,YAAY,CAACC,MAAM,EAAE;IAC7B,IAAIC,QAAQ,GAAGH,KAAK,CAACC,YAAY,CAACG,GAAG,CAAC,CAAC;IACvCJ,KAAK,CAACK,IAAI,CAACF,QAAQ,EAAEI,EAAE,EAAEC,EAAE,EAAEE,EAAE,EAAEE,EAAE,EAAEC,EAAE,CAAC;IACxC,OAAOV,QAAQ;EACjB,CAAC,MAAM;IACL,OAAO,IAAIH,KAAK,CAACO,EAAE,EAAEC,EAAE,EAAEE,EAAE,EAAEE,EAAE,EAAEC,EAAE,CAAC;EACtC;AACF,CAAC;AAED,IAAIC,gBAAgB,GAAG,SAAAA,CAASX,QAAQ,EAAE;EACxC,IAAIH,KAAK,GAAG,IAAI;EACf,YAAY,KAAKe,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAGrB,SAAS,CAChDO,QAAQ,YAAYH,KAAK,EACzB,gEACF,CAAC,GAAGJ,SAAS,CAACO,QAAQ,YAAYH,KAAK,CAAC;EACxC,IAAIG,QAAQ,CAACe,UAAU,EAAE;IACvBf,QAAQ,CAACe,UAAU,CAAC,CAAC;EACvB;EACA,IAAIlB,KAAK,CAACC,YAAY,CAACC,MAAM,GAAGF,KAAK,CAACmB,QAAQ,EAAE;IAC9CnB,KAAK,CAACC,YAAY,CAACmB,IAAI,CAACjB,QAAQ,CAAC;EACnC;AACF,CAAC;AAED,IAAIkB,iBAAiB,GAAG,EAAE;AAC1B,IAAIC,cAAc,GAAGxB,iBAAiB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIyB,YAAY,GAAG,SAAAA,CAASC,eAAe,EAAEC,MAAM,EAAE;EACnD,IAAIC,QAAQ,GAAGF,eAAe;EAC9BE,QAAQ,CAACzB,YAAY,GAAG,EAAE;EAC1ByB,QAAQ,CAACC,SAAS,GAAGF,MAAM,IAAIH,cAAc;EAC7C,IAAI,CAACI,QAAQ,CAACP,QAAQ,EAAE;IACtBO,QAAQ,CAACP,QAAQ,GAAGE,iBAAiB;EACvC;EACAK,QAAQ,CAACE,OAAO,GAAGd,gBAAgB;EACnC,OAAOY,QAAQ;AACjB,CAAC;AAED,IAAIG,WAAW,GAAG;EAChBN,YAAY,EAAEA,YAAY;EAC1BzB,iBAAiB,EAAEA,iBAAiB;EACpCQ,iBAAiB,EAAEA,iBAAiB;EACpCG,mBAAmB,EAAEA,mBAAmB;EACxCE,kBAAkB,EAAEA;AACtB,CAAC;AAEDmB,MAAM,CAACC,OAAO,GAAGF,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}