{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginRegistry\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Injectable ordering of event plugins.\n */\nvar EventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!EventPluginOrder) {\n    // Wait until an `EventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var PluginModule = namesToPlugins[pluginName];\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);\n    \"production\" !== process.env.NODE_ENV ? invariant(pluginIndex > -1, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(pluginIndex > -1);\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n    \"production\" !== process.env.NODE_ENV ? invariant(PluginModule.extractEvents, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(PluginModule.extractEvents);\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;\n    var publishedEvents = PluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      \"production\" !== process.env.NODE_ENV ? invariant(publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName), 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName));\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {\n  \"production\" !== process.env.NODE_ENV ? invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName), 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName));\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {\n  \"production\" !== process.env.NODE_ENV ? invariant(!EventPluginRegistry.registrationNameModules[registrationName], 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]);\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\nvar EventPluginRegistry = {\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function (InjectedEventPluginOrder) {\n    \"production\" !== process.env.NODE_ENV ? invariant(!EventPluginOrder, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(!EventPluginOrder);\n    // Clone the ordering so it cannot be dynamically mutated.\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function (injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n      var PluginModule = injectedNamesToPlugins[pluginName];\n      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {\n        \"production\" !== process.env.NODE_ENV ? invariant(!namesToPlugins[pluginName], 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(!namesToPlugins[pluginName]);\n        namesToPlugins[pluginName] = PluginModule;\n        isOrderingDirty = true;\n      }\n    }\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function (event) {\n    var dispatchConfig = event.dispatchConfig;\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;\n    }\n    for (var phase in dispatchConfig.phasedRegistrationNames) {\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {\n        continue;\n      }\n      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];\n      if (PluginModule) {\n        return PluginModule;\n      }\n    }\n    return null;\n  },\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function () {\n    EventPluginOrder = null;\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n    EventPluginRegistry.plugins.length = 0;\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n  }\n};\nmodule.exports = EventPluginRegistry;","map":{"version":3,"names":["invariant","require","EventPluginOrder","namesToPlugins","recomputePluginOrdering","pluginName","PluginModule","pluginIndex","indexOf","process","env","NODE_ENV","EventPluginRegistry","plugins","extractEvents","publishedEvents","eventTypes","eventName","publishEventForPlugin","dispatchConfig","eventNameDispatchConfigs","hasOwnProperty","phasedRegistrationNames","phaseName","phasedRegistrationName","publishRegistrationName","registrationName","registrationNameModules","registrationNameDependencies","dependencies","injectEventPluginOrder","InjectedEventPluginOrder","Array","prototype","slice","call","injectEventPluginsByName","injectedNamesToPlugins","isOrderingDirty","getPluginModuleForEvent","event","phase","_resetEventPlugins","length","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/EventPluginRegistry.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginRegistry\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Injectable ordering of event plugins.\n */\nvar EventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!EventPluginOrder) {\n    // Wait until an `EventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var PluginModule = namesToPlugins[pluginName];\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      pluginIndex > -1,\n      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +\n      'the plugin ordering, `%s`.',\n      pluginName\n    ) : invariant(pluginIndex > -1));\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      PluginModule.extractEvents,\n      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +\n      'method, but `%s` does not.',\n      pluginName\n    ) : invariant(PluginModule.extractEvents));\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;\n    var publishedEvents = PluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        publishEventForPlugin(\n          publishedEvents[eventName],\n          PluginModule,\n          eventName\n        ),\n        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',\n        eventName,\n        pluginName\n      ) : invariant(publishEventForPlugin(\n        publishedEvents[eventName],\n        PluginModule,\n        eventName\n      )));\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),\n    'EventPluginHub: More than one plugin attempted to publish the same ' +\n    'event name, `%s`.',\n    eventName\n  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(\n          phasedRegistrationName,\n          PluginModule,\n          eventName\n        );\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(\n      dispatchConfig.registrationName,\n      PluginModule,\n      eventName\n    );\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !EventPluginRegistry.registrationNameModules[registrationName],\n    'EventPluginHub: More than one plugin attempted to publish the same ' +\n    'registration name, `%s`.',\n    registrationName\n  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] =\n    PluginModule.eventTypes[eventName].dependencies;\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\nvar EventPluginRegistry = {\n\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function(InjectedEventPluginOrder) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !EventPluginOrder,\n      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +\n      'once. You are likely trying to load more than one copy of React.'\n    ) : invariant(!EventPluginOrder));\n    // Clone the ordering so it cannot be dynamically mutated.\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function(injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n      var PluginModule = injectedNamesToPlugins[pluginName];\n      if (!namesToPlugins.hasOwnProperty(pluginName) ||\n          namesToPlugins[pluginName] !== PluginModule) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          !namesToPlugins[pluginName],\n          'EventPluginRegistry: Cannot inject two different event plugins ' +\n          'using the same name, `%s`.',\n          pluginName\n        ) : invariant(!namesToPlugins[pluginName]));\n        namesToPlugins[pluginName] = PluginModule;\n        isOrderingDirty = true;\n      }\n    }\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function(event) {\n    var dispatchConfig = event.dispatchConfig;\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[\n        dispatchConfig.registrationName\n      ] || null;\n    }\n    for (var phase in dispatchConfig.phasedRegistrationNames) {\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {\n        continue;\n      }\n      var PluginModule = EventPluginRegistry.registrationNameModules[\n        dispatchConfig.phasedRegistrationNames[phase]\n      ];\n      if (PluginModule) {\n        return PluginModule;\n      }\n    }\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function() {\n    EventPluginOrder = null;\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n    EventPluginRegistry.plugins.length = 0;\n\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n  }\n\n};\n\nmodule.exports = EventPluginRegistry;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAEtC;AACA;AACA;AACA,IAAIC,gBAAgB,GAAG,IAAI;;AAE3B;AACA;AACA;AACA,IAAIC,cAAc,GAAG,CAAC,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAAA,EAAG;EACjC,IAAI,CAACF,gBAAgB,EAAE;IACrB;IACA;EACF;EACA,KAAK,IAAIG,UAAU,IAAIF,cAAc,EAAE;IACrC,IAAIG,YAAY,GAAGH,cAAc,CAACE,UAAU,CAAC;IAC7C,IAAIE,WAAW,GAAGL,gBAAgB,CAACM,OAAO,CAACH,UAAU,CAAC;IACrD,YAAY,KAAKI,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAGX,SAAS,CAChDO,WAAW,GAAG,CAAC,CAAC,EAChB,wEAAwE,GACxE,4BAA4B,EAC5BF,UACF,CAAC,GAAGL,SAAS,CAACO,WAAW,GAAG,CAAC,CAAC,CAAC;IAC/B,IAAIK,mBAAmB,CAACC,OAAO,CAACN,WAAW,CAAC,EAAE;MAC5C;IACF;IACC,YAAY,KAAKE,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAGX,SAAS,CAChDM,YAAY,CAACQ,aAAa,EAC1B,uEAAuE,GACvE,4BAA4B,EAC5BT,UACF,CAAC,GAAGL,SAAS,CAACM,YAAY,CAACQ,aAAa,CAAC;IACzCF,mBAAmB,CAACC,OAAO,CAACN,WAAW,CAAC,GAAGD,YAAY;IACvD,IAAIS,eAAe,GAAGT,YAAY,CAACU,UAAU;IAC7C,KAAK,IAAIC,SAAS,IAAIF,eAAe,EAAE;MACpC,YAAY,KAAKN,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAGX,SAAS,CAChDkB,qBAAqB,CACnBH,eAAe,CAACE,SAAS,CAAC,EAC1BX,YAAY,EACZW,SACF,CAAC,EACD,oEAAoE,EACpEA,SAAS,EACTZ,UACF,CAAC,GAAGL,SAAS,CAACkB,qBAAqB,CACjCH,eAAe,CAACE,SAAS,CAAC,EAC1BX,YAAY,EACZW,SACF,CAAC,CAAC;IACJ;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,qBAAqBA,CAACC,cAAc,EAAEb,YAAY,EAAEW,SAAS,EAAE;EACrE,YAAY,KAAKR,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAGX,SAAS,CAChD,CAACY,mBAAmB,CAACQ,wBAAwB,CAACC,cAAc,CAACJ,SAAS,CAAC,EACvE,qEAAqE,GACrE,mBAAmB,EACnBA,SACF,CAAC,GAAGjB,SAAS,CAAC,CAACY,mBAAmB,CAACQ,wBAAwB,CAACC,cAAc,CAACJ,SAAS,CAAC,CAAC;EACtFL,mBAAmB,CAACQ,wBAAwB,CAACH,SAAS,CAAC,GAAGE,cAAc;EAExE,IAAIG,uBAAuB,GAAGH,cAAc,CAACG,uBAAuB;EACpE,IAAIA,uBAAuB,EAAE;IAC3B,KAAK,IAAIC,SAAS,IAAID,uBAAuB,EAAE;MAC7C,IAAIA,uBAAuB,CAACD,cAAc,CAACE,SAAS,CAAC,EAAE;QACrD,IAAIC,sBAAsB,GAAGF,uBAAuB,CAACC,SAAS,CAAC;QAC/DE,uBAAuB,CACrBD,sBAAsB,EACtBlB,YAAY,EACZW,SACF,CAAC;MACH;IACF;IACA,OAAO,IAAI;EACb,CAAC,MAAM,IAAIE,cAAc,CAACO,gBAAgB,EAAE;IAC1CD,uBAAuB,CACrBN,cAAc,CAACO,gBAAgB,EAC/BpB,YAAY,EACZW,SACF,CAAC;IACD,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,uBAAuBA,CAACC,gBAAgB,EAAEpB,YAAY,EAAEW,SAAS,EAAE;EACzE,YAAY,KAAKR,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAGX,SAAS,CAChD,CAACY,mBAAmB,CAACe,uBAAuB,CAACD,gBAAgB,CAAC,EAC9D,qEAAqE,GACrE,0BAA0B,EAC1BA,gBACF,CAAC,GAAG1B,SAAS,CAAC,CAACY,mBAAmB,CAACe,uBAAuB,CAACD,gBAAgB,CAAC,CAAC;EAC7Ed,mBAAmB,CAACe,uBAAuB,CAACD,gBAAgB,CAAC,GAAGpB,YAAY;EAC5EM,mBAAmB,CAACgB,4BAA4B,CAACF,gBAAgB,CAAC,GAChEpB,YAAY,CAACU,UAAU,CAACC,SAAS,CAAC,CAACY,YAAY;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAIjB,mBAAmB,GAAG;EAExB;AACF;AACA;EACEC,OAAO,EAAE,EAAE;EAEX;AACF;AACA;EACEO,wBAAwB,EAAE,CAAC,CAAC;EAE5B;AACF;AACA;EACEO,uBAAuB,EAAE,CAAC,CAAC;EAE3B;AACF;AACA;EACEC,4BAA4B,EAAE,CAAC,CAAC;EAEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,sBAAsB,EAAE,SAAAA,CAASC,wBAAwB,EAAE;IACxD,YAAY,KAAKtB,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAGX,SAAS,CAChD,CAACE,gBAAgB,EACjB,qEAAqE,GACrE,kEACF,CAAC,GAAGF,SAAS,CAAC,CAACE,gBAAgB,CAAC;IAChC;IACAA,gBAAgB,GAAG8B,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACJ,wBAAwB,CAAC;IACvE3B,uBAAuB,CAAC,CAAC;EAC3B,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEgC,wBAAwB,EAAE,SAAAA,CAASC,sBAAsB,EAAE;IACzD,IAAIC,eAAe,GAAG,KAAK;IAC3B,KAAK,IAAIjC,UAAU,IAAIgC,sBAAsB,EAAE;MAC7C,IAAI,CAACA,sBAAsB,CAAChB,cAAc,CAAChB,UAAU,CAAC,EAAE;QACtD;MACF;MACA,IAAIC,YAAY,GAAG+B,sBAAsB,CAAChC,UAAU,CAAC;MACrD,IAAI,CAACF,cAAc,CAACkB,cAAc,CAAChB,UAAU,CAAC,IAC1CF,cAAc,CAACE,UAAU,CAAC,KAAKC,YAAY,EAAE;QAC9C,YAAY,KAAKG,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAGX,SAAS,CAChD,CAACG,cAAc,CAACE,UAAU,CAAC,EAC3B,iEAAiE,GACjE,4BAA4B,EAC5BA,UACF,CAAC,GAAGL,SAAS,CAAC,CAACG,cAAc,CAACE,UAAU,CAAC,CAAC;QAC1CF,cAAc,CAACE,UAAU,CAAC,GAAGC,YAAY;QACzCgC,eAAe,GAAG,IAAI;MACxB;IACF;IACA,IAAIA,eAAe,EAAE;MACnBlC,uBAAuB,CAAC,CAAC;IAC3B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEmC,uBAAuB,EAAE,SAAAA,CAASC,KAAK,EAAE;IACvC,IAAIrB,cAAc,GAAGqB,KAAK,CAACrB,cAAc;IACzC,IAAIA,cAAc,CAACO,gBAAgB,EAAE;MACnC,OAAOd,mBAAmB,CAACe,uBAAuB,CAChDR,cAAc,CAACO,gBAAgB,CAChC,IAAI,IAAI;IACX;IACA,KAAK,IAAIe,KAAK,IAAItB,cAAc,CAACG,uBAAuB,EAAE;MACxD,IAAI,CAACH,cAAc,CAACG,uBAAuB,CAACD,cAAc,CAACoB,KAAK,CAAC,EAAE;QACjE;MACF;MACA,IAAInC,YAAY,GAAGM,mBAAmB,CAACe,uBAAuB,CAC5DR,cAAc,CAACG,uBAAuB,CAACmB,KAAK,CAAC,CAC9C;MACD,IAAInC,YAAY,EAAE;QAChB,OAAOA,YAAY;MACrB;IACF;IACA,OAAO,IAAI;EACb,CAAC;EAED;AACF;AACA;AACA;EACEoC,kBAAkB,EAAE,SAAAA,CAAA,EAAW;IAC7BxC,gBAAgB,GAAG,IAAI;IACvB,KAAK,IAAIG,UAAU,IAAIF,cAAc,EAAE;MACrC,IAAIA,cAAc,CAACkB,cAAc,CAAChB,UAAU,CAAC,EAAE;QAC7C,OAAOF,cAAc,CAACE,UAAU,CAAC;MACnC;IACF;IACAO,mBAAmB,CAACC,OAAO,CAAC8B,MAAM,GAAG,CAAC;IAEtC,IAAIvB,wBAAwB,GAAGR,mBAAmB,CAACQ,wBAAwB;IAC3E,KAAK,IAAIH,SAAS,IAAIG,wBAAwB,EAAE;MAC9C,IAAIA,wBAAwB,CAACC,cAAc,CAACJ,SAAS,CAAC,EAAE;QACtD,OAAOG,wBAAwB,CAACH,SAAS,CAAC;MAC5C;IACF;IAEA,IAAIU,uBAAuB,GAAGf,mBAAmB,CAACe,uBAAuB;IACzE,KAAK,IAAID,gBAAgB,IAAIC,uBAAuB,EAAE;MACpD,IAAIA,uBAAuB,CAACN,cAAc,CAACK,gBAAgB,CAAC,EAAE;QAC5D,OAAOC,uBAAuB,CAACD,gBAAgB,CAAC;MAClD;IACF;EACF;AAEF,CAAC;AAEDkB,MAAM,CAACC,OAAO,GAAGjC,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}