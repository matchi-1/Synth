{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMIDOperations\n * @typechecks static-only\n */\n\n/*jslint evil: true */\n\n'use strict';\n\nvar CSSPropertyOperations = require(\"./CSSPropertyOperations\");\nvar DOMChildrenOperations = require(\"./DOMChildrenOperations\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar invariant = require(\"./invariant\");\nvar setInnerHTML = require(\"./setInnerHTML\");\n\n/**\n * Errors for properties that should not be updated with `updatePropertyById()`.\n *\n * @type {object}\n * @private\n */\nvar INVALID_PROPERTY_ERRORS = {\n  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',\n  style: '`style` must be set using `updateStylesByID()`.'\n};\n\n/**\n * Operations used to process updates to DOM nodes. This is made injectable via\n * `ReactDOMComponent.BackendIDOperations`.\n */\nvar ReactDOMIDOperations = {\n  /**\n   * Updates a DOM node with new property values. This should only be used to\n   * update DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A valid property name, see `DOMProperty`.\n   * @param {*} value New value of the property.\n   * @internal\n   */\n  updatePropertyByID: function (id, name, value) {\n    var node = ReactMount.getNode(id);\n    \"production\" !== process.env.NODE_ENV ? invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name), 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name));\n\n    // If we're updating to null or undefined, we should remove the property\n    // from the DOM node instead of inadvertantly setting to a string. This\n    // brings us in line with the same behavior we have on initial render.\n    if (value != null) {\n      DOMPropertyOperations.setValueForProperty(node, name, value);\n    } else {\n      DOMPropertyOperations.deleteValueForProperty(node, name);\n    }\n  },\n  /**\n   * Updates a DOM node to remove a property. This should only be used to remove\n   * DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A property name to remove, see `DOMProperty`.\n   * @internal\n   */\n  deletePropertyByID: function (id, name, value) {\n    var node = ReactMount.getNode(id);\n    \"production\" !== process.env.NODE_ENV ? invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name), 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name));\n    DOMPropertyOperations.deleteValueForProperty(node, name, value);\n  },\n  /**\n   * Updates a DOM node with new style values. If a value is specified as '',\n   * the corresponding style property will be unset.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {object} styles Mapping from styles to values.\n   * @internal\n   */\n  updateStylesByID: function (id, styles) {\n    var node = ReactMount.getNode(id);\n    CSSPropertyOperations.setValueForStyles(node, styles);\n  },\n  /**\n   * Updates a DOM node's innerHTML.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} html An HTML string.\n   * @internal\n   */\n  updateInnerHTMLByID: function (id, html) {\n    var node = ReactMount.getNode(id);\n    setInnerHTML(node, html);\n  },\n  /**\n   * Updates a DOM node's text content set by `props.content`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} content Text content.\n   * @internal\n   */\n  updateTextContentByID: function (id, content) {\n    var node = ReactMount.getNode(id);\n    DOMChildrenOperations.updateTextContent(node, content);\n  },\n  /**\n   * Replaces a DOM node that exists in the document with markup.\n   *\n   * @param {string} id ID of child to be replaced.\n   * @param {string} markup Dangerous markup to inject in place of child.\n   * @internal\n   * @see {Danger.dangerouslyReplaceNodeWithMarkup}\n   */\n  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {\n    var node = ReactMount.getNode(id);\n    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);\n  },\n  /**\n   * Updates a component's children by processing a series of updates.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markup List of markup strings.\n   * @internal\n   */\n  dangerouslyProcessChildrenUpdates: function (updates, markup) {\n    for (var i = 0; i < updates.length; i++) {\n      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);\n    }\n    DOMChildrenOperations.processUpdates(updates, markup);\n  }\n};\nReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {\n  updatePropertyByID: 'updatePropertyByID',\n  deletePropertyByID: 'deletePropertyByID',\n  updateStylesByID: 'updateStylesByID',\n  updateInnerHTMLByID: 'updateInnerHTMLByID',\n  updateTextContentByID: 'updateTextContentByID',\n  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',\n  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'\n});\nmodule.exports = ReactDOMIDOperations;","map":{"version":3,"names":["CSSPropertyOperations","require","DOMChildrenOperations","DOMPropertyOperations","ReactMount","ReactPerf","invariant","setInnerHTML","INVALID_PROPERTY_ERRORS","dangerouslySetInnerHTML","style","ReactDOMIDOperations","updatePropertyByID","id","name","value","node","getNode","process","env","NODE_ENV","hasOwnProperty","setValueForProperty","deleteValueForProperty","deletePropertyByID","updateStylesByID","styles","setValueForStyles","updateInnerHTMLByID","html","updateTextContentByID","content","updateTextContent","dangerouslyReplaceNodeWithMarkupByID","markup","dangerouslyReplaceNodeWithMarkup","dangerouslyProcessChildrenUpdates","updates","i","length","parentNode","parentID","processUpdates","measureMethods","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/ReactDOMIDOperations.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMIDOperations\n * @typechecks static-only\n */\n\n/*jslint evil: true */\n\n'use strict';\n\nvar CSSPropertyOperations = require(\"./CSSPropertyOperations\");\nvar DOMChildrenOperations = require(\"./DOMChildrenOperations\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar invariant = require(\"./invariant\");\nvar setInnerHTML = require(\"./setInnerHTML\");\n\n/**\n * Errors for properties that should not be updated with `updatePropertyById()`.\n *\n * @type {object}\n * @private\n */\nvar INVALID_PROPERTY_ERRORS = {\n  dangerouslySetInnerHTML:\n    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',\n  style: '`style` must be set using `updateStylesByID()`.'\n};\n\n/**\n * Operations used to process updates to DOM nodes. This is made injectable via\n * `ReactDOMComponent.BackendIDOperations`.\n */\nvar ReactDOMIDOperations = {\n\n  /**\n   * Updates a DOM node with new property values. This should only be used to\n   * update DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A valid property name, see `DOMProperty`.\n   * @param {*} value New value of the property.\n   * @internal\n   */\n  updatePropertyByID: function(id, name, value) {\n    var node = ReactMount.getNode(id);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),\n      'updatePropertyByID(...): %s',\n      INVALID_PROPERTY_ERRORS[name]\n    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));\n\n    // If we're updating to null or undefined, we should remove the property\n    // from the DOM node instead of inadvertantly setting to a string. This\n    // brings us in line with the same behavior we have on initial render.\n    if (value != null) {\n      DOMPropertyOperations.setValueForProperty(node, name, value);\n    } else {\n      DOMPropertyOperations.deleteValueForProperty(node, name);\n    }\n  },\n\n  /**\n   * Updates a DOM node to remove a property. This should only be used to remove\n   * DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A property name to remove, see `DOMProperty`.\n   * @internal\n   */\n  deletePropertyByID: function(id, name, value) {\n    var node = ReactMount.getNode(id);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),\n      'updatePropertyByID(...): %s',\n      INVALID_PROPERTY_ERRORS[name]\n    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));\n    DOMPropertyOperations.deleteValueForProperty(node, name, value);\n  },\n\n  /**\n   * Updates a DOM node with new style values. If a value is specified as '',\n   * the corresponding style property will be unset.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {object} styles Mapping from styles to values.\n   * @internal\n   */\n  updateStylesByID: function(id, styles) {\n    var node = ReactMount.getNode(id);\n    CSSPropertyOperations.setValueForStyles(node, styles);\n  },\n\n  /**\n   * Updates a DOM node's innerHTML.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} html An HTML string.\n   * @internal\n   */\n  updateInnerHTMLByID: function(id, html) {\n    var node = ReactMount.getNode(id);\n    setInnerHTML(node, html);\n  },\n\n  /**\n   * Updates a DOM node's text content set by `props.content`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} content Text content.\n   * @internal\n   */\n  updateTextContentByID: function(id, content) {\n    var node = ReactMount.getNode(id);\n    DOMChildrenOperations.updateTextContent(node, content);\n  },\n\n  /**\n   * Replaces a DOM node that exists in the document with markup.\n   *\n   * @param {string} id ID of child to be replaced.\n   * @param {string} markup Dangerous markup to inject in place of child.\n   * @internal\n   * @see {Danger.dangerouslyReplaceNodeWithMarkup}\n   */\n  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {\n    var node = ReactMount.getNode(id);\n    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);\n  },\n\n  /**\n   * Updates a component's children by processing a series of updates.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markup List of markup strings.\n   * @internal\n   */\n  dangerouslyProcessChildrenUpdates: function(updates, markup) {\n    for (var i = 0; i < updates.length; i++) {\n      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);\n    }\n    DOMChildrenOperations.processUpdates(updates, markup);\n  }\n};\n\nReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {\n  updatePropertyByID: 'updatePropertyByID',\n  deletePropertyByID: 'deletePropertyByID',\n  updateStylesByID: 'updateStylesByID',\n  updateInnerHTMLByID: 'updateInnerHTMLByID',\n  updateTextContentByID: 'updateTextContentByID',\n  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',\n  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'\n});\n\nmodule.exports = ReactDOMIDOperations;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}