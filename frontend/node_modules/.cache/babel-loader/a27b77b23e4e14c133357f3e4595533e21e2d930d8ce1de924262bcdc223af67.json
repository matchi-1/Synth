{"ast":null,"code":"function getExtractDescr(descr) {\n  var _a;\n  if (typeof descr === 'string') {\n    return {\n      selector: descr,\n      value: 'textContent'\n    };\n  }\n  return {\n    selector: descr.selector,\n    value: (_a = descr.value) !== null && _a !== void 0 ? _a : 'textContent'\n  };\n}\n/**\n * Extract multiple values from a document, and store them in an object.\n *\n * @param map - An object containing key-value pairs. The keys are the names of\n *   the properties to be created on the object, and the values are the\n *   selectors to be used to extract the values.\n * @returns An object containing the extracted values.\n */\nexport function extract(map) {\n  const ret = {};\n  for (const key in map) {\n    const descr = map[key];\n    const isArray = Array.isArray(descr);\n    const {\n      selector,\n      value\n    } = getExtractDescr(isArray ? descr[0] : descr);\n    const fn = typeof value === 'function' ? value : typeof value === 'string' ? el => this._make(el).prop(value) : el => this._make(el).extract(value);\n    if (isArray) {\n      ret[key] = this._findBySelector(selector, Number.POSITIVE_INFINITY).map((_, el) => fn(el, key, ret)).get();\n    } else {\n      const $ = this._findBySelector(selector, 1);\n      ret[key] = $.length > 0 ? fn($[0], key, ret) : undefined;\n    }\n  }\n  return ret;\n}\n//# sourceMappingURL=extract.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}