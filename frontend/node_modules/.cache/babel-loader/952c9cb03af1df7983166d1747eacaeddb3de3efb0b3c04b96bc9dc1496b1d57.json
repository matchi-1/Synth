{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { JSHandle } from '../api/JSHandle.js';\nimport { debugError } from '../common/util.js';\nimport { valueFromRemoteObject } from './utils.js';\n/**\n * @internal\n */\nexport class CdpJSHandle extends JSHandle {\n  #disposed = false;\n  #remoteObject;\n  #world;\n  constructor(world, remoteObject) {\n    super();\n    this.#world = world;\n    this.#remoteObject = remoteObject;\n  }\n  get disposed() {\n    return this.#disposed;\n  }\n  get realm() {\n    return this.#world;\n  }\n  get client() {\n    return this.realm.environment.client;\n  }\n  async jsonValue() {\n    if (!this.#remoteObject.objectId) {\n      return valueFromRemoteObject(this.#remoteObject);\n    }\n    const value = await this.evaluate(object => {\n      return object;\n    });\n    if (value === undefined) {\n      throw new Error('Could not serialize referenced object');\n    }\n    return value;\n  }\n  /**\n   * Either `null` or the handle itself if the handle is an\n   * instance of {@link ElementHandle}.\n   */\n  asElement() {\n    return null;\n  }\n  async dispose() {\n    if (this.#disposed) {\n      return;\n    }\n    this.#disposed = true;\n    await releaseObject(this.client, this.#remoteObject);\n  }\n  toString() {\n    if (!this.#remoteObject.objectId) {\n      return 'JSHandle:' + valueFromRemoteObject(this.#remoteObject);\n    }\n    const type = this.#remoteObject.subtype || this.#remoteObject.type;\n    return 'JSHandle@' + type;\n  }\n  get id() {\n    return this.#remoteObject.objectId;\n  }\n  remoteObject() {\n    return this.#remoteObject;\n  }\n  async getProperties() {\n    // We use Runtime.getProperties rather than iterative version for\n    // improved performance as it allows getting everything at once.\n    const response = await this.client.send('Runtime.getProperties', {\n      objectId: this.#remoteObject.objectId,\n      ownProperties: true\n    });\n    const result = new Map();\n    for (const property of response.result) {\n      if (!property.enumerable || !property.value) {\n        continue;\n      }\n      result.set(property.name, this.#world.createCdpHandle(property.value));\n    }\n    return result;\n  }\n}\n/**\n * @internal\n */\nexport async function releaseObject(client, remoteObject) {\n  if (!remoteObject.objectId) {\n    return;\n  }\n  await client.send('Runtime.releaseObject', {\n    objectId: remoteObject.objectId\n  }).catch(error => {\n    // Exceptions might happen in case of a page been navigated or closed.\n    // Swallow these since they are harmless and we don't leak anything in this case.\n    debugError(error);\n  });\n}","map":{"version":3,"names":["JSHandle","debugError","valueFromRemoteObject","CdpJSHandle","disposed","remoteObject","world","constructor","realm","client","environment","jsonValue","objectId","value","evaluate","object","undefined","Error","asElement","dispose","releaseObject","toString","type","subtype","id","getProperties","response","send","ownProperties","result","Map","property","enumerable","set","name","createCdpHandle","catch","error"],"sources":["C:\\Users\\raffy\\Desktop\\test\\node_modules\\puppeteer-core\\src\\cdp\\JSHandle.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {CDPSession} from '../api/CDPSession.js';\nimport {JSHandle} from '../api/JSHandle.js';\nimport {debugError} from '../common/util.js';\n\nimport type {CdpElementHandle} from './ElementHandle.js';\nimport type {IsolatedWorld} from './IsolatedWorld.js';\nimport {valueFromRemoteObject} from './utils.js';\n\n/**\n * @internal\n */\nexport class CdpJSHandle<T = unknown> extends JSHandle<T> {\n  #disposed = false;\n  readonly #remoteObject: Protocol.Runtime.RemoteObject;\n  readonly #world: IsolatedWorld;\n\n  constructor(\n    world: IsolatedWorld,\n    remoteObject: Protocol.Runtime.RemoteObject\n  ) {\n    super();\n    this.#world = world;\n    this.#remoteObject = remoteObject;\n  }\n\n  override get disposed(): boolean {\n    return this.#disposed;\n  }\n\n  override get realm(): IsolatedWorld {\n    return this.#world;\n  }\n\n  get client(): CDPSession {\n    return this.realm.environment.client;\n  }\n\n  override async jsonValue(): Promise<T> {\n    if (!this.#remoteObject.objectId) {\n      return valueFromRemoteObject(this.#remoteObject);\n    }\n    const value = await this.evaluate(object => {\n      return object;\n    });\n    if (value === undefined) {\n      throw new Error('Could not serialize referenced object');\n    }\n    return value;\n  }\n\n  /**\n   * Either `null` or the handle itself if the handle is an\n   * instance of {@link ElementHandle}.\n   */\n  override asElement(): CdpElementHandle<Node> | null {\n    return null;\n  }\n\n  override async dispose(): Promise<void> {\n    if (this.#disposed) {\n      return;\n    }\n    this.#disposed = true;\n    await releaseObject(this.client, this.#remoteObject);\n  }\n\n  override toString(): string {\n    if (!this.#remoteObject.objectId) {\n      return 'JSHandle:' + valueFromRemoteObject(this.#remoteObject);\n    }\n    const type = this.#remoteObject.subtype || this.#remoteObject.type;\n    return 'JSHandle@' + type;\n  }\n\n  override get id(): string | undefined {\n    return this.#remoteObject.objectId;\n  }\n\n  override remoteObject(): Protocol.Runtime.RemoteObject {\n    return this.#remoteObject;\n  }\n\n  override async getProperties(): Promise<Map<string, JSHandle<unknown>>> {\n    // We use Runtime.getProperties rather than iterative version for\n    // improved performance as it allows getting everything at once.\n    const response = await this.client.send('Runtime.getProperties', {\n      objectId: this.#remoteObject.objectId!,\n      ownProperties: true,\n    });\n    const result = new Map<string, JSHandle>();\n    for (const property of response.result) {\n      if (!property.enumerable || !property.value) {\n        continue;\n      }\n      result.set(property.name, this.#world.createCdpHandle(property.value));\n    }\n    return result;\n  }\n}\n\n/**\n * @internal\n */\nexport async function releaseObject(\n  client: CDPSession,\n  remoteObject: Protocol.Runtime.RemoteObject\n): Promise<void> {\n  if (!remoteObject.objectId) {\n    return;\n  }\n  await client\n    .send('Runtime.releaseObject', {objectId: remoteObject.objectId})\n    .catch(error => {\n      // Exceptions might happen in case of a page been navigated or closed.\n      // Swallow these since they are harmless and we don't leak anything in this case.\n      debugError(error);\n    });\n}\n"],"mappings":"AAAA;;;;;AASA,SAAQA,QAAQ,QAAO,oBAAoB;AAC3C,SAAQC,UAAU,QAAO,mBAAmB;AAI5C,SAAQC,qBAAqB,QAAO,YAAY;AAEhD;;;AAGA,OAAM,MAAOC,WAAyB,SAAQH,QAAW;EACvD,CAAAI,QAAS,GAAG,KAAK;EACR,CAAAC,YAAa;EACb,CAAAC,KAAM;EAEfC,YACED,KAAoB,EACpBD,YAA2C;IAE3C,KAAK,EAAE;IACP,IAAI,CAAC,CAAAC,KAAM,GAAGA,KAAK;IACnB,IAAI,CAAC,CAAAD,YAAa,GAAGA,YAAY;EACnC;EAEA,IAAaD,QAAQA,CAAA;IACnB,OAAO,IAAI,CAAC,CAAAA,QAAS;EACvB;EAEA,IAAaI,KAAKA,CAAA;IAChB,OAAO,IAAI,CAAC,CAAAF,KAAM;EACpB;EAEA,IAAIG,MAAMA,CAAA;IACR,OAAO,IAAI,CAACD,KAAK,CAACE,WAAW,CAACD,MAAM;EACtC;EAES,MAAME,SAASA,CAAA;IACtB,IAAI,CAAC,IAAI,CAAC,CAAAN,YAAa,CAACO,QAAQ,EAAE;MAChC,OAAOV,qBAAqB,CAAC,IAAI,CAAC,CAAAG,YAAa,CAAC;IAClD;IACA,MAAMQ,KAAK,GAAG,MAAM,IAAI,CAACC,QAAQ,CAACC,MAAM,IAAG;MACzC,OAAOA,MAAM;IACf,CAAC,CAAC;IACF,IAAIF,KAAK,KAAKG,SAAS,EAAE;MACvB,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;IAC1D;IACA,OAAOJ,KAAK;EACd;EAEA;;;;EAISK,SAASA,CAAA;IAChB,OAAO,IAAI;EACb;EAES,MAAMC,OAAOA,CAAA;IACpB,IAAI,IAAI,CAAC,CAAAf,QAAS,EAAE;MAClB;IACF;IACA,IAAI,CAAC,CAAAA,QAAS,GAAG,IAAI;IACrB,MAAMgB,aAAa,CAAC,IAAI,CAACX,MAAM,EAAE,IAAI,CAAC,CAAAJ,YAAa,CAAC;EACtD;EAESgB,QAAQA,CAAA;IACf,IAAI,CAAC,IAAI,CAAC,CAAAhB,YAAa,CAACO,QAAQ,EAAE;MAChC,OAAO,WAAW,GAAGV,qBAAqB,CAAC,IAAI,CAAC,CAAAG,YAAa,CAAC;IAChE;IACA,MAAMiB,IAAI,GAAG,IAAI,CAAC,CAAAjB,YAAa,CAACkB,OAAO,IAAI,IAAI,CAAC,CAAAlB,YAAa,CAACiB,IAAI;IAClE,OAAO,WAAW,GAAGA,IAAI;EAC3B;EAEA,IAAaE,EAAEA,CAAA;IACb,OAAO,IAAI,CAAC,CAAAnB,YAAa,CAACO,QAAQ;EACpC;EAESP,YAAYA,CAAA;IACnB,OAAO,IAAI,CAAC,CAAAA,YAAa;EAC3B;EAES,MAAMoB,aAAaA,CAAA;IAC1B;IACA;IACA,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACjB,MAAM,CAACkB,IAAI,CAAC,uBAAuB,EAAE;MAC/Df,QAAQ,EAAE,IAAI,CAAC,CAAAP,YAAa,CAACO,QAAS;MACtCgB,aAAa,EAAE;KAChB,CAAC;IACF,MAAMC,MAAM,GAAG,IAAIC,GAAG,EAAoB;IAC1C,KAAK,MAAMC,QAAQ,IAAIL,QAAQ,CAACG,MAAM,EAAE;MACtC,IAAI,CAACE,QAAQ,CAACC,UAAU,IAAI,CAACD,QAAQ,CAAClB,KAAK,EAAE;QAC3C;MACF;MACAgB,MAAM,CAACI,GAAG,CAACF,QAAQ,CAACG,IAAI,EAAE,IAAI,CAAC,CAAA5B,KAAM,CAAC6B,eAAe,CAACJ,QAAQ,CAAClB,KAAK,CAAC,CAAC;IACxE;IACA,OAAOgB,MAAM;EACf;;AAGF;;;AAGA,OAAO,eAAeT,aAAaA,CACjCX,MAAkB,EAClBJ,YAA2C;EAE3C,IAAI,CAACA,YAAY,CAACO,QAAQ,EAAE;IAC1B;EACF;EACA,MAAMH,MAAM,CACTkB,IAAI,CAAC,uBAAuB,EAAE;IAACf,QAAQ,EAAEP,YAAY,CAACO;EAAQ,CAAC,CAAC,CAChEwB,KAAK,CAACC,KAAK,IAAG;IACb;IACA;IACApC,UAAU,CAACoC,KAAK,CAAC;EACnB,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}