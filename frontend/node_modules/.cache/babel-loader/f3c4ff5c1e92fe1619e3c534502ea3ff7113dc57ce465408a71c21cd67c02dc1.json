{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextComponent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar ReactComponentBrowserEnvironment = require(\"./ReactComponentBrowserEnvironment\");\nvar ReactDOMComponent = require(\"./ReactDOMComponent\");\nvar assign = require(\"./Object.assign\");\nvar escapeTextContentForBrowser = require(\"./escapeTextContentForBrowser\");\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactDOMTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactDOMTextComponent = function (props) {\n  // This constructor and its argument is currently used by mocks.\n};\nassign(ReactDOMTextComponent.prototype, {\n  /**\n   * @param {ReactText} text\n   * @internal\n   */\n  construct: function (text) {\n    // TODO: This is really a ReactText (ReactNode), not a ReactElement\n    this._currentElement = text;\n    this._stringText = '' + text;\n\n    // Properties\n    this._rootNodeID = null;\n    this._mountIndex = 0;\n  },\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function (rootID, transaction, context) {\n    this._rootNodeID = rootID;\n    var escapedText = escapeTextContentForBrowser(this._stringText);\n    if (transaction.renderToStaticMarkup) {\n      // Normally we'd wrap this in a `span` for the reasons stated above, but\n      // since this is a situation where React won't take over (static pages),\n      // we can simply return the text as it is.\n      return escapedText;\n    }\n    return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';\n  },\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {ReactText} nextText The next text content\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function (nextText, transaction) {\n    if (nextText !== this._currentElement) {\n      this._currentElement = nextText;\n      var nextStringText = '' + nextText;\n      if (nextStringText !== this._stringText) {\n        // TODO: Save this as pending props and use performUpdateIfNecessary\n        // and/or updateComponent to do the actual update for consistency with\n        // other component types?\n        this._stringText = nextStringText;\n        ReactDOMComponent.BackendIDOperations.updateTextContentByID(this._rootNodeID, nextStringText);\n      }\n    }\n  },\n  unmountComponent: function () {\n    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);\n  }\n});\nmodule.exports = ReactDOMTextComponent;","map":{"version":3,"names":["DOMPropertyOperations","require","ReactComponentBrowserEnvironment","ReactDOMComponent","assign","escapeTextContentForBrowser","ReactDOMTextComponent","props","prototype","construct","text","_currentElement","_stringText","_rootNodeID","_mountIndex","mountComponent","rootID","transaction","context","escapedText","renderToStaticMarkup","createMarkupForID","receiveComponent","nextText","nextStringText","BackendIDOperations","updateTextContentByID","unmountComponent","unmountIDFromEnvironment","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/ReactDOMTextComponent.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextComponent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar ReactComponentBrowserEnvironment =\n  require(\"./ReactComponentBrowserEnvironment\");\nvar ReactDOMComponent = require(\"./ReactDOMComponent\");\n\nvar assign = require(\"./Object.assign\");\nvar escapeTextContentForBrowser = require(\"./escapeTextContentForBrowser\");\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactDOMTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactDOMTextComponent = function(props) {\n  // This constructor and its argument is currently used by mocks.\n};\n\nassign(ReactDOMTextComponent.prototype, {\n\n  /**\n   * @param {ReactText} text\n   * @internal\n   */\n  construct: function(text) {\n    // TODO: This is really a ReactText (ReactNode), not a ReactElement\n    this._currentElement = text;\n    this._stringText = '' + text;\n\n    // Properties\n    this._rootNodeID = null;\n    this._mountIndex = 0;\n  },\n\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function(rootID, transaction, context) {\n    this._rootNodeID = rootID;\n    var escapedText = escapeTextContentForBrowser(this._stringText);\n\n    if (transaction.renderToStaticMarkup) {\n      // Normally we'd wrap this in a `span` for the reasons stated above, but\n      // since this is a situation where React won't take over (static pages),\n      // we can simply return the text as it is.\n      return escapedText;\n    }\n\n    return (\n      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +\n        escapedText +\n      '</span>'\n    );\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {ReactText} nextText The next text content\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function(nextText, transaction) {\n    if (nextText !== this._currentElement) {\n      this._currentElement = nextText;\n      var nextStringText = '' + nextText;\n      if (nextStringText !== this._stringText) {\n        // TODO: Save this as pending props and use performUpdateIfNecessary\n        // and/or updateComponent to do the actual update for consistency with\n        // other component types?\n        this._stringText = nextStringText;\n        ReactDOMComponent.BackendIDOperations.updateTextContentByID(\n          this._rootNodeID,\n          nextStringText\n        );\n      }\n    }\n  },\n\n  unmountComponent: function() {\n    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);\n  }\n\n});\n\nmodule.exports = ReactDOMTextComponent;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,qBAAqB,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAC9D,IAAIC,gCAAgC,GAClCD,OAAO,CAAC,oCAAoC,CAAC;AAC/C,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAEtD,IAAIG,MAAM,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AACvC,IAAII,2BAA2B,GAAGJ,OAAO,CAAC,+BAA+B,CAAC;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIK,qBAAqB,GAAG,SAAAA,CAASC,KAAK,EAAE;EAC1C;AAAA,CACD;AAEDH,MAAM,CAACE,qBAAqB,CAACE,SAAS,EAAE;EAEtC;AACF;AACA;AACA;EACEC,SAAS,EAAE,SAAAA,CAASC,IAAI,EAAE;IACxB;IACA,IAAI,CAACC,eAAe,GAAGD,IAAI;IAC3B,IAAI,CAACE,WAAW,GAAG,EAAE,GAAGF,IAAI;;IAE5B;IACA,IAAI,CAACG,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,WAAW,GAAG,CAAC;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,cAAc,EAAE,SAAAA,CAASC,MAAM,EAAEC,WAAW,EAAEC,OAAO,EAAE;IACrD,IAAI,CAACL,WAAW,GAAGG,MAAM;IACzB,IAAIG,WAAW,GAAGd,2BAA2B,CAAC,IAAI,CAACO,WAAW,CAAC;IAE/D,IAAIK,WAAW,CAACG,oBAAoB,EAAE;MACpC;MACA;MACA;MACA,OAAOD,WAAW;IACpB;IAEA,OACE,QAAQ,GAAGnB,qBAAqB,CAACqB,iBAAiB,CAACL,MAAM,CAAC,GAAG,GAAG,GAC9DG,WAAW,GACb,SAAS;EAEb,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,gBAAgB,EAAE,SAAAA,CAASC,QAAQ,EAAEN,WAAW,EAAE;IAChD,IAAIM,QAAQ,KAAK,IAAI,CAACZ,eAAe,EAAE;MACrC,IAAI,CAACA,eAAe,GAAGY,QAAQ;MAC/B,IAAIC,cAAc,GAAG,EAAE,GAAGD,QAAQ;MAClC,IAAIC,cAAc,KAAK,IAAI,CAACZ,WAAW,EAAE;QACvC;QACA;QACA;QACA,IAAI,CAACA,WAAW,GAAGY,cAAc;QACjCrB,iBAAiB,CAACsB,mBAAmB,CAACC,qBAAqB,CACzD,IAAI,CAACb,WAAW,EAChBW,cACF,CAAC;MACH;IACF;EACF,CAAC;EAEDG,gBAAgB,EAAE,SAAAA,CAAA,EAAW;IAC3BzB,gCAAgC,CAAC0B,wBAAwB,CAAC,IAAI,CAACf,WAAW,CAAC;EAC7E;AAEF,CAAC,CAAC;AAEFgB,MAAM,CAACC,OAAO,GAAGxB,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}