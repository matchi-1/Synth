{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { spawnSync } from 'child_process';\nimport { createReadStream } from 'fs';\nimport { mkdir, readdir } from 'fs/promises';\nimport * as path from 'path';\nimport extractZip from 'extract-zip';\nimport tar from 'tar-fs';\nimport bzip from 'unbzip2-stream';\n/**\n * @internal\n */\nexport async function unpackArchive(archivePath, folderPath) {\n  if (archivePath.endsWith('.zip')) {\n    await extractZip(archivePath, {\n      dir: folderPath\n    });\n  } else if (archivePath.endsWith('.tar.bz2')) {\n    await extractTar(archivePath, folderPath);\n  } else if (archivePath.endsWith('.dmg')) {\n    await mkdir(folderPath);\n    await installDMG(archivePath, folderPath);\n  } else if (archivePath.endsWith('.exe')) {\n    // Firefox on Windows.\n    const result = spawnSync(archivePath, [`/ExtractDir=${folderPath}`], {\n      env: {\n        __compat_layer: 'RunAsInvoker'\n      }\n    });\n    if (result.status !== 0) {\n      throw new Error(`Failed to extract ${archivePath} to ${folderPath}: ${result.output}`);\n    }\n  } else {\n    throw new Error(`Unsupported archive format: ${archivePath}`);\n  }\n}\n/**\n * @internal\n */\nfunction extractTar(tarPath, folderPath) {\n  return new Promise((fulfill, reject) => {\n    const tarStream = tar.extract(folderPath);\n    tarStream.on('error', reject);\n    tarStream.on('finish', fulfill);\n    const readStream = createReadStream(tarPath);\n    readStream.pipe(bzip()).pipe(tarStream);\n  });\n}\n/**\n * @internal\n */\nasync function installDMG(dmgPath, folderPath) {\n  const {\n    stdout\n  } = spawnSync(`hdiutil`, ['attach', '-nobrowse', '-noautoopen', dmgPath]);\n  const volumes = stdout.toString('utf8').match(/\\/Volumes\\/(.*)/m);\n  if (!volumes) {\n    throw new Error(`Could not find volume path in ${stdout}`);\n  }\n  const mountPath = volumes[0];\n  try {\n    const fileNames = await readdir(mountPath);\n    const appName = fileNames.find(item => {\n      return typeof item === 'string' && item.endsWith('.app');\n    });\n    if (!appName) {\n      throw new Error(`Cannot find app in ${mountPath}`);\n    }\n    const mountedPath = path.join(mountPath, appName);\n    spawnSync('cp', ['-R', mountedPath, folderPath]);\n  } finally {\n    spawnSync('hdiutil', ['detach', mountPath, '-quiet']);\n  }\n}","map":{"version":3,"names":["spawnSync","createReadStream","mkdir","readdir","path","extractZip","tar","bzip","unpackArchive","archivePath","folderPath","endsWith","dir","extractTar","installDMG","result","env","__compat_layer","status","Error","output","tarPath","Promise","fulfill","reject","tarStream","extract","on","readStream","pipe","dmgPath","stdout","volumes","toString","match","mountPath","fileNames","appName","find","item","mountedPath","join"],"sources":["C:\\Users\\raffy\\Desktop\\test\\node_modules\\@puppeteer\\browsers\\src\\fileUtil.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {spawnSync} from 'child_process';\nimport {createReadStream} from 'fs';\nimport {mkdir, readdir} from 'fs/promises';\nimport * as path from 'path';\n\nimport extractZip from 'extract-zip';\nimport tar from 'tar-fs';\nimport bzip from 'unbzip2-stream';\n\n/**\n * @internal\n */\nexport async function unpackArchive(\n  archivePath: string,\n  folderPath: string\n): Promise<void> {\n  if (archivePath.endsWith('.zip')) {\n    await extractZip(archivePath, {dir: folderPath});\n  } else if (archivePath.endsWith('.tar.bz2')) {\n    await extractTar(archivePath, folderPath);\n  } else if (archivePath.endsWith('.dmg')) {\n    await mkdir(folderPath);\n    await installDMG(archivePath, folderPath);\n  } else if (archivePath.endsWith('.exe')) {\n    // Firefox on Windows.\n    const result = spawnSync(archivePath, [`/ExtractDir=${folderPath}`], {\n      env: {\n        __compat_layer: 'RunAsInvoker',\n      },\n    });\n    if (result.status !== 0) {\n      throw new Error(\n        `Failed to extract ${archivePath} to ${folderPath}: ${result.output}`\n      );\n    }\n  } else {\n    throw new Error(`Unsupported archive format: ${archivePath}`);\n  }\n}\n\n/**\n * @internal\n */\nfunction extractTar(tarPath: string, folderPath: string): Promise<void> {\n  return new Promise((fulfill, reject) => {\n    const tarStream = tar.extract(folderPath);\n    tarStream.on('error', reject);\n    tarStream.on('finish', fulfill);\n    const readStream = createReadStream(tarPath);\n    readStream.pipe(bzip()).pipe(tarStream);\n  });\n}\n\n/**\n * @internal\n */\nasync function installDMG(dmgPath: string, folderPath: string): Promise<void> {\n  const {stdout} = spawnSync(`hdiutil`, [\n    'attach',\n    '-nobrowse',\n    '-noautoopen',\n    dmgPath,\n  ]);\n\n  const volumes = stdout.toString('utf8').match(/\\/Volumes\\/(.*)/m);\n  if (!volumes) {\n    throw new Error(`Could not find volume path in ${stdout}`);\n  }\n  const mountPath = volumes[0]!;\n\n  try {\n    const fileNames = await readdir(mountPath);\n    const appName = fileNames.find(item => {\n      return typeof item === 'string' && item.endsWith('.app');\n    });\n    if (!appName) {\n      throw new Error(`Cannot find app in ${mountPath}`);\n    }\n    const mountedPath = path.join(mountPath!, appName);\n\n    spawnSync('cp', ['-R', mountedPath, folderPath]);\n  } finally {\n    spawnSync('hdiutil', ['detach', mountPath, '-quiet']);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}