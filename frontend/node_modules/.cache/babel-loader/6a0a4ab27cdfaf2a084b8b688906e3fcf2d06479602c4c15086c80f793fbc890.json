{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginHub\n */\n\n'use strict';\n\nvar EventPluginRegistry = require(\"./EventPluginRegistry\");\nvar EventPluginUtils = require(\"./EventPluginUtils\");\nvar accumulateInto = require(\"./accumulateInto\");\nvar forEachAccumulated = require(\"./forEachAccumulated\");\nvar invariant = require(\"./invariant\");\n\n/**\n * Internal store for event listeners\n */\nvar listenerBank = {};\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @private\n */\nvar executeDispatchesAndRelease = function (event) {\n  if (event) {\n    var executeDispatch = EventPluginUtils.executeDispatch;\n    // Plugins can provide custom behavior when dispatching events.\n    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);\n    if (PluginModule && PluginModule.executeDispatch) {\n      executeDispatch = PluginModule.executeDispatch;\n    }\n    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\n\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\nvar InstanceHandle = null;\nfunction validateInstanceHandle() {\n  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;\n  \"production\" !== process.env.NODE_ENV ? invariant(valid, 'InstanceHandle not injected before use!') : invariant(valid);\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\nvar EventPluginHub = {\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function (InjectedInstanceHandle) {\n      InstanceHandle = InjectedInstanceHandle;\n      if (\"production\" !== process.env.NODE_ENV) {\n        validateInstanceHandle();\n      }\n    },\n    getInstanceHandle: function () {\n      if (\"production\" !== process.env.NODE_ENV) {\n        validateInstanceHandle();\n      }\n      return InstanceHandle;\n    },\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n  },\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function (id, registrationName, listener) {\n    \"production\" !== process.env.NODE_ENV ? invariant(!listener || typeof listener === 'function', 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(!listener || typeof listener === 'function');\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n  },\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function (id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function (id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function (id) {\n    for (var registrationName in listenerBank) {\n      delete listenerBank[registrationName][id];\n    }\n  },\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n    for (var i = 0, l = plugins.length; i < l; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent);\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n    return events;\n  },\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function (events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function () {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);\n    \"production\" !== process.env.NODE_ENV ? invariant(!eventQueue, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(!eventQueue);\n  },\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function () {\n    listenerBank = {};\n  },\n  __getListenerBank: function () {\n    return listenerBank;\n  }\n};\nmodule.exports = EventPluginHub;","map":{"version":3,"names":["EventPluginRegistry","require","EventPluginUtils","accumulateInto","forEachAccumulated","invariant","listenerBank","eventQueue","executeDispatchesAndRelease","event","executeDispatch","PluginModule","getPluginModuleForEvent","executeDispatchesInOrder","isPersistent","constructor","release","InstanceHandle","validateInstanceHandle","valid","traverseTwoPhase","traverseEnterLeave","process","env","NODE_ENV","EventPluginHub","injection","injectMount","injectInstanceHandle","InjectedInstanceHandle","getInstanceHandle","injectEventPluginOrder","injectEventPluginsByName","eventNameDispatchConfigs","registrationNameModules","putListener","id","registrationName","listener","bankForRegistrationName","getListener","deleteListener","deleteAllListeners","extractEvents","topLevelType","topLevelTarget","topLevelTargetID","nativeEvent","events","plugins","i","l","length","possiblePlugin","extractedEvents","enqueueEvents","processEventQueue","processingEventQueue","__purge","__getListenerBank","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/EventPluginHub.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginHub\n */\n\n'use strict';\n\nvar EventPluginRegistry = require(\"./EventPluginRegistry\");\nvar EventPluginUtils = require(\"./EventPluginUtils\");\n\nvar accumulateInto = require(\"./accumulateInto\");\nvar forEachAccumulated = require(\"./forEachAccumulated\");\nvar invariant = require(\"./invariant\");\n\n/**\n * Internal store for event listeners\n */\nvar listenerBank = {};\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @private\n */\nvar executeDispatchesAndRelease = function(event) {\n  if (event) {\n    var executeDispatch = EventPluginUtils.executeDispatch;\n    // Plugins can provide custom behavior when dispatching events.\n    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);\n    if (PluginModule && PluginModule.executeDispatch) {\n      executeDispatch = PluginModule.executeDispatch;\n    }\n    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\n\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\nvar InstanceHandle = null;\n\nfunction validateInstanceHandle() {\n  var valid =\n    InstanceHandle &&\n    InstanceHandle.traverseTwoPhase &&\n    InstanceHandle.traverseEnterLeave;\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    valid,\n    'InstanceHandle not injected before use!'\n  ) : invariant(valid));\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\nvar EventPluginHub = {\n\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function(InjectedInstanceHandle) {\n      InstanceHandle = InjectedInstanceHandle;\n      if (\"production\" !== process.env.NODE_ENV) {\n        validateInstanceHandle();\n      }\n    },\n\n    getInstanceHandle: function() {\n      if (\"production\" !== process.env.NODE_ENV) {\n        validateInstanceHandle();\n      }\n      return InstanceHandle;\n    },\n\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n\n  },\n\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function(id, registrationName, listener) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !listener || typeof listener === 'function',\n      'Expected %s listener to be a function, instead got type %s',\n      registrationName, typeof listener\n    ) : invariant(!listener || typeof listener === 'function'));\n\n    var bankForRegistrationName =\n      listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function(id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function(id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function(id) {\n    for (var registrationName in listenerBank) {\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n    for (var i = 0, l = plugins.length; i < l; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(\n          topLevelType,\n          topLevelTarget,\n          topLevelTargetID,\n          nativeEvent\n        );\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function(events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function() {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !eventQueue,\n      'processEventQueue(): Additional events were enqueued while processing ' +\n      'an event queue. Support for this has not yet been implemented.'\n    ) : invariant(!eventQueue));\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function() {\n    listenerBank = {};\n  },\n\n  __getListenerBank: function() {\n    return listenerBank;\n  }\n\n};\n\nmodule.exports = EventPluginHub;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}