{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelect\n */\n\n'use strict';\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactClass = require(\"./ReactClass\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactUpdates = require(\"./ReactUpdates\");\nvar assign = require(\"./Object.assign\");\nvar select = ReactElement.createFactory('select');\nfunction updateOptionsIfPendingUpdateAndMounted() {\n  /*jshint validthis:true */\n  if (this._pendingUpdate) {\n    this._pendingUpdate = false;\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null && this.isMounted()) {\n      updateOptions(this, value);\n    }\n  }\n}\n\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\nfunction selectValueType(props, propName, componentName) {\n  if (props[propName] == null) {\n    return null;\n  }\n  if (props.multiple) {\n    if (!Array.isArray(props[propName])) {\n      return new Error(\"The `\" + propName + \"` prop supplied to <select> must be an array if \" + \"`multiple` is true.\");\n    }\n  } else {\n    if (Array.isArray(props[propName])) {\n      return new Error(\"The `\" + propName + \"` prop supplied to <select> must be a scalar \" + \"value if `multiple` is false.\");\n    }\n  }\n}\n\n/**\n * @param {ReactComponent} component Instance of ReactDOMSelect\n * @param {*} propValue A stringable (with `multiple`, a list of stringables).\n * @private\n */\nfunction updateOptions(component, propValue) {\n  var selectedValue, i, l;\n  var options = component.getDOMNode().options;\n  if (component.props.multiple) {\n    selectedValue = {};\n    for (i = 0, l = propValue.length; i < l; i++) {\n      selectedValue['' + propValue[i]] = true;\n    }\n    for (i = 0, l = options.length; i < l; i++) {\n      var selected = selectedValue.hasOwnProperty(options[i].value);\n      if (options[i].selected !== selected) {\n        options[i].selected = selected;\n      }\n    }\n  } else {\n    // Do not set `select.value` as exact behavior isn't consistent across all\n    // browsers for all cases.\n    selectedValue = '' + propValue;\n    for (i = 0, l = options.length; i < l; i++) {\n      if (options[i].value === selectedValue) {\n        options[i].selected = true;\n        return;\n      }\n    }\n    if (options.length) {\n      options[0].selected = true;\n    }\n  }\n}\n\n/**\n * Implements a <select> native component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * stringable. If `multiple` is true, the prop must be an array of stringables.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\nvar ReactDOMSelect = ReactClass.createClass({\n  displayName: 'ReactDOMSelect',\n  tagName: 'SELECT',\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n  propTypes: {\n    defaultValue: selectValueType,\n    value: selectValueType\n  },\n  render: function () {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n    props.onChange = this._handleChange;\n    props.value = null;\n    return select(props, this.props.children);\n  },\n  componentWillMount: function () {\n    this._pendingUpdate = false;\n  },\n  componentDidMount: function () {\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      updateOptions(this, value);\n    } else if (this.props.defaultValue != null) {\n      updateOptions(this, this.props.defaultValue);\n    }\n  },\n  componentDidUpdate: function (prevProps) {\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      this._pendingUpdate = false;\n      updateOptions(this, value);\n    } else if (!prevProps.multiple !== !this.props.multiple) {\n      // For simplicity, reapply `defaultValue` if `multiple` is toggled.\n      if (this.props.defaultValue != null) {\n        updateOptions(this, this.props.defaultValue);\n      } else {\n        // Revert the select back to its default unselected state.\n        updateOptions(this, this.props.multiple ? [] : '');\n      }\n    }\n  },\n  _handleChange: function (event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n    this._pendingUpdate = true;\n    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);\n    return returnValue;\n  }\n});\nmodule.exports = ReactDOMSelect;","map":{"version":3,"names":["AutoFocusMixin","require","LinkedValueUtils","ReactBrowserComponentMixin","ReactClass","ReactElement","ReactUpdates","assign","select","createFactory","updateOptionsIfPendingUpdateAndMounted","_pendingUpdate","value","getValue","isMounted","updateOptions","selectValueType","props","propName","componentName","multiple","Array","isArray","Error","component","propValue","selectedValue","i","l","options","getDOMNode","length","selected","hasOwnProperty","ReactDOMSelect","createClass","displayName","tagName","mixins","Mixin","propTypes","defaultValue","render","onChange","_handleChange","children","componentWillMount","componentDidMount","componentDidUpdate","prevProps","event","returnValue","getOnChange","call","asap","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/ReactDOMSelect.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelect\n */\n\n'use strict';\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactClass = require(\"./ReactClass\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\n\nvar select = ReactElement.createFactory('select');\n\nfunction updateOptionsIfPendingUpdateAndMounted() {\n  /*jshint validthis:true */\n  if (this._pendingUpdate) {\n    this._pendingUpdate = false;\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null && this.isMounted()) {\n      updateOptions(this, value);\n    }\n  }\n}\n\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\nfunction selectValueType(props, propName, componentName) {\n  if (props[propName] == null) {\n    return null;\n  }\n  if (props.multiple) {\n    if (!Array.isArray(props[propName])) {\n      return new Error(\n        (\"The `\" + propName + \"` prop supplied to <select> must be an array if \") +\n        (\"`multiple` is true.\")\n      );\n    }\n  } else {\n    if (Array.isArray(props[propName])) {\n      return new Error(\n        (\"The `\" + propName + \"` prop supplied to <select> must be a scalar \") +\n        (\"value if `multiple` is false.\")\n      );\n    }\n  }\n}\n\n/**\n * @param {ReactComponent} component Instance of ReactDOMSelect\n * @param {*} propValue A stringable (with `multiple`, a list of stringables).\n * @private\n */\nfunction updateOptions(component, propValue) {\n  var selectedValue, i, l;\n  var options = component.getDOMNode().options;\n\n  if (component.props.multiple) {\n    selectedValue = {};\n    for (i = 0, l = propValue.length; i < l; i++) {\n      selectedValue['' + propValue[i]] = true;\n    }\n    for (i = 0, l = options.length; i < l; i++) {\n      var selected = selectedValue.hasOwnProperty(options[i].value);\n      if (options[i].selected !== selected) {\n        options[i].selected = selected;\n      }\n    }\n  } else {\n    // Do not set `select.value` as exact behavior isn't consistent across all\n    // browsers for all cases.\n    selectedValue = '' + propValue;\n    for (i = 0, l = options.length; i < l; i++) {\n      if (options[i].value === selectedValue) {\n        options[i].selected = true;\n        return;\n      }\n    }\n    if (options.length) {\n      options[0].selected = true;\n    }\n  }\n}\n\n/**\n * Implements a <select> native component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * stringable. If `multiple` is true, the prop must be an array of stringables.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\nvar ReactDOMSelect = ReactClass.createClass({\n  displayName: 'ReactDOMSelect',\n  tagName: 'SELECT',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  propTypes: {\n    defaultValue: selectValueType,\n    value: selectValueType\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n\n    props.onChange = this._handleChange;\n    props.value = null;\n\n    return select(props, this.props.children);\n  },\n\n  componentWillMount: function() {\n    this._pendingUpdate = false;\n  },\n\n  componentDidMount: function() {\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      updateOptions(this, value);\n    } else if (this.props.defaultValue != null) {\n      updateOptions(this, this.props.defaultValue);\n    }\n  },\n\n  componentDidUpdate: function(prevProps) {\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      this._pendingUpdate = false;\n      updateOptions(this, value);\n    } else if (!prevProps.multiple !== !this.props.multiple) {\n      // For simplicity, reapply `defaultValue` if `multiple` is toggled.\n      if (this.props.defaultValue != null) {\n        updateOptions(this, this.props.defaultValue);\n      } else {\n        // Revert the select back to its default unselected state.\n        updateOptions(this, this.props.multiple ? [] : '');\n      }\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n\n    this._pendingUpdate = true;\n    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMSelect;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}