{"ast":null,"code":"var exec = require('child_process').exec,\n  path = require('path');\n\n/**\r\n * open a file or uri using the default application for the file type.\r\n *\r\n * @return {ChildProcess} - the child process object.\r\n * @param {string} target - the file/uri to open.\r\n * @param {string} appName - (optional) the application to be used to open the\r\n *      file (for example, \"chrome\", \"firefox\")\r\n * @param {function(Error)} callback - called with null on success, or\r\n *      an error object that contains a property 'code' with the exit\r\n *      code of the process.\r\n */\n\nmodule.exports = open;\nfunction open(target, appName, callback) {\n  var opener;\n  if (typeof appName === 'function') {\n    callback = appName;\n    appName = null;\n  }\n  switch (process.platform) {\n    case 'darwin':\n      if (appName) {\n        opener = 'open -a \"' + escape(appName) + '\"';\n      } else {\n        opener = 'open';\n      }\n      break;\n    case 'win32':\n      // if the first parameter to start is quoted, it uses that as the title\n      // so we pass a blank title so we can quote the file we are opening\n      if (appName) {\n        opener = 'start \"\" \"' + escape(appName) + '\"';\n      } else {\n        opener = 'start \"\"';\n      }\n      break;\n    default:\n      if (appName) {\n        opener = escape(appName);\n      } else {\n        // use Portlands xdg-open everywhere else\n        opener = path.join(__dirname, '../vendor/xdg-open');\n      }\n      break;\n  }\n  if (process.env.SUDO_USER) {\n    opener = 'sudo -u ' + process.env.SUDO_USER + ' ' + opener;\n  }\n  return exec(opener + ' \"' + escape(target) + '\"', callback);\n}\nfunction escape(s) {\n  return s.replace(/\"/g, '\\\\\\\"');\n}","map":{"version":3,"names":["exec","require","path","module","exports","open","target","appName","callback","opener","process","platform","escape","join","__dirname","env","SUDO_USER","s","replace"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/open/lib/open.js"],"sourcesContent":["var exec = require('child_process').exec\r\n  , path = require('path')\r\n  ;\r\n\r\n\r\n/**\r\n * open a file or uri using the default application for the file type.\r\n *\r\n * @return {ChildProcess} - the child process object.\r\n * @param {string} target - the file/uri to open.\r\n * @param {string} appName - (optional) the application to be used to open the\r\n *      file (for example, \"chrome\", \"firefox\")\r\n * @param {function(Error)} callback - called with null on success, or\r\n *      an error object that contains a property 'code' with the exit\r\n *      code of the process.\r\n */\r\n\r\nmodule.exports = open;\r\n\r\nfunction open(target, appName, callback) {\r\n  var opener;\r\n\r\n  if (typeof(appName) === 'function') {\r\n    callback = appName;\r\n    appName = null;\r\n  }\r\n\r\n  switch (process.platform) {\r\n  case 'darwin':\r\n    if (appName) {\r\n      opener = 'open -a \"' + escape(appName) + '\"';\r\n    } else {\r\n      opener = 'open';\r\n    }\r\n    break;\r\n  case 'win32':\r\n    // if the first parameter to start is quoted, it uses that as the title\r\n    // so we pass a blank title so we can quote the file we are opening\r\n    if (appName) {\r\n      opener = 'start \"\" \"' + escape(appName) + '\"';\r\n    } else {\r\n      opener = 'start \"\"';\r\n    }\r\n    break;\r\n  default:\r\n    if (appName) {\r\n      opener = escape(appName);\r\n    } else {\r\n      // use Portlands xdg-open everywhere else\r\n      opener = path.join(__dirname, '../vendor/xdg-open');\r\n    }\r\n    break;\r\n  }\r\n\r\n  if (process.env.SUDO_USER) {\r\n    opener = 'sudo -u ' + process.env.SUDO_USER + ' ' + opener;\r\n  }\r\n  return exec(opener + ' \"' + escape(target) + '\"', callback);\r\n}\r\n\r\nfunction escape(s) {\r\n  return s.replace(/\"/g, '\\\\\\\"');\r\n}\r\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,eAAe,CAAC,CAACD,IAAI;EACpCE,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;;AAI1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAE,MAAM,CAACC,OAAO,GAAGC,IAAI;AAErB,SAASA,IAAIA,CAACC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EACvC,IAAIC,MAAM;EAEV,IAAI,OAAOF,OAAQ,KAAK,UAAU,EAAE;IAClCC,QAAQ,GAAGD,OAAO;IAClBA,OAAO,GAAG,IAAI;EAChB;EAEA,QAAQG,OAAO,CAACC,QAAQ;IACxB,KAAK,QAAQ;MACX,IAAIJ,OAAO,EAAE;QACXE,MAAM,GAAG,WAAW,GAAGG,MAAM,CAACL,OAAO,CAAC,GAAG,GAAG;MAC9C,CAAC,MAAM;QACLE,MAAM,GAAG,MAAM;MACjB;MACA;IACF,KAAK,OAAO;MACV;MACA;MACA,IAAIF,OAAO,EAAE;QACXE,MAAM,GAAG,YAAY,GAAGG,MAAM,CAACL,OAAO,CAAC,GAAG,GAAG;MAC/C,CAAC,MAAM;QACLE,MAAM,GAAG,UAAU;MACrB;MACA;IACF;MACE,IAAIF,OAAO,EAAE;QACXE,MAAM,GAAGG,MAAM,CAACL,OAAO,CAAC;MAC1B,CAAC,MAAM;QACL;QACAE,MAAM,GAAGP,IAAI,CAACW,IAAI,CAACC,SAAS,EAAE,oBAAoB,CAAC;MACrD;MACA;EACF;EAEA,IAAIJ,OAAO,CAACK,GAAG,CAACC,SAAS,EAAE;IACzBP,MAAM,GAAG,UAAU,GAAGC,OAAO,CAACK,GAAG,CAACC,SAAS,GAAG,GAAG,GAAGP,MAAM;EAC5D;EACA,OAAOT,IAAI,CAACS,MAAM,GAAG,IAAI,GAAGG,MAAM,CAACN,MAAM,CAAC,GAAG,GAAG,EAAEE,QAAQ,CAAC;AAC7D;AAEA,SAASI,MAAMA,CAACK,CAAC,EAAE;EACjB,OAAOA,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}