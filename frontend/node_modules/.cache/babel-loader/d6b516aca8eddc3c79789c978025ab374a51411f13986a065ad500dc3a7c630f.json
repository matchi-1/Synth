{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nexport {};","map":{"version":3,"names":[],"sources":["C:\\Users\\raffy\\Desktop\\test\\node_modules\\puppeteer-core\\src\\cdp\\TargetManager.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {CDPSession} from '../api/CDPSession.js';\nimport type {EventEmitter, EventType} from '../common/EventEmitter.js';\n\nimport type {CdpTarget} from './Target.js';\n\n/**\n * @internal\n */\nexport type TargetFactory = (\n  targetInfo: Protocol.Target.TargetInfo,\n  session?: CDPSession,\n  parentSession?: CDPSession\n) => CdpTarget;\n\n/**\n * @internal\n */\nexport const enum TargetManagerEvent {\n  TargetDiscovered = 'targetDiscovered',\n  TargetAvailable = 'targetAvailable',\n  TargetGone = 'targetGone',\n  /**\n   * Emitted after a target has been initialized and whenever its URL changes.\n   */\n  TargetChanged = 'targetChanged',\n}\n\n/**\n * @internal\n */\nexport interface TargetManagerEvents extends Record<EventType, unknown> {\n  [TargetManagerEvent.TargetAvailable]: CdpTarget;\n  [TargetManagerEvent.TargetDiscovered]: Protocol.Target.TargetInfo;\n  [TargetManagerEvent.TargetGone]: CdpTarget;\n  [TargetManagerEvent.TargetChanged]: {\n    target: CdpTarget;\n    wasInitialized: true;\n    previousURL: string;\n  };\n}\n\n/**\n * TargetManager encapsulates all interactions with CDP targets and is\n * responsible for coordinating the configuration of targets with the rest of\n * Puppeteer. Code outside of this class should not subscribe `Target.*` events\n * and only use the TargetManager events.\n *\n * There are two implementations: one for Chrome that uses CDP's auto-attach\n * mechanism and one for Firefox because Firefox does not support auto-attach.\n *\n * @internal\n */\nexport interface TargetManager extends EventEmitter<TargetManagerEvents> {\n  getAvailableTargets(): ReadonlyMap<string, CdpTarget>;\n  getChildTargets(target: CdpTarget): ReadonlySet<CdpTarget>;\n  initialize(): Promise<void>;\n  dispose(): void;\n}\n"],"mappings":"AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}