{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { CDPSession, CDPSessionEvent } from '../api/CDPSession.js';\nimport { CallbackRegistry } from '../common/CallbackRegistry.js';\nimport { TargetCloseError } from '../common/Errors.js';\nimport { assert } from '../util/assert.js';\nimport { createProtocolErrorMessage } from '../util/ErrorLike.js';\n/**\n * @internal\n */\nexport class CdpCDPSession extends CDPSession {\n  #sessionId;\n  #targetType;\n  #callbacks = new CallbackRegistry();\n  #connection;\n  #parentSessionId;\n  #target;\n  /**\n   * @internal\n   */\n  constructor(connection, targetType, sessionId, parentSessionId) {\n    super();\n    this.#connection = connection;\n    this.#targetType = targetType;\n    this.#sessionId = sessionId;\n    this.#parentSessionId = parentSessionId;\n  }\n  /**\n   * Sets the {@link CdpTarget} associated with the session instance.\n   *\n   * @internal\n   */\n  _setTarget(target) {\n    this.#target = target;\n  }\n  /**\n   * Gets the {@link CdpTarget} associated with the session instance.\n   *\n   * @internal\n   */\n  _target() {\n    assert(this.#target, 'Target must exist');\n    return this.#target;\n  }\n  connection() {\n    return this.#connection;\n  }\n  parentSession() {\n    if (!this.#parentSessionId) {\n      // To make it work in Firefox that does not have parent (tab) sessions.\n      return this;\n    }\n    const parent = this.#connection?.session(this.#parentSessionId);\n    return parent ?? undefined;\n  }\n  send(method, params, options) {\n    if (!this.#connection) {\n      return Promise.reject(new TargetCloseError(`Protocol error (${method}): Session closed. Most likely the ${this.#targetType} has been closed.`));\n    }\n    return this.#connection._rawSend(this.#callbacks, method, params, this.#sessionId, options);\n  }\n  /**\n   * @internal\n   */\n  _onMessage(object) {\n    if (object.id) {\n      if (object.error) {\n        this.#callbacks.reject(object.id, createProtocolErrorMessage(object), object.error.message);\n      } else {\n        this.#callbacks.resolve(object.id, object.result);\n      }\n    } else {\n      assert(!object.id);\n      this.emit(object.method, object.params);\n    }\n  }\n  /**\n   * Detaches the cdpSession from the target. Once detached, the cdpSession object\n   * won't emit any events and can't be used to send messages.\n   */\n  async detach() {\n    if (!this.#connection) {\n      throw new Error(`Session already detached. Most likely the ${this.#targetType} has been closed.`);\n    }\n    await this.#connection.send('Target.detachFromTarget', {\n      sessionId: this.#sessionId\n    });\n  }\n  /**\n   * @internal\n   */\n  _onClosed() {\n    this.#callbacks.clear();\n    this.#connection = undefined;\n    this.emit(CDPSessionEvent.Disconnected, undefined);\n  }\n  /**\n   * Returns the session's id.\n   */\n  id() {\n    return this.#sessionId;\n  }\n  /**\n   * @internal\n   */\n  getPendingProtocolErrors() {\n    return this.#callbacks.getPendingProtocolErrors();\n  }\n}","map":{"version":3,"names":["CDPSession","CDPSessionEvent","CallbackRegistry","TargetCloseError","assert","createProtocolErrorMessage","CdpCDPSession","sessionId","targetType","callbacks","connection","parentSessionId","target","constructor","_setTarget","_target","parentSession","parent","session","undefined","send","method","params","options","Promise","reject","_rawSend","_onMessage","object","id","error","message","resolve","result","emit","detach","Error","_onClosed","clear","Disconnected","getPendingProtocolErrors"],"sources":["C:\\Users\\raffy\\Desktop\\test\\node_modules\\puppeteer-core\\src\\cdp\\CDPSession.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {ProtocolMapping} from 'devtools-protocol/types/protocol-mapping.js';\n\nimport {\n  type CDPEvents,\n  CDPSession,\n  CDPSessionEvent,\n  type CommandOptions,\n} from '../api/CDPSession.js';\nimport {CallbackRegistry} from '../common/CallbackRegistry.js';\nimport {TargetCloseError} from '../common/Errors.js';\nimport {assert} from '../util/assert.js';\nimport {createProtocolErrorMessage} from '../util/ErrorLike.js';\n\nimport type {Connection} from './Connection.js';\nimport type {CdpTarget} from './Target.js';\n\n/**\n * @internal\n */\n\nexport class CdpCDPSession extends CDPSession {\n  #sessionId: string;\n  #targetType: string;\n  #callbacks = new CallbackRegistry();\n  #connection?: Connection;\n  #parentSessionId?: string;\n  #target?: CdpTarget;\n\n  /**\n   * @internal\n   */\n  constructor(\n    connection: Connection,\n    targetType: string,\n    sessionId: string,\n    parentSessionId: string | undefined\n  ) {\n    super();\n    this.#connection = connection;\n    this.#targetType = targetType;\n    this.#sessionId = sessionId;\n    this.#parentSessionId = parentSessionId;\n  }\n\n  /**\n   * Sets the {@link CdpTarget} associated with the session instance.\n   *\n   * @internal\n   */\n  _setTarget(target: CdpTarget): void {\n    this.#target = target;\n  }\n\n  /**\n   * Gets the {@link CdpTarget} associated with the session instance.\n   *\n   * @internal\n   */\n  _target(): CdpTarget {\n    assert(this.#target, 'Target must exist');\n    return this.#target;\n  }\n\n  override connection(): Connection | undefined {\n    return this.#connection;\n  }\n\n  override parentSession(): CDPSession | undefined {\n    if (!this.#parentSessionId) {\n      // To make it work in Firefox that does not have parent (tab) sessions.\n      return this;\n    }\n    const parent = this.#connection?.session(this.#parentSessionId);\n    return parent ?? undefined;\n  }\n\n  override send<T extends keyof ProtocolMapping.Commands>(\n    method: T,\n    params?: ProtocolMapping.Commands[T]['paramsType'][0],\n    options?: CommandOptions\n  ): Promise<ProtocolMapping.Commands[T]['returnType']> {\n    if (!this.#connection) {\n      return Promise.reject(\n        new TargetCloseError(\n          `Protocol error (${method}): Session closed. Most likely the ${this.#targetType} has been closed.`\n        )\n      );\n    }\n    return this.#connection._rawSend(\n      this.#callbacks,\n      method,\n      params,\n      this.#sessionId,\n      options\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _onMessage(object: {\n    id?: number;\n    method: keyof CDPEvents;\n    params: CDPEvents[keyof CDPEvents];\n    error: {message: string; data: any; code: number};\n    result?: any;\n  }): void {\n    if (object.id) {\n      if (object.error) {\n        this.#callbacks.reject(\n          object.id,\n          createProtocolErrorMessage(object),\n          object.error.message\n        );\n      } else {\n        this.#callbacks.resolve(object.id, object.result);\n      }\n    } else {\n      assert(!object.id);\n      this.emit(object.method, object.params);\n    }\n  }\n\n  /**\n   * Detaches the cdpSession from the target. Once detached, the cdpSession object\n   * won't emit any events and can't be used to send messages.\n   */\n  override async detach(): Promise<void> {\n    if (!this.#connection) {\n      throw new Error(\n        `Session already detached. Most likely the ${this.#targetType} has been closed.`\n      );\n    }\n    await this.#connection.send('Target.detachFromTarget', {\n      sessionId: this.#sessionId,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _onClosed(): void {\n    this.#callbacks.clear();\n    this.#connection = undefined;\n    this.emit(CDPSessionEvent.Disconnected, undefined);\n  }\n\n  /**\n   * Returns the session's id.\n   */\n  override id(): string {\n    return this.#sessionId;\n  }\n\n  /**\n   * @internal\n   */\n  getPendingProtocolErrors(): Error[] {\n    return this.#callbacks.getPendingProtocolErrors();\n  }\n}\n"],"mappings":"AAAA;;;;;AAQA,SAEEA,UAAU,EACVC,eAAe,QAEV,sBAAsB;AAC7B,SAAQC,gBAAgB,QAAO,+BAA+B;AAC9D,SAAQC,gBAAgB,QAAO,qBAAqB;AACpD,SAAQC,MAAM,QAAO,mBAAmB;AACxC,SAAQC,0BAA0B,QAAO,sBAAsB;AAK/D;;;AAIA,OAAM,MAAOC,aAAc,SAAQN,UAAU;EAC3C,CAAAO,SAAU;EACV,CAAAC,UAAW;EACX,CAAAC,SAAU,GAAG,IAAIP,gBAAgB,EAAE;EACnC,CAAAQ,UAAW;EACX,CAAAC,eAAgB;EAChB,CAAAC,MAAO;EAEP;;;EAGAC,YACEH,UAAsB,EACtBF,UAAkB,EAClBD,SAAiB,EACjBI,eAAmC;IAEnC,KAAK,EAAE;IACP,IAAI,CAAC,CAAAD,UAAW,GAAGA,UAAU;IAC7B,IAAI,CAAC,CAAAF,UAAW,GAAGA,UAAU;IAC7B,IAAI,CAAC,CAAAD,SAAU,GAAGA,SAAS;IAC3B,IAAI,CAAC,CAAAI,eAAgB,GAAGA,eAAe;EACzC;EAEA;;;;;EAKAG,UAAUA,CAACF,MAAiB;IAC1B,IAAI,CAAC,CAAAA,MAAO,GAAGA,MAAM;EACvB;EAEA;;;;;EAKAG,OAAOA,CAAA;IACLX,MAAM,CAAC,IAAI,CAAC,CAAAQ,MAAO,EAAE,mBAAmB,CAAC;IACzC,OAAO,IAAI,CAAC,CAAAA,MAAO;EACrB;EAESF,UAAUA,CAAA;IACjB,OAAO,IAAI,CAAC,CAAAA,UAAW;EACzB;EAESM,aAAaA,CAAA;IACpB,IAAI,CAAC,IAAI,CAAC,CAAAL,eAAgB,EAAE;MAC1B;MACA,OAAO,IAAI;IACb;IACA,MAAMM,MAAM,GAAG,IAAI,CAAC,CAAAP,UAAW,EAAEQ,OAAO,CAAC,IAAI,CAAC,CAAAP,eAAgB,CAAC;IAC/D,OAAOM,MAAM,IAAIE,SAAS;EAC5B;EAESC,IAAIA,CACXC,MAAS,EACTC,MAAqD,EACrDC,OAAwB;IAExB,IAAI,CAAC,IAAI,CAAC,CAAAb,UAAW,EAAE;MACrB,OAAOc,OAAO,CAACC,MAAM,CACnB,IAAItB,gBAAgB,CAClB,mBAAmBkB,MAAM,sCAAsC,IAAI,CAAC,CAAAb,UAAW,mBAAmB,CACnG,CACF;IACH;IACA,OAAO,IAAI,CAAC,CAAAE,UAAW,CAACgB,QAAQ,CAC9B,IAAI,CAAC,CAAAjB,SAAU,EACfY,MAAM,EACNC,MAAM,EACN,IAAI,CAAC,CAAAf,SAAU,EACfgB,OAAO,CACR;EACH;EAEA;;;EAGAI,UAAUA,CAACC,MAMV;IACC,IAAIA,MAAM,CAACC,EAAE,EAAE;MACb,IAAID,MAAM,CAACE,KAAK,EAAE;QAChB,IAAI,CAAC,CAAArB,SAAU,CAACgB,MAAM,CACpBG,MAAM,CAACC,EAAE,EACTxB,0BAA0B,CAACuB,MAAM,CAAC,EAClCA,MAAM,CAACE,KAAK,CAACC,OAAO,CACrB;MACH,CAAC,MAAM;QACL,IAAI,CAAC,CAAAtB,SAAU,CAACuB,OAAO,CAACJ,MAAM,CAACC,EAAE,EAAED,MAAM,CAACK,MAAM,CAAC;MACnD;IACF,CAAC,MAAM;MACL7B,MAAM,CAAC,CAACwB,MAAM,CAACC,EAAE,CAAC;MAClB,IAAI,CAACK,IAAI,CAACN,MAAM,CAACP,MAAM,EAAEO,MAAM,CAACN,MAAM,CAAC;IACzC;EACF;EAEA;;;;EAIS,MAAMa,MAAMA,CAAA;IACnB,IAAI,CAAC,IAAI,CAAC,CAAAzB,UAAW,EAAE;MACrB,MAAM,IAAI0B,KAAK,CACb,6CAA6C,IAAI,CAAC,CAAA5B,UAAW,mBAAmB,CACjF;IACH;IACA,MAAM,IAAI,CAAC,CAAAE,UAAW,CAACU,IAAI,CAAC,yBAAyB,EAAE;MACrDb,SAAS,EAAE,IAAI,CAAC,CAAAA;KACjB,CAAC;EACJ;EAEA;;;EAGA8B,SAASA,CAAA;IACP,IAAI,CAAC,CAAA5B,SAAU,CAAC6B,KAAK,EAAE;IACvB,IAAI,CAAC,CAAA5B,UAAW,GAAGS,SAAS;IAC5B,IAAI,CAACe,IAAI,CAACjC,eAAe,CAACsC,YAAY,EAAEpB,SAAS,CAAC;EACpD;EAEA;;;EAGSU,EAAEA,CAAA;IACT,OAAO,IAAI,CAAC,CAAAtB,SAAU;EACxB;EAEA;;;EAGAiC,wBAAwBA,CAAA;IACtB,OAAO,IAAI,CAAC,CAAA/B,SAAU,CAAC+B,wBAAwB,EAAE;EACnD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}