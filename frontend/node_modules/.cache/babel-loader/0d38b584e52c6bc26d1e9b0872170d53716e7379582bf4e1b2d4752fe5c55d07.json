{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMInput\n */\n\n'use strict';\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactClass = require(\"./ReactClass\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactUpdates = require(\"./ReactUpdates\");\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\nvar input = ReactElement.createFactory('input');\nvar instancesByReactID = {};\nfunction forceUpdateIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.forceUpdate();\n  }\n}\n\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput = ReactClass.createClass({\n  displayName: 'ReactDOMInput',\n  tagName: 'INPUT',\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n  getInitialState: function () {\n    var defaultValue = this.props.defaultValue;\n    return {\n      initialChecked: this.props.defaultChecked || false,\n      initialValue: defaultValue != null ? defaultValue : null\n    };\n  },\n  render: function () {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n    props.defaultChecked = null;\n    props.defaultValue = null;\n    var value = LinkedValueUtils.getValue(this);\n    props.value = value != null ? value : this.state.initialValue;\n    var checked = LinkedValueUtils.getChecked(this);\n    props.checked = checked != null ? checked : this.state.initialChecked;\n    props.onChange = this._handleChange;\n    return input(props, this.props.children);\n  },\n  componentDidMount: function () {\n    var id = ReactMount.getID(this.getDOMNode());\n    instancesByReactID[id] = this;\n  },\n  componentWillUnmount: function () {\n    var rootNode = this.getDOMNode();\n    var id = ReactMount.getID(rootNode);\n    delete instancesByReactID[id];\n  },\n  componentDidUpdate: function (prevProps, prevState, prevContext) {\n    var rootNode = this.getDOMNode();\n    if (this.props.checked != null) {\n      DOMPropertyOperations.setValueForProperty(rootNode, 'checked', this.props.checked || false);\n    }\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n  _handleChange: function (event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n    // Here we use asap to wait until all updates have propagated, which\n    // is important when using controlled components within layers:\n    // https://github.com/facebook/react/issues/1698\n    ReactUpdates.asap(forceUpdateIfMounted, this);\n    var name = this.props.name;\n    if (this.props.type === 'radio' && name != null) {\n      var rootNode = this.getDOMNode();\n      var queryRoot = rootNode;\n      while (queryRoot.parentNode) {\n        queryRoot = queryRoot.parentNode;\n      }\n\n      // If `rootNode.form` was non-null, then we could try `form.elements`,\n      // but that sometimes behaves strangely in IE8. We could also try using\n      // `form.getElementsByName`, but that will only return direct children\n      // and won't include inputs that use the HTML5 `form=` attribute. Since\n      // the input might not even be in a form, let's just use the global\n      // `querySelectorAll` to ensure we don't miss anything.\n      var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n      for (var i = 0, groupLen = group.length; i < groupLen; i++) {\n        var otherNode = group[i];\n        if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n          continue;\n        }\n        var otherID = ReactMount.getID(otherNode);\n        \"production\" !== process.env.NODE_ENV ? invariant(otherID, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(otherID);\n        var otherInstance = instancesByReactID[otherID];\n        \"production\" !== process.env.NODE_ENV ? invariant(otherInstance, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(otherInstance);\n        // If this is a controlled radio button group, forcing the input that\n        // was previously checked to update will cause it to be come re-checked\n        // as appropriate.\n        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n      }\n    }\n    return returnValue;\n  }\n});\nmodule.exports = ReactDOMInput;","map":{"version":3,"names":["AutoFocusMixin","require","DOMPropertyOperations","LinkedValueUtils","ReactBrowserComponentMixin","ReactClass","ReactElement","ReactMount","ReactUpdates","assign","invariant","input","createFactory","instancesByReactID","forceUpdateIfMounted","isMounted","forceUpdate","ReactDOMInput","createClass","displayName","tagName","mixins","Mixin","getInitialState","defaultValue","props","initialChecked","defaultChecked","initialValue","render","value","getValue","state","checked","getChecked","onChange","_handleChange","children","componentDidMount","id","getID","getDOMNode","componentWillUnmount","rootNode","componentDidUpdate","prevProps","prevState","prevContext","setValueForProperty","event","returnValue","getOnChange","call","asap","name","type","queryRoot","parentNode","group","querySelectorAll","JSON","stringify","i","groupLen","length","otherNode","form","otherID","process","env","NODE_ENV","otherInstance","module","exports"],"sources":["C:/Users/raffy/Desktop/test/Synth/Synth/node_modules/react-embedded-browser/node_modules/react/lib/ReactDOMInput.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMInput\n */\n\n'use strict';\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactClass = require(\"./ReactClass\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\n\nvar input = ReactElement.createFactory('input');\n\nvar instancesByReactID = {};\n\nfunction forceUpdateIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.forceUpdate();\n  }\n}\n\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput = ReactClass.createClass({\n  displayName: 'ReactDOMInput',\n  tagName: 'INPUT',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  getInitialState: function() {\n    var defaultValue = this.props.defaultValue;\n    return {\n      initialChecked: this.props.defaultChecked || false,\n      initialValue: defaultValue != null ? defaultValue : null\n    };\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n\n    props.defaultChecked = null;\n    props.defaultValue = null;\n\n    var value = LinkedValueUtils.getValue(this);\n    props.value = value != null ? value : this.state.initialValue;\n\n    var checked = LinkedValueUtils.getChecked(this);\n    props.checked = checked != null ? checked : this.state.initialChecked;\n\n    props.onChange = this._handleChange;\n\n    return input(props, this.props.children);\n  },\n\n  componentDidMount: function() {\n    var id = ReactMount.getID(this.getDOMNode());\n    instancesByReactID[id] = this;\n  },\n\n  componentWillUnmount: function() {\n    var rootNode = this.getDOMNode();\n    var id = ReactMount.getID(rootNode);\n    delete instancesByReactID[id];\n  },\n\n  componentDidUpdate: function(prevProps, prevState, prevContext) {\n    var rootNode = this.getDOMNode();\n    if (this.props.checked != null) {\n      DOMPropertyOperations.setValueForProperty(\n        rootNode,\n        'checked',\n        this.props.checked || false\n      );\n    }\n\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n    // Here we use asap to wait until all updates have propagated, which\n    // is important when using controlled components within layers:\n    // https://github.com/facebook/react/issues/1698\n    ReactUpdates.asap(forceUpdateIfMounted, this);\n\n    var name = this.props.name;\n    if (this.props.type === 'radio' && name != null) {\n      var rootNode = this.getDOMNode();\n      var queryRoot = rootNode;\n\n      while (queryRoot.parentNode) {\n        queryRoot = queryRoot.parentNode;\n      }\n\n      // If `rootNode.form` was non-null, then we could try `form.elements`,\n      // but that sometimes behaves strangely in IE8. We could also try using\n      // `form.getElementsByName`, but that will only return direct children\n      // and won't include inputs that use the HTML5 `form=` attribute. Since\n      // the input might not even be in a form, let's just use the global\n      // `querySelectorAll` to ensure we don't miss anything.\n      var group = queryRoot.querySelectorAll(\n        'input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n      for (var i = 0, groupLen = group.length; i < groupLen; i++) {\n        var otherNode = group[i];\n        if (otherNode === rootNode ||\n            otherNode.form !== rootNode.form) {\n          continue;\n        }\n        var otherID = ReactMount.getID(otherNode);\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          otherID,\n          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +\n          'same `name` is not supported.'\n        ) : invariant(otherID));\n        var otherInstance = instancesByReactID[otherID];\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          otherInstance,\n          'ReactDOMInput: Unknown radio button ID %s.',\n          otherID\n        ) : invariant(otherInstance));\n        // If this is a controlled radio button group, forcing the input that\n        // was previously checked to update will cause it to be come re-checked\n        // as appropriate.\n        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n      }\n    }\n\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMInput;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}